def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
import numpy as np
import pandas as pd
import random
import pickle
import sys
from sklearn import svm
from sklearn.metrics import f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.base import clone

def init_seed():
    seed = int(sys.argv[-1])

    np.random.seed(seed)
    random.seed(seed)

def init_seed2(seed):
    np.random.seed(seed)
    random.seed(seed)

datasets = ['cgl', 'fgl', 'cgr', 'fgr']
# datasets = ['cgl']
# datasets = ['fgl']
# datasets = ['cgr']
# datasets = ['fgr']
models = [
    LogisticRegression(multi_class="multinomial", penalty='l2', C=0.5, solver="sag", n_jobs=20, max_iter=500,),
    LogisticRegression(multi_class="multinomial", penalty='l2', C=1,   solver="sag", n_jobs=20, max_iter=500,),
    LogisticRegression(multi_class="multinomial", penalty='l2', C=2,   solver="sag", n_jobs=20, max_iter=500,),
    LogisticRegression(multi_class="multinomial", penalty='l2', C=5,   solver="sag", n_jobs=20, max_iter=500,),
    LogisticRegression(multi_class="multinomial", penalty='l2', C=10,  solver="sag", n_jobs=20, max_iter=500,),

    svm.SVC(C=0.5, kernel='linear', probability=True, max_iter=500,),
    svm.SVC(C=1,   kernel='linear', probability=True, max_iter=500,),
    svm.SVC(C=2,   kernel='linear', probability=True, max_iter=500,),
    svm.SVC(C=5,   kernel='linear', probability=True, max_iter=500,),
    svm.SVC(C=10,  kernel='linear', probability=True, max_iter=500,)
]

def load_dataset_no_context(path, dataset):
    with open(path, 'rb') as fin:
        data = pickle.load(fin)
    train_k = list(data[dataset]['train']['x'].keys())
    val_k = list(data[dataset]['val']['x'].keys())
    test_k = list(data[dataset]['test']['x'].keys())

    train_x = [data[dataset]['train']['x'][x] for x in train_k]
    val_x = [data[dataset]['val']['x'][x] for x in val_k]
    test_x = [data[dataset]['test']['x'][x] for x in test_k]

    train_y = [data[dataset]['train']['y'][x] for x in train_k]
    val_y = [data[dataset]['val']['y'][x] for x in val_k]
    test_y = [data[dataset]['test']['y'][x] for x in test_k]

    return {'train_k': train_k, 'train_x': train_x, 'train_y': train_y, 'val_k': val_k, 'val_x': val_x, 'val_y': val_y, 'test_k': test_k, 'test_x': test_x, 'test_y': test_y,}

def load_dataset_with_context(path, dataset, aggregation_function):
    with open(path, 'rb') as fin:
        data = pickle.load(fin)
    train_k = list(data[dataset]['train']['x'].keys())
    val_k = list(data[dataset]['val']['x'].keys())
    test_k = list(data[dataset]['test']['x'].keys())

    train_x = [aggregation_function(np.array(data[dataset]['train']['x'][x]).squeeze(1), axis=0) for x in train_k]
    train_y = [data[dataset]['train']['y'][x] for x in train_k]

    val_x = [aggregation_function(np.array(data[dataset]['val']['x'][x]).squeeze(1), axis=0) for x in val_k]
    val_y = [data[dataset]['val']['y'][x] for x in val_k]

    test_x = [aggregation_function(np.array(data[dataset]['test']['x'][x]).squeeze(1), axis=0) for x in test_k]
    test_y = [data[dataset]['test']['y'][x] for x in test_k]

    return {'train_k': train_k, 'train_x': train_x, 'train_y': train_y, 'val_k': val_k, 'val_x': val_x, 'val_y': val_y, 'test_k': test_k, 'test_x': test_x, 'test_y': test_y,}

# This function besides loading train, val, test (k,x,y), also splits into two: one that has more than T sentences in the context, and one that does not
# This is in an attempt to find a good balance
def load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, aggregation_function, T):

    train_k_above_threshold = [x for x in list(data_with_context[dataset]['train']['x'].keys()) if len(data_with_context[dataset]['train']['x'][x]) > T]
    val_k_above_threshold = [x for x in list(data_with_context[dataset]['val']['x'].keys()) if len(data_with_context[dataset]['val']['x'][x]) > T]
    test_k_above_threshold = [x for x in list(data_with_context[dataset]['test']['x'].keys()) if len(data_with_context[dataset]['test']['x'][x]) > T]

    train_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['train']['x'][x]).squeeze(1), axis=0) for x in train_k_above_threshold]
    train_y_above_threshold = [data_with_context[dataset]['train']['y'][x] for x in train_k_above_threshold]

    val_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['val']['x'][x]).squeeze(1), axis=0) for x in val_k_above_threshold]
    val_y_above_threshold = [data_with_context[dataset]['val']['y'][x] for x in val_k_above_threshold]

    test_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['test']['x'][x]).squeeze(1), axis=0) for x in test_k_above_threshold]
    test_y_above_threshold = [data_with_context[dataset]['test']['y'][x] for x in test_k_above_threshold]

    train_k_below_threshold = [x for x in list(data_without_context[dataset]['train']['x'].keys()) if len(data_with_context[dataset]['train']['x'][x]) <= T]
    val_k_below_threshold = [x for x in list(data_without_context[dataset]['val']['x'].keys()) if len(data_with_context[dataset]['val']['x'][x]) <= T]
    test_k_below_threshold = [x for x in list(data_without_context[dataset]['test']['x'].keys()) if len(data_with_context[dataset]['test']['x'][x]) <= T]

    train_x_below_threshold = [data_without_context[dataset]['train']['x'][x] for x in train_k_below_threshold]
    val_x_below_threshold = [data_without_context[dataset]['val']['x'][x] for x in val_k_below_threshold]
    test_x_below_threshold = [data_without_context[dataset]['test']['x'][x] for x in test_k_below_threshold]

    train_y_below_threshold = [data_without_context[dataset]['train']['y'][x] for x in train_k_below_threshold]
    val_y_below_threshold = [data_without_context[dataset]['val']['y'][x] for x in val_k_below_threshold]
    test_y_below_threshold = [data_without_context[dataset]['test']['y'][x] for x in test_k_below_threshold]

    return {'train_k_above_threshold': train_k_above_threshold, 
    'train_x_above_threshold': train_x_above_threshold, 
    'train_y_above_threshold': train_y_above_threshold, 
    'val_k_above_threshold': val_k_above_threshold, 
    'val_x_above_threshold': val_x_above_threshold,
    'val_y_above_threshold': val_y_above_threshold, 
    'test_k_above_threshold': test_k_above_threshold, 
    'test_x_above_threshold': test_x_above_threshold, 
    'test_y_above_threshold': test_y_above_threshold,
    'train_k_below_threshold': train_k_below_threshold, 
    'train_x_below_threshold': train_x_below_threshold, 
    'train_y_below_threshold': train_y_below_threshold, 
    'val_k_below_threshold': val_k_below_threshold, 
    'val_x_below_threshold': val_x_below_threshold,
    'val_y_below_threshold': val_y_below_threshold, 
    'test_k_below_threshold': test_k_below_threshold, 
    'test_x_below_threshold': test_x_below_threshold, 
    'test_y_below_threshold': test_y_below_threshold,
    }

def load_dataset_with_context_with_threshold2(data_with_context, data_without_context, dataset, aggregation_function, T):

    train_k_all = list(data_with_context[dataset]['train']['x'].keys())
    val_k_all = list(data_with_context[dataset]['val']['x'].keys())
    test_k_all = list(data_with_context[dataset]['test']['x'].keys())

    train_x_all_context = [aggregation_function(np.array(data_with_context[dataset]['train']['x'][x]).squeeze(1), axis=0) for x in train_k_all]
    train_y_all_context = [data_with_context[dataset]['train']['y'][x] for x in train_k_all]
    train_x_all_nocontext = [data_without_context[dataset]['train']['x'][x] for x in train_k_all]
    train_y_all_nocontext = [data_without_context[dataset]['train']['y'][x] for x in train_k_all]

    train_k_above_threshold = [x for x in list(data_with_context[dataset]['train']['x'].keys()) if len(data_with_context[dataset]['train']['x'][x]) > T]
    val_k_above_threshold = [x for x in list(data_with_context[dataset]['val']['x'].keys()) if len(data_with_context[dataset]['val']['x'][x]) > T]
    test_k_above_threshold = [x for x in list(data_with_context[dataset]['test']['x'].keys()) if len(data_with_context[dataset]['test']['x'][x]) > T]

    train_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['train']['x'][x]).squeeze(1), axis=0) for x in train_k_above_threshold]
    train_y_above_threshold = [data_with_context[dataset]['train']['y'][x] for x in train_k_above_threshold]

    val_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['val']['x'][x]).squeeze(1), axis=0) for x in val_k_above_threshold]
    val_y_above_threshold = [data_with_context[dataset]['val']['y'][x] for x in val_k_above_threshold]

    test_x_above_threshold = [aggregation_function(np.array(data_with_context[dataset]['test']['x'][x]).squeeze(1), axis=0) for x in test_k_above_threshold]
    test_y_above_threshold = [data_with_context[dataset]['test']['y'][x] for x in test_k_above_threshold]

    train_k_below_threshold = [x for x in list(data_without_context[dataset]['train']['x'].keys()) if len(data_with_context[dataset]['train']['x'][x]) <= T]
    val_k_below_threshold = [x for x in list(data_without_context[dataset]['val']['x'].keys()) if len(data_with_context[dataset]['val']['x'][x]) <= T]
    test_k_below_threshold = [x for x in list(data_without_context[dataset]['test']['x'].keys()) if len(data_with_context[dataset]['test']['x'][x]) <= T]

    train_x_below_threshold = [data_without_context[dataset]['train']['x'][x] for x in train_k_below_threshold]
    val_x_below_threshold = [data_without_context[dataset]['val']['x'][x] for x in val_k_below_threshold]
    test_x_below_threshold = [data_without_context[dataset]['test']['x'][x] for x in test_k_below_threshold]

    train_y_below_threshold = [data_without_context[dataset]['train']['y'][x] for x in train_k_below_threshold]
    val_y_below_threshold = [data_without_context[dataset]['val']['y'][x] for x in val_k_below_threshold]
    test_y_below_threshold = [data_without_context[dataset]['test']['y'][x] for x in test_k_below_threshold]

    return { 'train_k_all': train_k_all,
    'train_x_all_context': train_x_all_context,
    'train_y_all_context': train_y_all_context,
    'train_x_all_nocontext': train_x_all_nocontext,
    'train_y_all_nocontext': train_y_all_nocontext,
    'train_k_above_threshold': train_k_above_threshold, 
    'train_x_above_threshold': train_x_above_threshold, 
    'train_y_above_threshold': train_y_above_threshold, 
    'val_k_above_threshold': val_k_above_threshold, 
    'val_x_above_threshold': val_x_above_threshold,
    'val_y_above_threshold': val_y_above_threshold, 
    'test_k_above_threshold': test_k_above_threshold, 
    'test_x_above_threshold': test_x_above_threshold, 
    'test_y_above_threshold': test_y_above_threshold,
    'train_k_below_threshold': train_k_below_threshold, 
    'train_x_below_threshold': train_x_below_threshold, 
    'train_y_below_threshold': train_y_below_threshold, 
    'val_k_below_threshold': val_k_below_threshold, 
    'val_x_below_threshold': val_x_below_threshold,
    'val_y_below_threshold': val_y_below_threshold, 
    'test_k_below_threshold': test_k_below_threshold, 
    'test_x_below_threshold': test_x_below_threshold, 
    'test_y_below_threshold': test_y_below_threshold,
    }



def analysis_no_context(path):
    results = {}
    # with open(path, 'rb') as fin:
        # data = pickle.load(fin)
    # print(data.keys())
    for dataset in datasets:
        data = load_dataset_no_context(path, dataset)
        train_k = data['train_k']
        val_k = data['val_k']
        test_k = data['test_k']
        train_x = data['train_x']
        val_x = data['val_x']
        test_x = data['test_x']
        train_y = data['train_y']
        val_y = data['val_y']
        test_y = data['test_y']

        scores = []
        for model in models:
            init_seed()
            m = clone(model)
            m.fit(train_x, train_y)
            scores.append(f1_score(val_y, m.predict(val_x), average='weighted'))
        print(dataset)
        print(scores)
        init_seed()
        bm = clone(models[np.argmax(scores)])
        # print(train_x.shape)
        # print(train_y.shape)
        bm.fit(train_x, train_y)
        results[dataset] = (f1_score(test_y, bm.predict(test_x), average='weighted'), np.argmax(scores))
        print(f1_score(test_y, bm.predict(test_x), average='weighted'))
        # exit()
        # print("-------------------\n")
    # print(len(data))
    # print(list(data.keys()))
    # print(list(data['fgl']['train']['y'].values())[:10])
    # print(results)
    return results

def analysis_with_context(path):
    results = {}
    for dataset in datasets:
        data = load_dataset_with_context(path, dataset, np.mean)
        train_k = data['train_k']
        val_k = data['val_k']
        test_k = data['test_k']
        train_x = data['train_x']
        val_x = data['val_x']
        test_x = data['test_x']
        train_y = data['train_y']
        val_y = data['val_y']
        test_y = data['test_y']

        scores = []
        for model in models[:2]:
            init_seed()
            m = clone(model)
            m.fit(train_x, train_y)
            scores.append(f1_score(val_y, m.predict(val_x), average='weighted'))

        init_seed()
        bm = clone(models[np.argmax(scores)])
        bm.fit(train_x, train_y)
        results[dataset] = (f1_score(test_y, bm.predict(test_x), average='weighted'), np.argmax(scores))


    print(results)
    return results


def analysis_with_context_with_threshold(path_with_context, path_without_context):
    with open(path_with_context, 'rb') as fin:
        data_with_context = pickle.load(fin)
    with open(path_without_context, 'rb') as fin:
        data_without_context = pickle.load(fin)
    results = {}
    for dataset in datasets:
        dataset_result = []
        for model_number, model in enumerate(models):
            for threshold in [5,10,25,50,75,90]:
                data = load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, np.mean, threshold)
                train_k_above_threshold = data['train_k_above_threshold']
                train_x_above_threshold = data['train_x_above_threshold']
                train_y_above_threshold = data['train_y_above_threshold']
                val_k_above_threshold = data['val_k_above_threshold']
                val_x_above_threshold = data['val_x_above_threshold']
                val_y_above_threshold = data['val_y_above_threshold']
                test_k_above_threshold = data['test_k_above_threshold']
                test_x_above_threshold = data['test_x_above_threshold']
                test_y_above_threshold = data['test_y_above_threshold']
                train_k_below_threshold = data['train_k_below_threshold']
                train_x_below_threshold = data['train_x_below_threshold']
                train_y_below_threshold = data['train_y_below_threshold']
                val_k_below_threshold = data['val_k_below_threshold']
                val_x_below_threshold = data['val_x_below_threshold']
                val_y_below_threshold = data['val_y_below_threshold']
                test_k_below_threshold = data['test_k_below_threshold']
                test_x_below_threshold = data['test_x_below_threshold']
                test_y_below_threshold = data['test_y_below_threshold']
                init_seed()
                classifier1 = clone(model)
                classifier2 = clone(model)
                # if len(train_k_below_threshold) == 0:
                #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
                #     dev_y = val_y_above_threshold
                #     predicted_y = classifier1.predict(val_x_above_threshold)
                # else:
                classifier1.fit(train_x_above_threshold, train_y_above_threshold)
                classifier2.fit(train_x_below_threshold, train_y_below_threshold)

                dev_y = np.hstack([val_y_above_threshold, val_y_below_threshold])
                predicted_y = np.hstack([classifier1.predict(val_x_above_threshold), classifier2.predict(val_x_below_threshold)])
                
                f1 = f1_score(dev_y, predicted_y, average='weighted')
                dataset_result.append((f1, model_number, threshold))
                
        max_key = np.argmax([x[0] for x in dataset_result])
        init_seed()
        classifier1 = clone(models[dataset_result[max_key][1]])
        classifier2 = clone(models[dataset_result[max_key][1]])
        data = load_dataset_with_context_with_threshold2(data_with_context, data_without_context, dataset, np.mean, dataset_result[max_key][2])
        train_k_above_threshold = data['train_k_above_threshold']
        train_x_above_threshold = data['train_x_above_threshold']
        train_y_above_threshold = data['train_y_above_threshold']
        val_k_above_threshold = data['val_k_above_threshold']
        val_x_above_threshold = data['val_x_above_threshold']
        val_y_above_threshold = data['val_y_above_threshold']
        test_k_above_threshold = data['test_k_above_threshold']
        test_x_above_threshold = data['test_x_above_threshold']
        test_y_above_threshold = data['test_y_above_threshold']
        train_k_below_threshold = data['train_k_below_threshold']
        train_x_below_threshold = data['train_x_below_threshold']
        train_y_below_threshold = data['train_y_below_threshold']
        val_k_below_threshold = data['val_k_below_threshold']
        val_x_below_threshold = data['val_x_below_threshold']
        val_y_below_threshold = data['val_y_below_threshold']
        test_k_below_threshold = data['test_k_below_threshold']
        test_x_below_threshold = data['test_x_below_threshold']
        test_y_below_threshold = data['test_y_below_threshold']
        # if len(train_k_below_threshold) == 0:
        #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
        #     test_y = test_y_above_threshold
        #     predicted_y = classifier1.predict(test_x_above_threshold)
        # else:
        init_seed()
        classifier1.fit(train_x_above_threshold, train_y_above_threshold)
        classifier2.fit(train_x_below_threshold, train_y_below_threshold)
        test_y = np.hstack([test_y_above_threshold, test_y_below_threshold])
        predicted_y = np.hstack([classifier1.predict(test_x_above_threshold), classifier2.predict(test_x_below_threshold)])
        f1 = f1_score(test_y, predicted_y, average='weighted')
        print(dataset)
        for d in dataset_result:
            print(d)
        print("------\n")
        results[dataset] = (f1, dataset_result[max_key])
    return results


def analysis_with_context_with_threshold2(path_with_context, path_without_context):
    with open(path_with_context, 'rb') as fin:
        data_with_context = pickle.load(fin)
    with open(path_without_context, 'rb') as fin:
        data_without_context = pickle.load(fin)
    results = {}
    for dataset in datasets[:2]:
        dataset_result = []
        for model_number, model in enumerate(models[:2]):
            for threshold in [10,25,50,90]:
                data = load_dataset_with_context_with_threshold2(data_with_context, data_without_context, dataset, np.mean, threshold)
                train_k_above_threshold = data['train_k_above_threshold']
                train_x_above_threshold = data['train_x_above_threshold']
                train_y_above_threshold = data['train_y_above_threshold']
                val_k_above_threshold = data['val_k_above_threshold']
                val_x_above_threshold = data['val_x_above_threshold']
                val_y_above_threshold = data['val_y_above_threshold']
                test_k_above_threshold = data['test_k_above_threshold']
                test_x_above_threshold = data['test_x_above_threshold']
                test_y_above_threshold = data['test_y_above_threshold']
                train_k_below_threshold = data['train_k_below_threshold']
                train_x_below_threshold = data['train_x_below_threshold']
                train_y_below_threshold = data['train_y_below_threshold']
                val_k_below_threshold = data['val_k_below_threshold']
                val_x_below_threshold = data['val_x_below_threshold']
                val_y_below_threshold = data['val_y_below_threshold']
                test_k_below_threshold = data['test_k_below_threshold']
                test_x_below_threshold = data['test_x_below_threshold']
                test_y_below_threshold = data['test_y_below_threshold']
                train_x_all_context = data['train_x_all_context']
                train_y_all_context = data['train_y_all_context']
                train_x_all_nocontext = data['train_x_all_nocontext']
                train_y_all_nocontext = data['train_y_all_nocontext']
                init_seed()
                classifier1 = clone(model)
                classifier2 = clone(model)
                # if len(train_k_below_threshold) == 0:
                #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
                #     dev_y = val_y_above_threshold
                #     predicted_y = classifier1.predict(val_x_above_threshold)
                # else:
                classifier1.fit(train_x_all_context, train_y_all_context)
                classifier2.fit(train_x_all_nocontext, train_y_all_nocontext)

                dev_y = np.hstack([val_y_above_threshold, val_y_below_threshold])
                predicted_y = np.hstack([classifier1.predict(val_x_above_threshold), classifier2.predict(val_x_below_threshold)])
                
                f1 = f1_score(dev_y, predicted_y, average='weighted')
                dataset_result.append((f1, model_number, threshold))
                
        max_key = np.argmax([x[0] for x in dataset_result])
        init_seed()
        classifier1 = clone(models[dataset_result[max_key][1]])
        classifier2 = clone(models[dataset_result[max_key][1]])
        data = load_dataset_with_context_with_threshold2(data_with_context, data_without_context, dataset, np.mean, dataset_result[max_key][2])
        train_k_above_threshold = data['train_k_above_threshold']
        train_x_above_threshold = data['train_x_above_threshold']
        train_y_above_threshold = data['train_y_above_threshold']
        val_k_above_threshold = data['val_k_above_threshold']
        val_x_above_threshold = data['val_x_above_threshold']
        val_y_above_threshold = data['val_y_above_threshold']
        test_k_above_threshold = data['test_k_above_threshold']
        test_x_above_threshold = data['test_x_above_threshold']
        test_y_above_threshold = data['test_y_above_threshold']
        train_k_below_threshold = data['train_k_below_threshold']
        train_x_below_threshold = data['train_x_below_threshold']
        train_y_below_threshold = data['train_y_below_threshold']
        val_k_below_threshold = data['val_k_below_threshold']
        val_x_below_threshold = data['val_x_below_threshold']
        val_y_below_threshold = data['val_y_below_threshold']
        test_k_below_threshold = data['test_k_below_threshold']
        test_x_below_threshold = data['test_x_below_threshold']
        test_y_below_threshold = data['test_y_below_threshold']
        # if len(train_k_below_threshold) == 0:
        #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
        #     test_y = test_y_above_threshold
        #     predicted_y = classifier1.predict(test_x_above_threshold)
        # else:
        classifier1.fit(train_x_all_context, train_y_all_context)
        classifier2.fit(train_x_all_nocontext, train_y_all_nocontext)
        test_y = np.hstack([test_y_above_threshold, test_y_below_threshold])
        predicted_y = np.hstack([classifier1.predict(test_x_above_threshold), classifier2.predict(test_x_below_threshold)])
        f1 = f1_score(test_y, predicted_y, average='weighted')
        print(dataset)
        print(dataset_result)
        print("------\n")
        results[dataset] = (f1, dataset_result[max_key])
    return results

def find_best_threshold(paths_with_context, paths_without_context):
    # x = 0
    # results = {}
    # results['cgl'] = []
    # results['fgl'] = []
    # results['cgr'] = []
    # results['fgr'] = []
    # current_seed = 0
    # for pwithc, pwithoutc in zip(paths_with_context, paths_without_context):
    #     current_seed += 1
    #     with open(pwithc, 'rb') as fin:
    #         data_with_context = pickle.load(fin)
    #     with open(pwithoutc, 'rb') as fin:
    #         data_without_context = pickle.load(fin)
    #     for dataset in datasets:
    #         dataset_result = []
    #         for model_number, model in enumerate(models):
    #             for threshold in [5,10,25,50,90]:
    #                 print(f"{model_number} - {threshold}")
    #                 data = load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, np.mean, threshold)
    #                 train_k_above_threshold = data['train_k_above_threshold']
    #                 train_x_above_threshold = data['train_x_above_threshold']
    #                 train_y_above_threshold = data['train_y_above_threshold']
    #                 val_k_above_threshold = data['val_k_above_threshold']
    #                 val_x_above_threshold = data['val_x_above_threshold']
    #                 val_y_above_threshold = data['val_y_above_threshold']
    #                 test_k_above_threshold = data['test_k_above_threshold']
    #                 test_x_above_threshold = data['test_x_above_threshold']
    #                 test_y_above_threshold = data['test_y_above_threshold']
    #                 train_k_below_threshold = data['train_k_below_threshold']
    #                 train_x_below_threshold = data['train_x_below_threshold']
    #                 train_y_below_threshold = data['train_y_below_threshold']
    #                 val_k_below_threshold = data['val_k_below_threshold']
    #                 val_x_below_threshold = data['val_x_below_threshold']
    #                 val_y_below_threshold = data['val_y_below_threshold']
    #                 test_k_below_threshold = data['test_k_below_threshold']
    #                 test_x_below_threshold = data['test_x_below_threshold']
    #                 test_y_below_threshold = data['test_y_below_threshold']
    #                 init_seed2(current_seed)
    #                 classifier1 = clone(model)
    #                 # classifier2 = clone(model)
    #                 # if len(train_k_below_threshold) == 0:
    #                 #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
    #                 #     dev_y = val_y_above_threshold
    #                 #     predicted_y = classifier1.predict(val_x_above_threshold)
    #                 # else:
    #                 train_x = np.vstack([train_x_above_threshold, train_x_below_threshold])
    #                 train_y = np.hstack([train_y_above_threshold, train_y_below_threshold])
    #                 classifier1.fit(train_x, train_y)
    #                 # classifier2.fit(train_x_below_threshold, train_y_below_threshold)

    #                 dev_x = np.vstack([val_x_above_threshold, val_x_below_threshold])
    #                 dev_y = np.hstack([val_y_above_threshold, val_y_below_threshold])
    #                 predicted_y = classifier1.predict(dev_x)
                    
    #                 f1 = f1_score(dev_y, predicted_y, average='weighted')
    #                 dataset_result.append((f1, model_number, threshold))
    #         results[dataset].append(dataset_result)
    # print(results)
    # exit()



    
    # SUPERVISED (TWOC)
    # results = {'cgl': [[(0.4102804329347522, 0, 5), (0.41208536186729433, 0, 10), (0.4231259952775517, 0, 25), (0.41921452305971646, 0, 50), (0.4138169262246121, 0, 90),   (0.39836511003030206, 1, 5), (0.4052881905569985, 1, 10), (0.4092884262251215, 1, 25), (0.40966779520458957, 1, 50), (0.39843408756213533, 1, 90), (0.3881889255918104, 2, 5), (0.39301959572688444, 2, 10), (0.4000588910566318, 2, 25), (0.3985351879754606, 2, 50), (0.38954477644955987, 2, 90), (0.37166440742623874, 3, 5), (0.38451811005236664, 3, 10), (0.36934701280223153, 3, 25), (0.37389530567115703, 3, 50), (0.3647776330120258, 3, 90), (0.36863442502614446, 4, 5), (0.37100528129179694, 4, 10), (0.35755238921472304, 4, 25), (0.3560937904539152, 4, 50), (0.3444706522569105, 4, 90), (0.3853275384979439, 5, 5), (0.3747905552233459, 5, 10), (0.3914222120188986, 5, 25), (0.38021841568110815, 5, 50), (0.3931250406711551, 5, 90), (0.36387428593924276, 6, 5), (0.35646969233628856, 6, 10), (0.37483776252063494, 6, 25), (0.37140400216913305, 6, 50), (0.3614250952804833, 6, 90), (0.34358957635883985, 7, 5), (0.3614699344300774, 7, 10), (0.36457202418424556, 7, 25), (0.3604352918409713, 7, 50), (0.3638132422467477, 7, 90), (0.34469240276552005, 8, 5), (0.3217570948870951, 8, 10), (0.33708552129927993, 8, 25), (0.35204118516095734, 8, 50), (0.35698565716482744, 8, 90), (0.33151931062270584, 9, 5), (0.32144047253534525, 9, 10), (0.3362675855409881, 9, 25), (0.3470608773997233, 9, 50), (0.3614758210187094, 9, 90)], [(0.40308637147270365, 0, 5), (0.4175825933966849, 0, 10), (0.41694553122448164, 0, 25), (0.42188594274500124, 0, 50), (0.41471563986308974, 0, 90), (0.39419726715169173, 1, 5), (0.4086996234077219, 1, 10), (0.4113048812163874, 1, 25), (0.4074519708507448, 1, 50), (0.4056981277780971, 1, 90), (0.3829242026308986, 2, 5), (0.3990312207868829, 2, 10), (0.395203915845685, 2, 25), (0.3981140244083306, 2, 50), (0.38828181830797426, 2, 90), (0.3719065432592382, 3, 5), (0.3706185161774576, 3, 10), (0.3854508361495431, 3, 25), (0.3861978792201278, 3, 50), (0.38227992478066797, 3, 90), (0.36418299009219696, 4, 5), (0.3649977482140913, 4, 10), (0.3748469510090493, 4, 25), (0.3783119727717996, 4, 50), (0.3688728406084082, 4, 90), (0.38187701701044086, 5, 5), (0.38933223502474285, 5, 10), (0.3878524000365328, 5, 25), (0.4027965581001839, 5, 50), (0.39095155452064545, 5, 90), (0.3746640399534234, 6, 5), (0.3835881582404714, 6, 10), (0.3853440033775971, 6, 25), (0.38497187627271046, 6, 50), (0.3717925932628463, 6, 90), (0.34736938091701314, 7, 5), (0.3657965276940995, 7, 10), (0.3652261289273505, 7, 25), (0.37986504772076285, 7, 50), (0.36361318361544553, 7, 90), (0.34071103205346165, 8, 5), (0.3415514014068976, 8, 10), (0.3487732277513302, 8, 25), (0.367781896839728, 8, 50), (0.3592568230707075, 8, 90), (0.3342337450480731, 9, 5), (0.3421200862513303, 9, 10), (0.35166251479864213, 9, 25), (0.3674656008332376, 9, 50), (0.362803637692165, 9, 90)], [(0.41022159933139585, 0, 5), (0.417755511965642, 0, 10), (0.4154310854330731, 0, 25), (0.4147507455109812, 0, 50), (0.4088234233262463, 0, 90), (0.39620303382913946, 1, 5), (0.40520010795394223, 1, 10), (0.40580191812601735, 1, 25), (0.399196443916301, 1, 50), (0.399388037413909, 1, 90), (0.3869353501216854, 2, 5), (0.3856925172970741, 2, 10), (0.38989081142394905, 2, 25), (0.38661081459057145, 2, 50), (0.38539596202813003, 2, 90), (0.3743842179423089, 3, 5), (0.3773817389864607, 3, 10), (0.38108355886851997, 3, 25), (0.3631830783488949, 3, 50), (0.37207887069969764, 3, 90), (0.3628776162121137, 4, 5), (0.3672485875506718, 4, 10), (0.36188553154834524, 4, 25), (0.3558932513351208, 4, 50), (0.3507435719643765, 4, 90), (0.38971893591986806, 5, 5), (0.38243207977063, 5, 10), (0.3971816385680995, 5, 25), (0.39579362233978366, 5, 50), (0.39106753078420226, 5, 90), (0.37237758633127965, 6, 5), (0.3778107688166909, 6, 10), (0.3742933419163627, 6, 25), (0.3667304578447956, 6, 50), (0.3720487279014911, 6, 90), (0.3540097065088358, 7, 5), (0.3720084980359627, 7, 10), (0.3519223119903412, 7, 25), (0.36069886021350117, 7, 50), (0.35521464317799406, 7, 90), (0.3314276275128467, 8, 5), (0.34549802260329104, 8, 10), (0.3372856563730308, 8, 25), (0.33256739248217576, 8, 50), (0.3536739584284242, 8, 90), (0.328134591376323, 9, 5), (0.3366874944818235, 9, 10), (0.3463030354431289, 9, 25), (0.33432514785791645, 9, 50), (0.35620968758539645, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # UNSUPERVISED (TWOC)
    # results = {'cgl': [[(0.3782813874973521, 0, 5), (0.3780468143768835, 0, 10), (0.3898021864769625, 0, 25), (0.3855812341312119, 0, 50), (0.38878175305833473, 0, 90), (0.3669270821992437, 1, 5), (0.36774529206818646, 1, 10), (0.38144528341867323, 1, 25), (0.37653113799339577, 1, 50), (0.3722225002640868, 1, 90), (0.3528325666553546, 2, 5), (0.3624304578687187, 2, 10), (0.3672164963599891, 2, 25), (0.3655931127328699, 2, 50), (0.35489153294292186, 2, 90), (0.34476333055331165, 3, 5), (0.34721911427784613, 3, 10), (0.3522724969198418, 3, 25), (0.3428389058063359, 3, 50), (0.3313361553330887, 3, 90), (0.3298490034487891, 4, 5), (0.3346453901522413, 4, 10), (0.3366044083315605, 4, 25), (0.3357708980814143, 4, 50), (0.3167126455927852, 4, 90), (0.3592485010874357, 5, 5), (0.34936019409537494, 5, 10), (0.3645627473641764, 5, 25), (0.37631354737823103, 5, 50), (0.3684227564930254, 5, 90), (0.34255920372590243, 6, 5), (0.34205191439664123, 6, 10), (0.34689390696377687, 6, 25), (0.3466770133012599, 6, 50), (0.34851653889817485, 6, 90), (0.32178733232693457, 7, 5), (0.32780869873802115, 7, 10), (0.3434689895349313, 7, 25), (0.34042314135606816, 7, 50), (0.3273329831138282, 7, 90), (0.32427337945533097, 8, 5), (0.32381360191297237, 8, 10), (0.332353907319302, 8, 25), (0.3433532162489752, 8, 50), (0.34022458880551143, 8, 90), (0.32593272791661104, 9, 5), (0.3260088922147983, 9, 10), (0.3345713433683215, 9, 25), (0.342606796591596, 9, 50), (0.33121739042248577, 9, 90)], [(0.37137633305342943, 0, 5), (0.37464613736265284, 0, 10), (0.39217149933719486, 0, 25), (0.38871419791361317, 0, 50), (0.3912133790548793, 0, 90), (0.37144178985685233, 1, 5), (0.36074858169022817, 1, 10), (0.3807918323825396, 1, 25), (0.3731796045442015, 1, 50), (0.3712909050995396, 1, 90), (0.36017387532566036, 2, 5), (0.35116504126918396, 2, 10), (0.3675872153411259, 2, 25), (0.36334374791542334, 2, 50), (0.36517385657058143, 2, 90), (0.34800807547154083, 3, 5), (0.34539113016262835, 3, 10), (0.3485175072933307, 3, 25), (0.3457486543270156, 3, 50), (0.3401532621247159, 3, 90), (0.34450394496658243, 4, 5), (0.3323680134472784, 4, 10), (0.33650627798163635, 4, 25), (0.34122640241750324, 4, 50), (0.3334024110726006, 4, 90), (0.36503093988681284, 5, 5), (0.3576569531784085, 5, 10), (0.37939138558355084, 5, 25), (0.3757071311560938, 5, 50), (0.3717974355947033, 5, 90), (0.354850089528005, 6, 5), (0.35264694013033854, 6, 10), (0.35837911749141843, 6, 25), (0.35000031810049864, 6, 50), (0.3427666686602213, 6, 90), (0.318335240495369, 7, 5), (0.3493500308066362, 7, 10), (0.34628541415482833, 7, 25), (0.34384398523844806, 7, 50), (0.34341203371395845, 7, 90), (0.32859583675966775, 8, 5), (0.311710973595099, 8, 10), (0.3283769185640163, 8, 25), (0.32651875608960995, 8, 50), (0.3474415883913153, 8, 90), (0.31198725173134584, 9, 5), (0.2966258020578455, 9, 10), (0.34114315024920755, 9, 25), (0.3313055673864683, 9, 50), (0.34263501714189454, 9, 90)], [(0.39201643787936635, 0, 5), (0.3870724592383659, 0, 10), (0.38624178542990945, 0, 25), (0.3902345957484623, 0, 50), (0.39028072810399367, 0, 90), (0.3849350171112882, 1, 5), (0.3729741084977359, 1, 10), (0.37341313846711616, 1, 25), (0.37319279392745075, 1, 50), (0.3802189629713088, 1, 90), (0.3779890282169239, 2, 5), (0.3661697069783714, 2, 10), (0.3651550678816176, 2, 25), (0.3701803990307472, 2, 50), (0.37242524615730155, 2, 90), (0.35364626772968516, 3, 5), (0.3545579698186012, 3, 10), (0.3466591213360149, 3, 25), (0.339273442391637, 3, 50), (0.3587064122870058, 3, 90), (0.3490769627038725, 4, 5), (0.35101597236025095, 4, 10), (0.33320767707005233, 4, 25), (0.33289847028711156, 4, 50), (0.342173209194011, 4, 90), (0.3574924119425629, 5, 5), (0.35840686388633874, 5, 10), (0.36891621373032485, 5, 25), (0.37529564270127147, 5, 50), (0.36651217950887716, 5, 90), (0.3463947668560262, 6, 5), (0.3349752481017397, 6, 10), (0.3441200376190676, 6, 25), (0.3464441496443967, 6, 50), (0.3526588333537202, 6, 90), (0.32449550390461157, 7, 5), (0.31043652473898, 7, 10), (0.3427204242841226, 7, 25), (0.3372969214458639, 7, 50), (0.3523337751579334, 7, 90), (0.3185119450256161, 8, 5), (0.3039627782091761, 8, 10), (0.31779726333847486, 8, 25), (0.32957302562371804, 8, 50), (0.34896653660214144, 8, 90), (0.32169023476107617, 9, 5), (0.3122606422045862, 9, 10), (0.322591357759478, 9, 25), (0.32887548694697155, 9, 50), (0.3485730842070277, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}   
    # SUPERVISED (ONEC)
    # results = {'cgl': [[(0.4042356426922654, 0, 5), (0.4107619626205481, 0, 10), (0.4160092288247386, 0, 25), (0.4058986953516379, 0, 50), (0.406005692909913, 0, 90), (0.40838647438812253, 1, 5), (0.4045444474422312, 1, 10), (0.4079199657023436, 1, 25), (0.4024617506695809, 1, 50), (0.40625075940187044, 1, 90), (0.3979398324658045, 2, 5), (0.40348717811566526, 2, 10), (0.40429156067294475, 2, 25), (0.3986886208546781, 2, 50), (0.3981889721815933, 2, 90), (0.3938117631104169, 3, 5), (0.3942717581924138, 3, 10), (0.395817934938701, 3, 25), (0.3852975580562127, 3, 50), (0.390602947292478, 3, 90), (0.3875556206657997, 4, 5), (0.38578603631960107, 4, 10), (0.3900843850846734, 4, 25), (0.3823328524348764, 4, 50), (0.38604008254418587, 4, 90), (0.3922113450369085, 5, 5), (0.3847428667908436, 5, 10), (0.3878502391261553, 5, 25), (0.3712290146054678, 5, 50), (0.36951836743130934, 5, 90), (0.37419764211138873, 6, 5), (0.38629877615253755, 6, 10), (0.39495777258879355, 6, 25), (0.3551285678144711, 6, 50), (0.36824751805098305, 6, 90), (0.3501613721050864, 7, 5), (0.3625054558057274, 7, 10), (0.35454989867264586, 7, 25), (0.351380924996797, 7, 50), (0.34287268266576665, 7, 90), (0.3341696879271528, 8, 5), (0.34613988554097375, 8, 10), (0.34079975828839404, 8, 25), (0.3403112779680209, 8, 50), (0.33813193612773906, 8, 90), (0.3395482923862807, 9, 5), (0.35701188705504644, 9, 10), (0.33235581976906436, 9, 25), (0.35371601815976406, 9, 50), (0.3324036661081422, 9, 90)], [(0.41121326922683865, 0, 5), (0.41629358541219397, 0, 10), (0.4080253574715743, 0, 25), (0.41615776019585254, 0, 50), (0.4124911892865882, 0, 90), (0.4059030655109156, 1, 5), (0.41550128483748566, 1, 10), (0.4091533096391006, 1, 25), (0.4063059033723392, 1, 50), (0.4146712058952662, 1, 90), (0.3948890892328874, 2, 5), (0.40616204500460096, 2, 10), (0.4064441486556245, 2, 25), (0.40539369116523705, 2, 50), (0.40550581185642376, 2, 90), (0.38669579438803936, 3, 5), (0.3911369030523805, 3, 10), (0.39691357711855607, 3, 25), (0.39002021744208537, 3, 50), (0.3932120635451256, 3, 90), (0.3802781986199711, 4, 5), (0.3877458204841598, 4, 10), (0.3922506156200193, 4, 25), (0.38531209869050254, 4, 50), (0.39030737458271547, 4, 90), (0.4112526904832394, 5, 5), (0.39790656893675613, 5, 10), (0.4063378338832679, 5, 25), (0.39154589101204945, 5, 50), (0.384881460706296, 5, 90), (0.38426369917089975, 6, 5), (0.381789825001693, 6, 10), (0.3901598436875141, 6, 25), (0.3686387634764362, 6, 50), (0.3707136308034388, 6, 90), (0.3725301795387268, 7, 5), (0.3671290995481827, 7, 10), (0.34740931896316196, 7, 25), (0.3703180841374357, 7, 50), (0.34533243258068635, 7, 90), (0.36791906933849944, 8, 5), (0.3386239769609562, 8, 10), (0.3463616724014912, 8, 25), (0.3468708879200587, 8, 50), (0.34559699365342994, 8, 90), (0.3657319750902574, 9, 5), (0.34559286619325075, 9, 10), (0.34755233834816796, 9, 25), (0.3471627444764937, 9, 50), (0.3441791981393916, 9, 90)], [(0.4140052419041886, 0, 5), (0.4121581226123169, 0, 10), (0.4107664905034652, 0, 25), (0.40640966931063094, 0, 50), (0.4099946374897826, 0, 90), (0.39965885028803577, 1, 5), (0.4035885792201583, 1, 10), (0.3970546928391135, 1, 25), (0.39417988931871384, 1, 50), (0.40100767804304444, 1, 90), (0.39179954765844105, 2, 5), (0.38805617164037653, 2, 10), (0.3847219491491586, 2, 25), (0.3940033573031172, 2, 50), (0.39507782595195273, 2, 90), (0.3879999436925691, 3, 5), (0.3802912661712574, 3, 10), (0.3828897820912041, 3, 25), (0.38132196024186815, 3, 50), (0.38188439253154155, 3, 90), (0.3811334230767334, 4, 5), (0.3773645301657935, 4, 10), (0.3774750787280483, 4, 25), (0.37796108905392406, 4, 50), (0.3778316239906025, 4, 90), (0.40103486458568505, 5, 5), (0.3951915648348099, 5, 10), (0.3972130431319027, 5, 25), (0.37764262505086793, 5, 50), (0.37270840279748135, 5, 90), (0.3673608712711848, 6, 5), (0.38895811534917873, 6, 10), (0.36737674010656834, 6, 25), (0.3639528353077486, 6, 50), (0.36180162799455196, 6, 90), (0.33683992406706204, 7, 5), (0.3563436704725195, 7, 10), (0.3422176739035851, 7, 25), (0.3461149809476738, 7, 50), (0.3327931010101147, 7, 90), (0.34038113958660954, 8, 5), (0.33359137464223576, 8, 10), (0.34309723873115516, 8, 25), (0.34579311078153924, 8, 50), (0.3425988761928933, 8, 90), (0.33242519889505645, 9, 5), (0.33170960226713464, 9, 10), (0.3359991286014549, 9, 25), (0.34412873138003647, 9, 50), (0.3524082989932175, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # UNSUPERVISED (ONEC)
    # results = {'cgl': [[(0.3804211777512578, 0, 5), (0.3809832614088193, 0, 10), (0.38222091282759535, 0, 25), (0.37904848698887944, 0, 50), (0.3794239889771677, 0, 90), (0.36831773978362836, 1, 5), (0.36586506768082117, 1, 10), (0.3681544802740751, 1, 25), (0.3718481958814243, 1, 50), (0.3670049892754971, 1, 90), (0.36033836880514764, 2, 5), (0.36208765456228037, 2, 10), (0.3591447145005213, 2, 25), (0.3651863832300204, 2, 50), (0.3633988428827399, 2, 90), (0.3506537343160914, 3, 5), (0.3522356746578327, 3, 10), (0.34828830411132383, 3, 25), (0.35692783780755777, 3, 50), (0.3542920534588233, 3, 90), (0.34269384518313806, 4, 5), (0.34745102102480363, 4, 10), (0.34196519472694686, 4, 25), (0.34763571475765354, 4, 50), (0.34725733176391776, 4, 90), (0.36129109748806915, 5, 5), (0.3708629734115532, 5, 10), (0.3675583389339376, 5, 25), (0.35499593558652326, 5, 50), (0.3572031726090279, 5, 90), (0.35548094646459116, 6, 5), (0.36041897290026376, 6, 10), (0.3556429156697163, 6, 25), (0.33019329107907974, 6, 50), (0.31530026573411496, 6, 90), (0.30678235442139, 7, 5), (0.3169464605808715, 7, 10), (0.32646386880349854, 7, 25), (0.3238984597586405, 7, 50), (0.3057407293821037, 7, 90), (0.3183559429928945, 8, 5), (0.3094451305790187, 8, 10), (0.30507826834788304, 8, 25), (0.31428086380485704, 8, 50), (0.2932660419436293, 8, 90), (0.320581637341337, 9, 5), (0.32591468137081786, 9, 10), (0.3068941628873757, 9, 25), (0.32336060996454585, 9, 50), (0.28945764263444274, 9, 90)], [(0.3859817911166326, 0, 5), (0.3799201820526341, 0, 10), (0.38083440560766946, 0, 25), (0.37748356698622876, 0, 50), (0.38161433047893095, 0, 90), (0.37285372632984, 1, 5), (0.3701301511909626, 1, 10), (0.36879315413088126, 1, 25), (0.36968407797331737, 1, 50), (0.36826630546546557, 1, 90), (0.36336972135813234, 2, 5), (0.3636597274406894, 2, 10), (0.36287914696927603, 2, 25), (0.36019232817438, 2, 50), (0.3586884393403606, 2, 90), (0.3565207805611774, 3, 5), (0.35674680930283387, 3, 10), (0.3511967423710574, 3, 25), (0.34615178331015095, 3, 50), (0.3506986589356748, 3, 90), (0.349921013502546, 4, 5), (0.35150110154398995, 4, 10), (0.3414876350337971, 4, 25), (0.34111410639801115, 4, 50), (0.3461012344978562, 4, 90), (0.3640131498828832, 5, 5), (0.3768095912347764, 5, 10), (0.35821692445348335, 5, 25), (0.36009348311375816, 5, 50), (0.36849660890552777, 5, 90), (0.365594433719168, 6, 5), (0.3526733809069021, 6, 10), (0.35137831134614467, 6, 25), (0.34898728728712386, 6, 50), (0.3503534977590903, 6, 90), (0.35095348651818686, 7, 5), (0.350558431890638, 7, 10), (0.35756662524992966, 7, 25), (0.33165097834313606, 7, 50), (0.3290426965459285, 7, 90), (0.30751968664771395, 8, 5), (0.33205064675567564, 8, 10), (0.32785140362424836, 8, 25), (0.31949743332220126, 8, 50), (0.3414366440338714, 8, 90), (0.3282486168860169, 9, 5), (0.3299239865305869, 9, 10), (0.3261565787479909, 9, 25), (0.31763016901049324, 9, 50), (0.34484228996166294, 9, 90)], [(0.39768296644926726, 0, 5), (0.38525392148423737, 0, 10), (0.3849469943835075, 0, 25), (0.38207034555617864, 0, 50), (0.37819448640326125, 0, 90), (0.3947060960478313, 1, 5), (0.38293527919094156, 1, 10), (0.36938488828600946, 1, 25), (0.37200682741151553, 1, 50), (0.3645011915590957, 1, 90), (0.3820151225689187, 2, 5), (0.37183479763886623, 2, 10), (0.3664428423891532, 2, 25), (0.3607709706083549, 2, 50), (0.35906664519625114, 2, 90), (0.3642205423524975, 3, 5), (0.3592783178098167, 3, 10), (0.35555187416484435, 3, 25), (0.3508043225278215, 3, 50), (0.35320324679334314, 3, 90), (0.3597856327471204, 4, 5), (0.35675456206336087, 4, 10), (0.3494161763574812, 4, 25), (0.34375719257840703, 4, 50), (0.3487430891312939, 4, 90), (0.37848317987540786, 5, 5), (0.356199906483787, 5, 10), (0.36859178132293124, 5, 25), (0.3602297802928768, 5, 50), (0.3421588838555379, 5, 90), (0.32988715226197984, 6, 5), (0.33409507620482026, 6, 10), (0.3277799253040105, 6, 25), (0.3284115143586288, 6, 50), (0.3342428331496404, 6, 90), (0.31938867191434495, 7, 5), (0.31908865689939314, 7, 10), (0.30099405633578763, 7, 25), (0.3017114560283231, 7, 50), (0.3061018868891668, 7, 90), (0.3181977736534347, 8, 5), (0.33739198193764525, 8, 10), (0.31665591367853213, 8, 25), (0.29783812195134945, 8, 50), (0.30907204301595353, 8, 90), (0.3166556666260974, 9, 5), (0.32799066609765737, 9, 10), (0.31058943832723024, 9, 25), (0.30284547575504006, 9, 50), (0.31660819861714373, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # cgl_r = np.hstack(results['cgl'])
    # max_cgl = np.argmax(cgl_r[:,[0,3,6]].mean(axis=1))
    # print(cgl_r[max_cgl])
    # best_cgl = cgl_r[max_cgl][[1,2]]

    # SUPERVISED
    # results = {'cgl': [], 'fgl': [[(0.44018287683414437, 0, 5), (0.4374704863828879, 0, 10), (0.4329581080072101, 0, 25), (0.4300000662527114, 0, 50), (0.4339915145072298, 0, 90), (0.4337458435309339, 1, 5), (0.42888878239427825, 1, 10), (0.4264211863868156, 1, 25), (0.424618259580433, 1, 50), (0.4337302931132867, 1, 90), (0.42321662368432755, 2, 5), (0.42334321745355225, 2, 10), (0.41598785460620225, 2, 25), (0.41195960442025853, 2, 50), (0.41752435409352645, 2, 90), (0.408471598702253, 3, 5), (0.41611847794978946, 3, 10), (0.40750872985138703, 3, 25), (0.39794534811210397, 3, 50), (0.40226274909969467, 3, 90), (0.39847952783303603, 4, 5), (0.4050468345156869, 4, 10), (0.3948845383774175, 4, 25), (0.3859575425389037, 4, 50), (0.3905588546877185, 4, 90), (0.42307068921425167, 5, 5), (0.4195107046046909, 5, 10), (0.41714786320366964, 5, 25), (0.41624116693418206, 5, 50), (0.4169776813650202, 5, 90), (0.425723122742877, 6, 5), (0.4221722346669565, 6, 10), (0.42184380303793984, 6, 25), (0.40719848549915344, 6, 50), (0.4107287878541265, 6, 90), (0.42347317360426495, 7, 5), (0.41166173141612133, 7, 10), (0.40544823305371963, 7, 25), (0.4071200635848804, 7, 50), (0.4076235872923531, 7, 90), (0.4057859311268913, 8, 5), (0.40891741237695955, 8, 10), (0.4010853291668894, 8, 25), (0.40712013291202964, 8, 50), (0.4049433798024638, 8, 90), (0.4136660569296781, 9, 5), (0.403678611736522, 9, 10), (0.3947961835628832, 9, 25), (0.4053323457182333, 9, 50), (0.40434484256287095, 9, 90)], [(0.4399850843536158, 0, 5), (0.4352550838926977, 0, 10), (0.4320715279451688, 0, 25), (0.4237364563145757, 0, 50), (0.4229868938170582, 0, 90), (0.4349863814421545, 1, 5), (0.4301498852436695, 1, 10), (0.424837246440088, 1, 25), (0.41547616594063236, 1, 50), (0.41938745760296925, 1, 90), (0.4204640289837625, 2, 5), (0.4225216042613754, 2, 10), (0.41343178913964423, 2, 25), (0.39539186634720985, 2, 50), (0.4025083214919781, 2, 90), (0.4091798984199242, 3, 5), (0.4113104845112113, 3, 10), (0.4026008311834082, 3, 25), (0.38174918537139974, 3, 50), (0.39029563053908156, 3, 90), (0.39791090786256766, 4, 5), (0.3928487390654487, 4, 10), (0.39146999977749314, 4, 25), (0.37387289187504574, 4, 50), (0.38501357686099574, 4, 90), (0.42339687815537663, 5, 5), (0.42426378929620695, 5, 10), (0.43315691710863136, 5, 25), (0.4123643946929854, 5, 50), (0.40875397333024616, 5, 90), (0.4201121935807676, 6, 5), (0.4289600021124884, 6, 10), (0.41633808100138614, 6, 25), (0.4047288342806114, 6, 50), (0.4090304052088028, 6, 90), (0.41934345076302987, 7, 5), (0.4126467234165702, 7, 10), (0.41247415164334517, 7, 25), (0.39279534172840697, 7, 50), (0.39276753117118474, 7, 90), (0.410635748949425, 8, 5), (0.39151054129098006, 8, 10), (0.40710427145825695, 8, 25), (0.3940321333000986, 8, 50), (0.39823362633949283, 8, 90), (0.4108599763235845, 9, 5), (0.3899388535537887, 9, 10), (0.40605878110762494, 9, 25), (0.39438618017662747, 9, 50), (0.39807305686367966, 9, 90)], [(0.4402475621774054, 0, 5), (0.4330453091952697, 0, 10), (0.4391608874563181, 0, 25), (0.4248422182781126, 0, 50), (0.4289093988672736, 0, 90), (0.4444450351694549, 1, 5), (0.42991107302401377, 1, 10), (0.43290936818375486, 1, 25), (0.4199051348221317, 1, 50), (0.42963307068286116, 1, 90), (0.4365133956158961, 2, 5), (0.43334219934103535, 2, 10), (0.43542521786194005, 2, 25), (0.4139776172963612, 2, 50), (0.416871027737984, 2, 90), (0.416380296320427, 3, 5), (0.41741259303656897, 3, 10), (0.4249904685935248, 3, 25), (0.3960805313867102, 3, 50), (0.4038090304192427, 3, 90), (0.4011009225295238, 4, 5), (0.41059701241022034, 4, 10), (0.40920555291087857, 4, 25), (0.38602278769468334, 4, 50), (0.39190813718164985, 4, 90), (0.4237175296230875, 5, 5), (0.4426037029367199, 5, 10), (0.4221092926910767, 5, 25), (0.4061322366870223, 5, 50), (0.4190775537988329, 5, 90), (0.42033464236441104, 6, 5), (0.431796319212524, 6, 10), (0.41974254088681684, 6, 25), (0.4026924302664537, 6, 50), (0.4174429066002549, 6, 90), (0.4146101657054444, 7, 5), (0.4262720243680534, 7, 10), (0.4133108436045176, 7, 25), (0.3967877343319732, 7, 50), (0.40721401103910215, 7, 90), (0.4038839517135078, 8, 5), (0.41693270113711167, 8, 10), (0.4079112626562324, 8, 25), (0.3922226471543043, 8, 50), (0.4032810507698635, 8, 90), (0.4055171736573638, 9, 5), (0.4159159966321856, 9, 10), (0.4039033248494488, 9, 25), (0.3918124435294805, 9, 50), (0.4037375097369582, 9, 90)]], 'cgr': [], 'fgr': []}
    # UNSUPERVISED
    # results = {'cgl': [], 'fgl': [[(0.415803272970497, 0, 5), (0.40802527010745177, 0, 10), (0.3937731632369722, 0, 25), (0.39665038497879596, 0, 50), (0.3932270650396818, 0, 90), (0.4053612878941299, 1, 5), (0.40114081163145165, 1, 10), (0.3926375288995982, 1, 25), (0.38562078632915947, 1, 50), (0.3888129032707594, 1, 90), (0.3924275798585352, 2, 5), (0.3922567781527804, 2, 10), (0.3879635796081622, 2, 25), (0.37762013302663244, 2, 50), (0.3803100248682387, 2, 90), (0.38301057596140214, 3, 5), (0.3852344921915184, 3, 10), (0.3676987740322083, 3, 25), (0.3601102252442845, 3, 50), (0.3741137505305689, 3, 90), (0.3730750255148819, 4, 5), (0.37531174660353817, 4, 10), (0.3531993396774852, 4, 25), (0.3549691542261483, 4, 50), (0.3618568748606364, 4, 90), (0.39822438204613914, 5, 5), (0.40888434921454075, 5, 10), (0.3832557235673628, 5, 25), (0.39028804577979537, 5, 50), (0.38653427584941447, 5, 90), (0.4026916262486822, 6, 5), (0.38756830348554144, 6, 10), (0.37915492935855577, 6, 25), (0.3885764828216486, 6, 50), (0.3739924329583462, 6, 90), (0.3896940231607346, 7, 5), (0.38563422101475436, 7, 10), (0.37329082633690147, 7, 25), (0.3788692310135714, 7, 50), (0.3675222754292613, 7, 90), (0.38808386750514007, 8, 5), (0.3795226950539602, 8, 10), (0.3668276312335112, 8, 25), (0.3800696759224338, 8, 50), (0.36062361116308267, 8, 90), (0.38207619704695817, 9, 5), (0.3781378581583559, 9, 10), (0.3684585584667498, 9, 25), (0.382239202952604, 9, 50), (0.3603754543712701, 9, 90)], [(0.4204734480862849, 0, 5), (0.42202834734300687, 0, 10), (0.4104577890349908, 0, 25), (0.4015957542585421, 0, 50), (0.39136212461687, 0, 90), (0.41487214889044244, 1, 5), (0.4130317517936334, 1, 10), (0.39772229300752016, 1, 25), (0.3979107539613404, 1, 50), (0.39347639712052024, 1, 90), (0.40387798549909726, 2, 5), (0.40551666720039353, 2, 10), (0.3888299806122486, 2, 25), (0.3833138543584828, 2, 50), (0.38854692009898334, 2, 90), (0.39676890520605684, 3, 5), (0.40032315845093536, 3, 10), (0.3716427375360405, 3, 25), (0.36821062254119175, 3, 50), (0.37463174506729174, 3, 90), (0.39556599252397107, 4, 5), (0.39115191898694474, 4, 10), (0.36717356213231855, 4, 25), (0.36033146387166126, 4, 50), (0.36392749960834725, 4, 90), (0.4181817671746023, 5, 5), (0.42450371020603844, 5, 10), (0.4031630712439084, 5, 25), (0.3941120089835419, 5, 50), (0.37937108280843856, 5, 90), (0.4069312416805575, 6, 5), (0.41234120327630347, 6, 10), (0.39053296113100533, 6, 25), (0.3953289382416856, 6, 50), (0.3708960397443583, 6, 90), (0.398026138484828, 7, 5), (0.4120633675179572, 7, 10), (0.3933378988362744, 7, 25), (0.3844603760792586, 7, 50), (0.3721657464101367, 7, 90), (0.3926238503602263, 8, 5), (0.39628700063450195, 8, 10), (0.3871910357663872, 8, 25), (0.3833779984994899, 8, 50), (0.3663700343722775, 8, 90), (0.3916932812221703, 9, 5), (0.3959232945449926, 9, 10), (0.3880058468351905, 9, 25), (0.38169485464119085, 9, 50), (0.36701546137829794, 9, 90)], [(0.42453935078556626, 0, 5), (0.42090895550949015, 0, 10), (0.41648362492184005, 0, 25), (0.40147159455249937, 0, 50), (0.4002287009127716, 0, 90), (0.4207820591098823, 1, 5), (0.41466811334226705, 1, 10), (0.4008129430709465, 1, 25), (0.40214667959609246, 1, 50), (0.39801717623788696, 1, 90), (0.4101240588877736, 2, 5), (0.39992824784443687, 2, 10), (0.39882285451634436, 2, 25), (0.38974506593680985, 2, 50), (0.3928849393031416, 2, 90), (0.3928839796052144, 3, 5), (0.38813496381817114, 3, 10), (0.39263662595406285, 3, 25), (0.3735698741129318, 3, 50), (0.3768530520243214, 3, 90), (0.38153689262491436, 4, 5), (0.3790774698759725, 4, 10), (0.3860816985499904, 4, 25), (0.3622450792276566, 4, 50), (0.36033850424556324, 4, 90), (0.4071262114402906, 5, 5), (0.4001028001718561, 5, 10), (0.3970396150508317, 5, 25), (0.3867502932475946, 5, 50), (0.39113864121341585, 5, 90), (0.39187044368623863, 6, 5), (0.3997759663623916, 6, 10), (0.3861014260563736, 6, 25), (0.3735573604798093, 6, 50), (0.38554249553069986, 6, 90), (0.3981294097751596, 7, 5), (0.3780519395887838, 7, 10), (0.3733285657974545, 7, 25), (0.3733504104415273, 7, 50), (0.36470828295944224, 7, 90), (0.3779995836195638, 8, 5), (0.37720336162585577, 8, 10), (0.3751738182778737, 8, 25), (0.36878150712162633, 8, 50), (0.36690046495933737, 8, 90), (0.37955388464421724, 9, 5), (0.38003041124075443, 9, 10), (0.37452417712028635, 9, 25), (0.3682548492613898, 9, 50), (0.36643038512132275, 9, 90)]], 'cgr': [], 'fgr': []}  
    # SUPERVISED (ONEC)
    # results = {'cgl': [], 'fgl': [[(0.45689419987996815, 0, 5), (0.45271833910014486, 0, 10), (0.44929135591157976, 0, 25), (0.4525874834589455, 0, 50), (0.4444290146113949, 0, 90), (0.45333002344366874, 1, 5), (0.45067769669186397, 1, 10), (0.44972853578950617, 1, 25), (0.44263037897399876, 1, 50), (0.44035625851542454, 1, 90), (0.4471857590813063, 2, 5), (0.4490827721397324, 2, 10), (0.4406455022752299, 2, 25), (0.44334696124943723, 2, 50), (0.43633752229048595, 2, 90), (0.43851387785601353, 3, 5), (0.43273089599619025, 3, 10), (0.4253650532758507, 3, 25), (0.4223555418665262, 3, 50), (0.41550146425690515, 3, 90), (0.4267379125264683, 4, 5), (0.422435137659729, 4, 10), (0.4165044844349868, 4, 25), (0.4138692607476393, 4, 50), (0.40391342631726407, 4, 90), (0.4370213671538628, 5, 5), (0.4346294613472818, 5, 10), (0.44279078037530223, 5, 25), (0.4461845137977241, 5, 50), (0.44840083599343433, 5, 90), (0.44164038142891504, 6, 5), (0.43611752946128673, 6, 10), (0.4366922195410331, 6, 25), (0.43807640462658354, 6, 50), (0.4514696809998534, 6, 90), (0.43302326323743184, 7, 5), (0.4266132459218003, 7, 10), (0.4283188200159315, 7, 25), (0.42569277660672583, 7, 50), (0.42909560735167296, 7, 90), (0.42163194048013647, 8, 5), (0.42806959798338395, 8, 10), (0.4325680418352051, 8, 25), (0.42400083057809035, 8, 50), (0.43830571022366993, 8, 90), (0.42020724468428994, 9, 5), (0.4280651330370576, 9, 10), (0.4323437142285237, 9, 25), (0.42455006850078864, 9, 50), (0.43665527895753714, 9, 90)], [(0.44519669674525175, 0, 5), (0.44463612075218434, 0, 10), (0.4448294081455293, 0, 25), (0.4525398246397296, 0, 50), (0.4493246088469898, 0, 90), (0.44622788053498774, 1, 5), (0.4398471849401558, 1, 10), (0.4404435762160149, 1, 25), (0.4432146203165621, 1, 50), (0.43307848009158356, 1, 90), (0.43032186297785185, 2, 5), (0.4283131356152374, 2, 10), (0.4312815534593248, 2, 25), (0.43405702939496055, 2, 50), (0.42885387343892767, 2, 90), (0.41254850357806117, 3, 5), (0.4130185673661959, 3, 10), (0.424845368307914, 3, 25), (0.4272646766693736, 3, 50), (0.4202146863941782, 3, 90), (0.40048312443425915, 4, 5), (0.4045231255362449, 4, 10), (0.40769261670723905, 4, 25), (0.4167188209141746, 4, 50), (0.4129510321728726, 4, 90), (0.43036598498903134, 5, 5), (0.42777295007055854, 5, 10), (0.44076649916154076, 5, 25), (0.4338690953734571, 5, 50), (0.42990195146755517, 5, 90), (0.41937513762436596, 6, 5), (0.42049301347080315, 6, 10), (0.4245071257563986, 6, 25), (0.4227045876659852, 6, 50), (0.4273710267514197, 6, 90), (0.41528161772015004, 7, 5), (0.422146727444435, 7, 10), (0.4147889900522777, 7, 25), (0.414870726352286, 7, 50), (0.41958287229258867, 7, 90), (0.40779484836154484, 8, 5), (0.4173675764021289, 8, 10), (0.4102549167864574, 8, 25), (0.4148814279893902, 8, 50), (0.41576228100775725, 8, 90), (0.4106234169996122, 9, 5), (0.4190304430689743, 9, 10), (0.41475287300243285, 9, 25), (0.4150560442469224, 9, 50), (0.409775811504066, 9, 90)], [(0.4548844375171391, 0, 5), (0.4506668669521644, 0, 10), (0.4427311043860641, 0, 25), (0.44302807829995733, 0, 50), (0.44339564985952484, 0, 90), (0.45040626648460064, 1, 5), (0.44816800721232714, 1, 10), (0.4399161983914528, 1, 25), (0.4390500585070886, 1, 50), (0.4362503750957381, 1, 90), (0.440832276512687, 2, 5), (0.44245032156444913, 2, 10), (0.43212456061066246, 2, 25), (0.4295038591253563, 2, 50), (0.42923077575621643, 2, 90), (0.4291713040885604, 3, 5), (0.42460709674470976, 3, 10), (0.422409259119867, 3, 25), (0.42459359033240673, 3, 50), (0.4185076364569213, 3, 90), (0.41805702667302463, 4, 5), (0.4191875322162662, 4, 10), (0.4137510583967236, 4, 25), (0.4169196749677067, 4, 50), (0.40974708162760454, 4, 90), (0.435195083203873, 5, 5), (0.44168371573041826, 5, 10), (0.4274169143077514, 5, 25), (0.42903277018399527, 5, 50), (0.432216001876444, 5, 90), (0.43219628226734896, 6, 5), (0.43886714953750466, 6, 10), (0.4208638415082056, 6, 25), (0.42868826418534917, 6, 50), (0.41736917337435486, 6, 90), (0.431919737125296, 7, 5), (0.4274266613850081, 7, 10), (0.4225774850827545, 7, 25), (0.4172741186012458, 7, 50), (0.4021377238167792, 7, 90), (0.4102275733383855, 8, 5), (0.4232694526455597, 8, 10), (0.4015362904884638, 8, 25), (0.418174300658987, 8, 50), (0.4111779492670616, 8, 90), (0.40996840211962093, 9, 5), (0.41988905871661714, 9, 10), (0.40282652762541993, 9, 25), (0.4157605395187284, 9, 50), (0.41309846277825174, 9, 90)]], 'cgr': [], 'fgr': []}
    # UNSUPERVISED (ONEC)
    # results = {'cgl': [], 'fgl': [[(0.4203790193737914, 0, 5), (0.41332980689968063, 0, 10), (0.40864799154605935, 0, 25), (0.40727316739257247, 0, 50), (0.40879854292914913, 0, 90), (0.41556184065924784, 1, 5), (0.40967055561989646, 1, 10), (0.40083689188096433, 1, 25), (0.3983785622523501, 1, 50), (0.40066833736104734, 1, 90), (0.4034402293348498, 2, 5), (0.39661436933506544, 2, 10), (0.3956430879884581, 2, 25), (0.3828336147828242, 2, 50), (0.39375966188970324, 2, 90), (0.38586666949624265, 3, 5), (0.38840392542761865, 3, 10), (0.3768768319627495, 3, 25), (0.3747445101166742, 3, 50), (0.37473624120201704, 3, 90), (0.3736772175888781, 4, 5), (0.3746830126647666, 4, 10), (0.36798800691670763, 4, 25), (0.36334038813913133, 4, 50), (0.36591626427453905, 4, 90), (0.40948467480147205, 5, 5), (0.4061159209850483, 5, 10), (0.4061288121318388, 5, 25), (0.40381187867856255, 5, 50), (0.40203104571017667, 5, 90), (0.40738206038413954, 6, 5), (0.40281772972645685, 6, 10), (0.40666384667748257, 6, 25), (0.39549061439327904, 6, 50), (0.39019158600023235, 6, 90), (0.3865476433425056, 7, 5), (0.393597191600471, 7, 10), (0.38464371297966476, 7, 25), (0.3757774203787766, 7, 50), (0.3814852741608718, 7, 90), (0.37688056371667356, 8, 5), (0.381390347690292, 8, 10), (0.37076252125729336, 8, 25), (0.3846471220788397, 8, 50), (0.37537878573125033, 8, 90), (0.3783774803666154, 9, 5), (0.3794893939226678, 9, 10), (0.36987598534450766, 9, 25), (0.3810732656730691, 9, 50), (0.3776195477906518, 9, 90)], [(0.4295989302408749, 0, 5), (0.429377592758768, 0, 10), (0.4191771702536306, 0, 25), (0.42288081774181635, 0, 50), (0.42501667743209404, 0, 90), (0.43336904441663393, 1, 5), (0.42859035692774544, 1, 10), (0.41896969516321586, 1, 25), (0.42031759058847035, 1, 50), (0.4185295475668062, 1, 90), (0.42697750378796884, 2, 5), (0.4193376978214011, 2, 10), (0.41009153373519647, 2, 25), (0.4205574885215306, 2, 50), (0.4092819960920996, 2, 90), (0.4069252538268833, 3, 5), (0.41035380613917133, 3, 10), (0.3967747000468083, 3, 25), (0.402098446147874, 3, 50), (0.39267977469070564, 3, 90), (0.3980958327274587, 4, 5), (0.3998337721629242, 4, 10), (0.389322220474417, 4, 25), (0.3905230021319206, 4, 50), (0.38296566062778037, 4, 90), (0.42539127682155004, 5, 5), (0.42406513590229694, 5, 10), (0.4184270902597686, 5, 25), (0.40362892101448183, 5, 50), (0.4032983878836118, 5, 90), (0.42008428705321, 6, 5), (0.41879503652853306, 6, 10), (0.4040558442735099, 6, 25), (0.4019048082478821, 6, 50), (0.39460504762117476, 6, 90), (0.39872024341878104, 7, 5), (0.4063856403064103, 7, 10), (0.39520817117682344, 7, 25), (0.39350844839139004, 7, 50), (0.3834767423294181, 7, 90), (0.39582180549519397, 8, 5), (0.3913246556332456, 8, 10), (0.384015144892207, 8, 25), (0.3820811807980781, 8, 50), (0.3738391988123596, 8, 90), (0.39245779220650606, 9, 5), (0.39048411422696017, 9, 10), (0.39124982891716453, 9, 25), (0.38637273068367894, 9, 50), (0.3739672714716746, 9, 90)], [(0.43933807631410743, 0, 5), (0.4416506150246554, 0, 10), (0.43371066108757406, 0, 25), (0.4289614456532909, 0, 50), (0.4270837873034363, 0, 90), (0.43074003578248093, 1, 5), (0.4324785713659465, 1, 10), (0.42708745316119184, 1, 25), (0.42520173849013315, 1, 50), (0.42276614522414696, 1, 90), (0.4178297714382116, 2, 5), (0.4203681548633941, 2, 10), (0.419993801084814, 2, 25), (0.41810100167435355, 2, 50), (0.41795857989484325, 2, 90), (0.3986065398241325, 3, 5), (0.3981002892603623, 3, 10), (0.4013682519812528, 3, 25), (0.4068332698619051, 3, 50), (0.39837535987954875, 3, 90), (0.39362455322274814, 4, 5), (0.388829468334974, 4, 10), (0.3848273248344989, 4, 25), (0.39125244201938, 4, 50), (0.39039132500309875, 4, 90), (0.4136242171320769, 5, 5), (0.4177221441371414, 5, 10), (0.4245285512064237, 5, 25), (0.4225900329657746, 5, 50), (0.417631164268988, 5, 90), (0.4089177437116199, 6, 5), (0.4133986177166166, 6, 10), (0.4136035523661689, 6, 25), (0.4018398163861882, 6, 50), (0.4129390740373344, 6, 90), (0.4026395947915446, 7, 5), (0.4006306840957068, 7, 10), (0.3862287659419338, 7, 25), (0.38173532718767705, 7, 50), (0.3866130662122937, 7, 90), (0.3838421302698505, 8, 5), (0.3893139555541215, 8, 10), (0.4011441204692097, 8, 25), (0.38351651223484173, 8, 50), (0.38721825700132684, 8, 90), (0.38680683875147287, 9, 5), (0.390254700674457, 9, 10), (0.39867707394673974, 9, 25), (0.37819614430467796, 9, 50), (0.3877528271541716, 9, 90)]], 'cgr': [], 'fgr': []}
    # fgl_r = np.hstack(results['fgl'])
    # max_fgl = np.argmax(fgl_r[:,[0,3,6]].mean(axis=1))
    # print(fgl_r[max_fgl])
    # best_fgl = fgl_r[max_fgl][[1,2]]
    
    # SUPERVISED
    # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.6335305735476063, 0, 5), (0.6336038795474582, 0, 10), (0.6237053159635588, 0, 25), (0.6352967277769281, 0, 50), (0.6417171357068032, 0, 90), (0.632294063499953, 1, 5), (0.6323210057292162, 1, 10), (0.6275361812150975, 1, 25), (0.6321716034558073, 1, 50), (0.6352738163131864, 1, 90), (0.6382340547624781, 2, 5), (0.6270063724679632, 2, 10), (0.6236490339544416, 2, 25), (0.6355786764331393, 2, 50), (0.6390019712961584, 2, 90), (0.6403475641896689, 3, 5), (0.6243981436482632, 3, 10), (0.6211828278632061, 3, 25), (0.6300723404790883, 3, 50), (0.6276237262416519, 3, 90), (0.6398016270158073, 4, 5), (0.6177630657878398, 4, 10), (0.6176662897754066, 4, 25), (0.6293614917198811, 4, 50), (0.6239239011608432, 4, 90), (0.5875080908010264, 5, 5), (0.575629047411968, 5, 10), (0.6165160030551806, 5, 25), (0.608623933050234, 5, 50), (0.6054297781752622, 5, 90), (0.5051669911937806, 6, 5), (0.5255872468038585, 6, 10), (0.5413174883574129, 6, 25), (0.5502346194076955, 6, 50), (0.5964539991833298, 6, 90), (0.4745673691685388, 7, 5), (0.46748544854318, 7, 10), (0.5057169066464002, 7, 25), (0.5015863445446319, 7, 50), (0.5261085045387469, 7, 90), (0.45185852774690377, 8, 5), (0.47057242618578854, 8, 10), (0.48867076065206877, 8, 25), (0.49563394686038387, 8, 50), (0.5008150467214277, 8, 90), (0.44701431828150817, 9, 5), (0.46100029599881237, 9, 10), (0.4766858837503574, 9, 25), (0.4906235687817101, 9, 50), (0.5020165038065759, 9, 90)], [(0.6301366740328136, 0, 5), (0.6279020381551123, 0, 10), (0.6256552339014557, 0, 25), (0.611828932392197, 0, 50), (0.6203673246817254, 0, 90), (0.6304018758499298, 1, 5), (0.6226643801684654, 1, 10), (0.6221169450322639, 1, 25), (0.6167527747758982, 1, 50), (0.6236141006611674, 1, 90), (0.6236796665531976, 2, 5), (0.6194227238251587, 2, 10), (0.6156667325849168, 2, 25), (0.6158867424930786, 2, 50), (0.6225866711759408, 2, 90), (0.6238283923974031, 3, 5), (0.6120381792898106, 3, 10), (0.6117034134151088, 3, 25), (0.6167875753430411, 3, 50), (0.6201789393843319, 3, 90), (0.6199835499664827, 4, 5), (0.6151661357582845, 4, 10), (0.6074808494988004, 4, 25), (0.6208378321447652, 4, 50), (0.6199503040974368, 4, 90), (0.566142855777455, 5, 5), (0.591130669441746, 5, 10), (0.609195034298824, 5, 25), (0.6087213750494739, 5, 50), (0.598364727446016, 5, 90), (0.5096338999632193, 6, 5), (0.5380318999529439, 6, 10), (0.5200013123303918, 6, 25), (0.5528473989662037, 6, 50), (0.5742099203580662, 6, 90), (0.47697795482076516, 7, 5), (0.4911425815167493, 7, 10), (0.49718613756682645, 7, 25), (0.49484219384234374, 7, 50), (0.5077813498827728, 7, 90), (0.47428268395122974, 8, 5), (0.4292362319964243, 8, 10), (0.4853727004875425, 8, 25), (0.4979996152745482, 8, 50), (0.4989477135807658, 8, 90), (0.48075026124844994, 9, 5), (0.44910370407014477, 9, 10), (0.47883357887480055, 9, 25), (0.5092458945719472, 9, 50), (0.509492676742255, 9, 90)], [(0.6248042308276723, 0, 5), (0.6232985111851588, 0, 10), (0.6267120813035677, 0, 25), (0.620446458478406, 0, 50), (0.6255275219682901, 0, 90), (0.6239493284556609, 1, 5), (0.6170441597125598, 1, 10), (0.6276261605723862, 1, 25), (0.6171435948659454, 1, 50), (0.6264357007556924, 1, 90), (0.6212157159780707, 2, 5), (0.6161068521732505, 2, 10), (0.622300875019216, 2, 25), (0.614971319319924, 2, 50), (0.6235218503714338, 2, 90), (0.6170035847217639, 3, 5), (0.6134130479221432, 3, 10), (0.6196153545433931, 3, 25), (0.6086451676086644, 3, 50), (0.6236023418355944, 3, 90), (0.6156031138595426, 4, 5), (0.612899559996649, 4, 10), (0.6207341780279997, 4, 25), (0.6122868899341332, 4, 50), (0.6200942962034125, 4, 90), (0.5563309624302838, 5, 5), (0.5697269699317902, 5, 10), (0.5918359829887057, 5, 25), (0.6254975588108049, 5, 50), (0.6210704865600115, 5, 90), (0.5231369966451206, 6, 5), (0.5318687582579041, 6, 10), (0.557103567117944, 6, 25), (0.5879168167074934, 6, 50), (0.5779733014067067, 6, 90), (0.47563343677003506, 7, 5), (0.48181000689401277, 7, 10), (0.5156862585001541, 7, 25), (0.5069699766369133, 7, 50), (0.49974965329277726, 7, 90), (0.46049671065011194, 8, 5), (0.44509458639443705, 8, 10), (0.463238173656438, 8, 25), (0.5044061842966647, 8, 50), (0.4740348559764178, 8, 90), (0.4722169168012738, 9, 5), (0.4494684689917981, 9, 10), (0.46267597027200447, 9, 25), (0.5057948042465382, 9, 50), (0.505388994304544, 9, 90)]], 'fgr': []}
    # # UNSUPERVISED
    # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.5982087609628108, 0, 5), (0.5978653120662508, 0, 10), (0.6035011630537971, 0, 25), (0.6010115648092957, 0, 50), (0.6104777485275861, 0, 90), (0.5951350579768203, 1, 5), (0.5938677256144633, 1, 10), (0.5973541699787354, 1, 25), (0.5960759160724335, 1, 50), (0.6071248337541574, 1, 90), (0.5903336476105263, 2, 5), (0.5934904727623621, 2, 10), (0.5955252763491589, 2, 25), (0.5968539291958053, 2, 50), (0.6091892180581598, 2, 90), (0.5896510545625782, 3, 5), (0.5914154965287277, 3, 10), (0.5919345775625232, 3, 25), (0.5935722393239994, 3, 50), (0.6114361039133386, 3, 90), (0.5833085463885981, 4, 5), (0.5898602822645523, 4, 10), (0.5858888277902256, 4, 25), (0.5884588392810369, 4, 50), (0.6114048132650838, 4, 90), (0.5343226274063584, 5, 5), (0.5559156507969513, 5, 10), (0.5649014571017663, 5, 25), (0.5940532822060649, 5, 50), (0.5798545890877165, 5, 90), (0.497762921037043, 6, 5), (0.47830541794541276, 6, 10), (0.5119443636961171, 6, 25), (0.5004782352081942, 6, 50), (0.525676167205516, 6, 90), (0.4398452693987577, 7, 5), (0.46695788257241577, 7, 10), (0.4507212259405072, 7, 25), (0.48670354628720913, 7, 50), (0.4934674666209327, 7, 90), (0.4172596109432336, 8, 5), (0.45198069685525033, 8, 10), (0.4584487678736591, 8, 25), (0.4744082723321031, 8, 50), (0.4640387642420637, 8, 90), (0.41930433365125885, 9, 5), (0.452614359028517, 9, 10), (0.4478100979907353, 9, 25), (0.46019355293832903, 9, 50), (0.46638167307262746, 9, 90)], [(0.6138677396750671, 0, 5), (0.6042503952708843, 0, 10), (0.6050933450327515, 0, 25), (0.6020542445400484, 0, 50), (0.6141351362781852, 0, 90), (0.617531035894853, 1, 5), (0.6083754871336962, 1, 10), (0.6063069069671267, 1, 25), (0.5978120954644214, 1, 50), (0.6092107831254969, 1, 90), (0.6107913163420883, 2, 5), (0.6095945901188639, 2, 10), (0.6077761700013508, 2, 25), (0.5927304176634672, 2, 50), (0.6039129984405085, 2, 90), (0.5999491297532752, 3, 5), (0.6098824420964958, 3, 10), (0.5998485244707467, 3, 25), (0.5984036634769353, 3, 50), (0.6070453298103486, 3, 90), (0.5960939874067724, 4, 5), (0.604389297691807, 4, 10), (0.5995647058609567, 4, 25), (0.5971804489662299, 4, 50), (0.6080995800299516, 4, 90), (0.5470717450506277, 5, 5), (0.5476486704314669, 5, 10), (0.5591907812724707, 5, 25), (0.5881304241891556, 5, 50), (0.5811053421562002, 5, 90), (0.4815708526061015, 6, 5), (0.5133412945137531, 6, 10), (0.49993516847936215, 6, 25), (0.5463617035657711, 6, 50), (0.545151388417251, 6, 90), (0.4440221605935675, 7, 5), (0.451992669696246, 7, 10), (0.45844252591896323, 7, 25), (0.4576842237565175, 7, 50), (0.4882574535669322, 7, 90), (0.4518020655226081, 8, 5), (0.46298269541201614, 8, 10), (0.4583164309537097, 8, 25), (0.4862799034916102, 8, 50), (0.456568977749472, 8, 90), (0.43512440938459007, 9, 5), (0.4558113099414182, 9, 10), (0.4730238114918816, 9, 25), (0.4871297957069862, 9, 50), (0.45538427726032615, 9, 90)], [(0.6065971847519118, 0, 5), (0.5979189537784383, 0, 10), (0.5908682857024706, 0, 25), (0.5857481762788541, 0, 50), (0.6034950692314734, 0, 90), (0.6085042258976159, 1, 5), (0.595710557315949, 1, 10), (0.592010907356809, 1, 25), (0.588657606342776, 1, 50), (0.5921332087270642, 1, 90), (0.6106627297078011, 2, 5), (0.6039872767235409, 2, 10), (0.5865498351113304, 2, 25), (0.5856434096336764, 2, 50), (0.5925306348498977, 2, 90), (0.602627957076022, 3, 5), (0.6038368967736818, 3, 10), (0.5829485181073373, 3, 25), (0.5801111141683117, 3, 50), (0.5915639275017376, 3, 90), (0.604042581273862, 4, 5), (0.6028644707566512, 4, 10), (0.5810737265081867, 4, 25), (0.5816748661085351, 4, 50), (0.588575656875638, 4, 90), (0.5356507390762959, 5, 5), (0.5620577831215845, 5, 10), (0.5498342330754065, 5, 25), (0.5673902181819686, 5, 50), (0.5834953833825931, 5, 90), (0.48721104652907926, 6, 5), (0.4905616481390015, 6, 10), (0.5395943457766874, 6, 25), (0.5326684203773876, 6, 50), (0.510663645158058, 6, 90), (0.43827362153815536, 7, 5), (0.4812592940955219, 7, 10), (0.47955910845102595, 7, 25), (0.49723693661316615, 7, 50), (0.44738561005310606, 7, 90), (0.429538516988762, 8, 5), (0.42743208156378304, 8, 10), (0.45266336079127695, 8, 25), (0.4788937635366271, 8, 50), (0.45647961942518256, 8, 90), (0.4349491780638692, 9, 5), (0.42585468309901736, 9, 10), (0.4459623385197902, 9, 25), (0.4700471549315736, 9, 50), (0.45692093647484155, 9, 90)]], 'fgr': []}
    # SUPERVISED (ONEC)
    # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.6236328834529762, 0, 5), (0.6224015678035724, 0, 10), (0.6291009822167161, 0, 25), (0.6298917929690595, 0, 50), (0.631557374399416, 0, 90), (0.6314845104902751, 1, 5), (0.6261516430809955, 1, 10), (0.6372133557046992, 1, 25), (0.6428065765476481, 1, 50), (0.6312193857434066, 1, 90), (0.6352466078643616, 2, 5), (0.6287790299308705, 2, 10), (0.6374509802336452, 2, 25), (0.6450541537922933, 2, 50), (0.6330994270522906, 2, 90), (0.6336076465299156, 3, 5), (0.6301209330787324, 3, 10), (0.6373886181492864, 3, 25), (0.6420908627269611, 3, 50), (0.6353905660263557, 3, 90), (0.6347478756866285, 4, 5), (0.6313769794253352, 4, 10), (0.6365486279127034, 4, 25), (0.6430628373210091, 4, 50), (0.6312880311266822, 4, 90), (0.5095948474997138, 5, 5), (0.5445824408638291, 5, 10), (0.49861673670095824, 5, 25), (0.5201001828970299, 5, 50), (0.5111890622324076, 5, 90), (0.45674098880648767, 6, 5), (0.4749119342989383, 6, 10), (0.4738479878314801, 6, 25), (0.4513250863616871, 6, 50), (0.4473566443154605, 6, 90), (0.4241679502121503, 7, 5), (0.45355985352579475, 7, 10), (0.4373896192604805, 7, 25), (0.39805127526818473, 7, 50), (0.43433192097510415, 7, 90), (0.40910975977334435, 8, 5), (0.42510355712838216, 8, 10), (0.401561683533112, 8, 25), (0.38823154640861185, 8, 50), (0.41699328635147653, 8, 90), (0.4105646114181538, 9, 5), (0.44515106434069335, 9, 10), (0.3946572552339123, 9, 25), (0.40973009999250665, 9, 50), (0.41171950369061305, 9, 90)], [(0.612777907809742, 0, 5), (0.6219842409235482, 0, 10), (0.6264391104553857, 0, 25), (0.6162326847828871, 0, 50), (0.6084601003192803, 0, 90), (0.6174657009599183, 1, 5), (0.6200984827492984, 1, 10), (0.627429349308404, 1, 25), (0.6130788666121145, 1, 50), (0.607457904780818, 1, 90), (0.6137224475956284, 2, 5), (0.6201227412796473, 2, 10), (0.6257101998691843, 2, 25), (0.6065517025019571, 2, 50), (0.6018743416293818, 2, 90), (0.6125136095094141, 3, 5), (0.6142784263058894, 3, 10), (0.6191684847039447, 3, 25), (0.6087185883127558, 3, 50), (0.6020163190426213, 3, 90), (0.6115314802654539, 4, 5), (0.6130966076993938, 4, 10), (0.619507487939928, 4, 25), (0.6073186118041455, 4, 50), (0.6019896431097302, 4, 90), (0.5458796103240661, 5, 5), (0.5122658848954029, 5, 10), (0.501777338180916, 5, 25), (0.5273153808222092, 5, 50), (0.5124051721815781, 5, 90), (0.46714130748367055, 6, 5), (0.4681805682058422, 6, 10), (0.47357099698870675, 6, 25), (0.443328114044014, 6, 50), (0.44692694385022735, 6, 90), (0.441160146805466, 7, 5), (0.41107605873563025, 7, 10), (0.3986363217118136, 7, 25), (0.4222934138988135, 7, 50), (0.4010054234634284, 7, 90), (0.43624325864503455, 8, 5), (0.4319796882466023, 8, 10), (0.44212756964000877, 8, 25), (0.40526131915897745, 8, 50), (0.42405398862515337, 8, 90), (0.4309214542123051, 9, 5), (0.4135568403132515, 9, 10), (0.44611488976091374, 9, 25), (0.4048180823878782, 9, 50), (0.42178061327444644, 9, 90)], [(0.6167582046788753, 0, 5), (0.619084991268039, 0, 10), (0.6280505327992059, 0, 25), (0.6217196557816459, 0, 50), (0.62176560311209, 0, 90), (0.6245259065249836, 1, 5), (0.6206509403438712, 1, 10), (0.6273435743468189, 1, 25), (0.6167368793078769, 1, 50), (0.6202175957061977, 1, 90), (0.6196765742081605, 2, 5), (0.6193491386408162, 2, 10), (0.6241238371132568, 2, 25), (0.6196936954866229, 2, 50), (0.6185948414631242, 2, 90), (0.6177515966075873, 3, 5), (0.6172928608812389, 3, 10), (0.6187453919144305, 3, 25), (0.6238762306977298, 3, 50), (0.6232328559182829, 3, 90), (0.6160181535070788, 4, 5), (0.6155946631698949, 4, 10), (0.6216614638781129, 4, 25), (0.6256059386769134, 4, 50), (0.6233421032040277, 4, 90), (0.5305987956458794, 5, 5), (0.5133149062462042, 5, 10), (0.5224905725607195, 5, 25), (0.5119075022180167, 5, 50), (0.4901086622992369, 5, 90), (0.48556846854429836, 6, 5), (0.4761647333864654, 6, 10), (0.4788637550063773, 6, 25), (0.43556321166671974, 6, 50), (0.459196318820951, 6, 90), (0.4339161083780292, 7, 5), (0.4217704320413153, 7, 10), (0.413770038018279, 7, 25), (0.4095105266041742, 7, 50), (0.43736706547192217, 7, 90), (0.404685229719199, 8, 5), (0.43794802161011515, 8, 10), (0.43517858942619736, 8, 25), (0.43805565586856193, 8, 50), (0.3853965836325287, 8, 90), (0.4258765767544183, 9, 5), (0.4381326614954211, 9, 10), (0.4319340338147666, 9, 25), (0.4322146106430718, 9, 50), (0.3936521477605802, 9, 90)]], 'fgr': []}
    # UNSUPERVISED (ONEC)
    # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.598847205306115, 0, 5), (0.6028287088931562, 0, 10), (0.5971463640532693, 0, 25), (0.6015233656181974, 0, 50), (0.6028014500226773, 0, 90), (0.5957968936951913, 1, 5), (0.6065369111446385, 1, 10), (0.5983228402596539, 1, 25), (0.604080743133938, 1, 50), (0.6028764646231339, 1, 90), (0.5958872581964865, 2, 5), (0.6080856900872053, 2, 10), (0.6006592783854462, 2, 25), (0.60518620535128, 2, 50), (0.6038624609970067, 2, 90), (0.5928369532899718, 3, 5), (0.6047957225462259, 3, 10), (0.5989315745230485, 3, 25), (0.603456735200349, 3, 50), (0.6054608720675919, 3, 90), (0.590906496027088, 4, 5), (0.60248585203068, 4, 10), (0.598964574927845, 4, 25), (0.6050179605916902, 4, 50), (0.6053116729098054, 4, 90), (0.4671586925402526, 5, 5), (0.5190199518306915, 5, 10), (0.5012476592711131, 5, 25), (0.5126439615771585, 5, 50), (0.49602084753608305, 5, 90), (0.4435520058553024, 6, 5), (0.4230701765762603, 6, 10), (0.4398665660805507, 6, 25), (0.43779172109854575, 6, 50), (0.39895453495347294, 6, 90), (0.4064675214131845, 7, 5), (0.3934522914685191, 7, 10), (0.3954036462690228, 7, 25), (0.4052869178821624, 7, 50), (0.3838993504400478, 7, 90), (0.3851045523637878, 8, 5), (0.4187925942860126, 8, 10), (0.3914568219660424, 8, 25), (0.39751627043197063, 8, 50), (0.40821004410223855, 8, 90), (0.3985282723007735, 9, 5), (0.4117413983194136, 9, 10), (0.39507798884859735, 9, 25), (0.3978444865141427, 9, 50), (0.4138872951609793, 9, 90)], [(0.6095318459252717, 0, 5), (0.612924265694456, 0, 10), (0.6122212454047731, 0, 25), (0.6018076039943491, 0, 50), (0.6002471190830889, 0, 90), (0.6056239208029038, 1, 5), (0.6092386709130968, 1, 10), (0.6132052096017516, 1, 25), (0.6003477715550362, 1, 50), (0.597546135531804, 1, 90), (0.6107274285420512, 2, 5), (0.60822532180204, 2, 10), (0.6122718481652345, 2, 25), (0.6026544003005414, 2, 50), (0.6018270827977211, 2, 90), (0.6103771717912201, 3, 5), (0.6068968367773091, 3, 10), (0.6070928933886626, 3, 25), (0.603455383868899, 3, 50), (0.6041090993683843, 3, 90), (0.6113147234850784, 4, 5), (0.6078332912502747, 4, 10), (0.6048022205770642, 4, 25), (0.6034307854007492, 4, 50), (0.6030502275775177, 4, 90), (0.5216536341296332, 5, 5), (0.4988786102421606, 5, 10), (0.5156818992427228, 5, 25), (0.4813303029047035, 5, 50), (0.5223237208668216, 5, 90), (0.4355390519072215, 6, 5), (0.4155400074419752, 6, 10), (0.4498143268646075, 6, 25), (0.4204911819562716, 6, 50), (0.4305501091804796, 6, 90), (0.4211992141018456, 7, 5), (0.40372810642706125, 7, 10), (0.40722537899222977, 7, 25), (0.39235023358130483, 7, 50), (0.3759786830872956, 7, 90), (0.41420960422634967, 8, 5), (0.37674796079921474, 8, 10), (0.3874904564406447, 8, 25), (0.39569387639104964, 8, 50), (0.39904951784825615, 8, 90), (0.4150122643791762, 9, 5), (0.3836476326060295, 9, 10), (0.3855266724773071, 9, 25), (0.39665605941552995, 9, 50), (0.39736130477687753, 9, 90)], [(0.5994063682726627, 0, 5), (0.6018535229518255, 0, 10), (0.5926845260665002, 0, 25), (0.5904873229985405, 0, 50), (0.5896327161124453, 0, 90), (0.5970662568396171, 1, 5), (0.5973626980899482, 1, 10), (0.587910655633649, 1, 25), (0.5897334251980135, 1, 50), (0.5891709191302733, 1, 90), (0.60162810518188, 2, 5), (0.5943193541474027, 2, 10), (0.5912261267707083, 2, 25), (0.5843002120802135, 2, 50), (0.5876004388177517, 2, 90), (0.6003222414358959, 3, 5), (0.5987172861700389, 3, 10), (0.5848701479905494, 3, 25), (0.5784790409819003, 3, 50), (0.5831178573040079, 3, 90), (0.6012238299026844, 4, 5), (0.5979401117883959, 4, 10), (0.583799186454058, 4, 25), (0.5770648102120983, 4, 50), (0.580946360424747, 4, 90), (0.4636693100803289, 5, 5), (0.49197624325484984, 5, 10), (0.473132682034656, 5, 25), (0.47550287436631683, 5, 50), (0.48449642027793527, 5, 90), (0.42495103004919155, 6, 5), (0.4267939088161008, 6, 10), (0.46630365750404, 6, 25), (0.4671877932356948, 6, 50), (0.3985977285311314, 6, 90), (0.4210419145891296, 7, 5), (0.41947809330471886, 7, 10), (0.4180617382049921, 7, 25), (0.40231097583230724, 7, 50), (0.3896130214729938, 7, 90), (0.41183146394467646, 8, 5), (0.4020008260458654, 8, 10), (0.3762930759728514, 8, 25), (0.3703271029818589, 8, 50), (0.373095838442172, 8, 90), (0.3960847555426979, 9, 5), (0.39802596603972307, 9, 10), (0.38517965489505895, 9, 25), (0.37665432269349153, 9, 50), (0.3666386233482711, 9, 90)]], 'fgr': []}
    # cgr_r = np.hstack(results['cgr'])
    # max_cgr = np.argmax(cgr_r[:,[0,3,6]].mean(axis=1))
    # print(cgr_r[max_cgr])
    # best_cgr = cgr_r[max_cgr][[1,2]]

    # # SUPERVISED
    # # results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5903718870737162, 0, 5), (0.6011489810413875, 0, 10), (0.5925130222230471, 0, 25), (0.6024335811083996, 0, 50), (0.6094000928652691, 0, 90), (0.6005279479680646, 1, 5), (0.6049420952279738, 1, 10), (0.6036868305176555, 1, 25), (0.5980181669259957, 1, 50), (0.6153509318865661, 1, 90), (0.5929839948862893, 2, 5), (0.5986218891715384, 2, 10), (0.6075005070656517, 2, 25), (0.6074698974885206, 2, 50), (0.6182322130943207, 2, 90), (0.5908107387218855, 3, 5), (0.5828417264333067, 3, 10), (0.5865391144117658, 3, 25), (0.5985335232357253, 3, 50), (0.6039959891852699, 3, 90), (0.5868435812058838, 4, 5), (0.5812156088430335, 4, 10), (0.5818658678012405, 4, 25), (0.5955281463239098, 4, 50), (0.5924709539242682, 4, 90), (0.6039878015060552, 5, 5), (0.6115419982595495, 5, 10), (0.6233282843210733, 5, 25), (0.6321479790870382, 5, 50), (0.6066992744454001, 5, 90), (0.582683404849217, 6, 5), (0.6009567890543889, 6, 10), (0.6056516823758414, 6, 25), (0.620087143879415, 6, 50), (0.6120584720062278, 6, 90), (0.5540285251413007, 7, 5), (0.5625609045595903, 7, 10), (0.5805535241303752, 7, 25), (0.5782993886467233, 7, 50), (0.5763806496584883, 7, 90), (0.5319658415885316, 8, 5), (0.5528620420788595, 8, 10), (0.5659187297955962, 8, 25), (0.5719769676935522, 8, 50), (0.5577424080138667, 8, 90), (0.5294431165873039, 9, 5), (0.5461183208302762, 9, 10), (0.5676094564801941, 9, 25), (0.5799784513504256, 9, 50), (0.5549281834057279, 9, 90)], [(0.5793677445821952, 0, 5), (0.5930525137116809, 0, 10), (0.5877458856795724, 0, 25), (0.6035673503203225, 0, 50), (0.5943533648070481, 0, 90), (0.5939079994751041, 1, 5), (0.5964865590897356, 1, 10), (0.5841812190604989, 1, 25), (0.6008174500662772, 1, 50), (0.5947880187014272, 1, 90), (0.5953738988175196, 2, 5), (0.6029776049053617, 2, 10), (0.5955883261268273, 2, 25), (0.5973344519983158, 2, 50), (0.5958986979161736, 2, 90), (0.5921187869745803, 3, 5), (0.5896747072748365, 3, 10), (0.5911411240008166, 3, 25), (0.591567997828993, 3, 50), (0.5900970825162217, 3, 90), (0.5841422549255977, 4, 5), (0.5845316888158516, 4, 10), (0.5892650269639353, 4, 25), (0.5854126525070832, 4, 50), (0.5799711179057827, 4, 90), (0.5788459073327208, 5, 5), (0.6105737353336383, 5, 10), (0.6107802099464169, 5, 25), (0.6022168275625115, 5, 50), (0.6226154661473274, 5, 90), (0.5645106877427807, 6, 5), (0.5950974952335355, 6, 10), (0.5766836197483562, 6, 25), (0.5934053499660329, 6, 50), (0.6135158347092889, 6, 90), (0.5518624605116741, 7, 5), (0.5751149215488339, 7, 10), (0.5830244631997044, 7, 25), (0.5880066342907111, 7, 50), (0.5837550948387072, 7, 90), (0.5394955381889776, 8, 5), (0.5476254206591833, 8, 10), (0.5758332855940197, 8, 25), (0.5764027489822078, 8, 50), (0.577007885762227, 8, 90), (0.5298968122180164, 9, 5), (0.5538071940012614, 9, 10), (0.5749826969549459, 9, 25), (0.5799848487617251, 9, 50), (0.5863628995000022, 9, 90)], [(0.5863242473764344, 0, 5), (0.5939230509343515, 0, 10), (0.5858147237402392, 0, 25), (0.5889287167764624, 0, 50), (0.5900730413176192, 0, 90), (0.5892870982620022, 1, 5), (0.5951794346678319, 1, 10), (0.5937520597364832, 1, 25), (0.5908498219470437, 1, 50), (0.5948428658410876, 1, 90), (0.6044216055059937, 2, 5), (0.5877577540680644, 2, 10), (0.5977259575427265, 2, 25), (0.5906421644463046, 2, 50), (0.589377710307729, 2, 90), (0.5980646493510393, 3, 5), (0.5823481156549339, 3, 10), (0.5974107287533773, 3, 25), (0.5888850938452845, 3, 50), (0.5869771389267504, 3, 90), (0.5899449979408353, 4, 5), (0.57661040573333, 4, 10), (0.589716259238575, 4, 25), (0.5821866071276894, 4, 50), (0.5761580857082187, 4, 90), (0.6076499923621551, 5, 5), (0.6027091873910214, 5, 10), (0.6145069609950401, 5, 25), (0.6105484604414246, 5, 50), (0.6162097570418094, 5, 90), (0.5871808992835582, 6, 5), (0.5725819525164284, 6, 10), (0.5945413269265135, 6, 25), (0.6004952910851253, 6, 50), (0.6076466067239048, 6, 90), (0.5484815240735404, 7, 5), (0.5631062018562601, 7, 10), (0.5716407233469012, 7, 25), (0.5759765889045486, 7, 50), (0.5826622138590767, 7, 90), (0.5576794941897906, 8, 5), (0.5766778409945758, 8, 10), (0.5825400171034448, 8, 25), (0.5690413564789807, 8, 50), (0.5617587030949365, 8, 90), (0.5541335632925123, 9, 5), (0.5799495854703666, 9, 10), (0.5761009788773995, 9, 25), (0.5728667833141179, 9, 50), (0.569190245020359, 9, 90)]]}    
    # # UNSUPERVISED
    # # results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5488241686852108, 0, 5), (0.5524803396889513, 0, 10), (0.5526672648885746, 0, 25), (0.5486679739022968, 0, 50), (0.5741888298183513, 0, 90), (0.5507957167642988, 1, 5), (0.5518739158986815, 1, 10), (0.557218833723347, 1, 25), (0.5538838551754386, 1, 50), (0.5713894017085774, 1, 90), (0.5526233900816275, 2, 5), (0.5590337042360871, 2, 10), (0.55898908340512, 2, 25), (0.558950408878422, 2, 50), (0.5730609607783822, 2, 90), (0.5468270239026773, 3, 5), (0.5540200517038967, 3, 10), (0.5472289281844883, 3, 25), (0.5556327629969816, 3, 50), (0.5792283932295347, 3, 90), (0.5513365439047788, 4, 5), (0.5559334324706474, 4, 10), (0.5399528854351364, 4, 25), (0.5481885272816027, 4, 50), (0.571965700670769, 4, 90), (0.5634209805290122, 5, 5), (0.580354143784334, 5, 10), (0.5845561754555832, 5, 25), (0.5824880686543333, 5, 50), (0.593656957424263, 5, 90), (0.5514265111282504, 6, 5), (0.5548754321120832, 6, 10), (0.5711042846343574, 6, 25), (0.5788245600964348, 6, 50), (0.5733555932307303, 6, 90), (0.517466654488254, 7, 5), (0.5469307558281511, 7, 10), (0.547591222263191, 7, 25), (0.5640731714457059, 7, 50), (0.5449667855275393, 7, 90), (0.4992379884008261, 8, 5), (0.517661192790849, 8, 10), (0.5072267214898312, 8, 25), (0.539692653301569, 8, 50), (0.5247743472614333, 8, 90), (0.4987571846634131, 9, 5), (0.5179620719469966, 9, 10), (0.5236527851113115, 9, 25), (0.536168454269414, 9, 50), (0.5349806572323567, 9, 90)], [(0.5690731712939507, 0, 5), (0.5612189542577929, 0, 10), (0.5740439186706405, 0, 25), (0.576234683269052, 0, 50), (0.5817925588680203, 0, 90), (0.5775838363909404, 1, 5), (0.5719248471490392, 1, 10), (0.573732566904233, 1, 25), (0.5827063591658987, 1, 50), (0.5868459072551351, 1, 90), (0.5790601800032034, 2, 5), (0.5770919751946948, 2, 10), (0.5728929522241356, 2, 25), (0.5792705026730136, 2, 50), (0.5893088113764589, 2, 90), (0.5736190319877646, 3, 5), (0.5756987619704409, 3, 10), (0.5831398435332026, 3, 25), (0.5800391057881402, 3, 50), (0.5888215244003349, 3, 90), (0.5694745558513293, 4, 5), (0.5727471077466343, 4, 10), (0.5795074724420625, 4, 25), (0.5788317455796086, 4, 50), (0.5778670181661687, 4, 90), (0.5822439130718755, 5, 5), (0.6069271076378908, 5, 10), (0.6004860984181436, 5, 25), (0.5934852320415592, 5, 50), (0.5920069742572892, 5, 90), (0.5760991243671885, 6, 5), (0.5726372425893023, 6, 10), (0.5704977271730408, 6, 25), (0.6037334164105607, 6, 50), (0.5996871181959947, 6, 90), (0.5492024034587573, 7, 5), (0.543216146829633, 7, 10), (0.5538500012854053, 7, 25), (0.5750382791222607, 7, 50), (0.5723653547347778, 7, 90), (0.5216548870671832, 8, 5), (0.5444857409971939, 8, 10), (0.5278452745168168, 8, 25), (0.5452826196148453, 8, 50), (0.5574355881753135, 8, 90), (0.5148699350506994, 9, 5), (0.5466059657704806, 9, 10), (0.512872955295235, 9, 25), (0.5491108887045227, 9, 50), (0.5664044038479331, 9, 90)], [(0.554770173943866, 0, 5), (0.5680894622533437, 0, 10), (0.5710249839269915, 0, 25), (0.570669268590137, 0, 50), (0.5708144719664034, 0, 90), (0.5602843606128322, 1, 5), (0.5687000130781631, 1, 10), (0.5635465553473752, 1, 25), (0.565721458340422, 1, 50), (0.5814396912950707, 1, 90), (0.5612653072371557, 2, 5), (0.5601166276661611, 2, 10), (0.5668778191611719, 2, 25), (0.5683867759959343, 2, 50), (0.5850065764956783, 2, 90), (0.5653703981251791, 3, 5), (0.5622458207619893, 3, 10), (0.5648551435266416, 3, 25), (0.5699032021069081, 3, 50), (0.5843339443499673, 3, 90), (0.5620584811926106, 4, 5), (0.5635930768508417, 4, 10), (0.5526492166497516, 4, 25), (0.5686843203997365, 4, 50), (0.5852101262040553, 4, 90), (0.5804209089465837, 5, 5), (0.575643805157343, 5, 10), (0.5997006241035899, 5, 25), (0.5828146716922874, 5, 50), (0.6027993798486125, 5, 90), (0.5620509265420591, 6, 5), (0.5626811539937522, 6, 10), (0.5561381321183536, 6, 25), (0.5632414805523251, 6, 50), (0.5755826304944637, 6, 90), (0.5340435911325218, 7, 5), (0.5506495097099877, 7, 10), (0.5465635505908237, 7, 25), (0.5627190105992537, 7, 50), (0.5666966933860206, 7, 90), (0.4997780687182747, 8, 5), (0.5324347220500408, 8, 10), (0.5504806317312283, 8, 25), (0.5545968521657774, 8, 50), (0.564360981626576, 8, 90), (0.5031632569570922, 9, 5), (0.5290449759880886, 9, 10), (0.5448426619508594, 9, 25), (0.5588312460395962, 9, 50), (0.5568167017712876, 9, 90)]]}    
    # SUPERVISED (ONEC)
    # results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5949870940610803, 0, 5), (0.5991958258517694, 0, 10), (0.603502879188037, 0, 25), (0.6050563272531244, 0, 50), (0.6017723706538901, 0, 90), (0.5991988731069833, 1, 5), (0.6023792846069774, 1, 10), (0.6013167618260605, 1, 25), (0.5991458657253631, 1, 50), (0.6090698928975075, 1, 90), (0.6035590732819911, 2, 5), (0.6088022680780114, 2, 10), (0.6062963800709787, 2, 25), (0.6015946636761335, 2, 50), (0.6059034998076601, 2, 90), (0.6067827912854505, 3, 5), (0.6138563156498351, 3, 10), (0.6029234106701631, 3, 25), (0.6025415930154459, 3, 50), (0.603033583087664, 3, 90), (0.6079009844483249, 4, 5), (0.6078345043137381, 4, 10), (0.6019386133905866, 4, 25), (0.6005121758800898, 4, 50), (0.6057918053187906, 4, 90), (0.5949982108851815, 5, 5), (0.5921920222434263, 5, 10), (0.5912343324583685, 5, 25), (0.6017281575617851, 5, 50), (0.5841236657226944, 5, 90), (0.5679749938419456, 6, 5), (0.5489965567843176, 6, 10), (0.5535463483109567, 6, 25), (0.5542597083087548, 6, 50), (0.563310491030684, 6, 90), (0.5437990471162755, 7, 5), (0.5606351644352091, 7, 10), (0.5558659951623807, 7, 25), (0.5432642624050141, 7, 50), (0.5193885464565569, 7, 90), (0.5233192198684649, 8, 5), (0.5352538427892299, 8, 10), (0.5396075904652619, 8, 25), (0.5381019653367031, 8, 50), (0.5346171942771543, 8, 90), (0.5144555838516949, 9, 5), (0.5325481485494895, 9, 10), (0.5337501015412561, 9, 25), (0.5283930124050293, 9, 50), (0.5448391932958736, 9, 90)], [(0.5800544005211361, 0, 5), (0.5759304107746933, 0, 10), (0.5782197043587154, 0, 25), (0.5895385085476699, 0, 50), (0.5814993042090726, 0, 90), (0.5873221370024809, 1, 5), (0.5780625235543301, 1, 10), (0.5844127573558351, 1, 25), (0.5841760456369667, 1, 50), (0.5895996449162598, 1, 90), (0.597166665175829, 2, 5), (0.5939176437466176, 2, 10), (0.5797559174315523, 2, 25), (0.5877412061285214, 2, 50), (0.5897404647684363, 2, 90), (0.598424782793351, 3, 5), (0.6032331283997676, 3, 10), (0.5847438803171076, 3, 25), (0.5892354409006151, 3, 50), (0.5960553998444619, 3, 90), (0.598555106940515, 4, 5), (0.6018126819843054, 4, 10), (0.5928776801443602, 4, 25), (0.5887260397381304, 4, 50), (0.5934323087295235, 4, 90), (0.5817428913036581, 5, 5), (0.5836076680953678, 5, 10), (0.595399766451453, 5, 25), (0.5852887422106402, 5, 50), (0.58471597490479, 5, 90), (0.5428911191507608, 6, 5), (0.5523315288380638, 6, 10), (0.564892660638239, 6, 25), (0.5558940103617435, 6, 50), (0.5572886256710499, 6, 90), (0.5380171333738609, 7, 5), (0.5317261284863928, 7, 10), (0.5423483383196263, 7, 25), (0.518377547084156, 7, 50), (0.5434065674441103, 7, 90), (0.5268012514918161, 8, 5), (0.5592004786651059, 8, 10), (0.5439736373310492, 8, 25), (0.5535082476628695, 8, 50), (0.5300996820260361, 8, 90), (0.5223322035447087, 9, 5), (0.5529335868582397, 9, 10), (0.5513195941296943, 9, 25), (0.5332483665548997, 9, 50), (0.5307921665970653, 9, 90)], [(0.5960557192917685, 0, 5), (0.5996473815516269, 0, 10), (0.5915916006719608, 0, 25), (0.5985739158043472, 0, 50), (0.5984936494202281, 0, 90), (0.6022454785091105, 1, 5), (0.6050605552360973, 1, 10), (0.5940102841254207, 1, 25), (0.5975440240232677, 1, 50), (0.5988016243249794, 1, 90), (0.6017096114988372, 2, 5), (0.6002600442676779, 2, 10), (0.600932976225044, 2, 25), (0.6011696736537823, 2, 50), (0.6051705822755303, 2, 90), (0.5967243594628856, 3, 5), (0.6057685662394767, 3, 10), (0.6030267548476576, 3, 25), (0.608917856224964, 3, 50), (0.6031969810520421, 3, 90), (0.5952142896937475, 4, 5), (0.6018805812725709, 4, 10), (0.6003333873410105, 4, 25), (0.6041573026318586, 4, 50), (0.6032127557533894, 4, 90), (0.5835296526941206, 5, 5), (0.58977560206143, 5, 10), (0.6006259375607144, 5, 25), (0.572361898497754, 5, 50), (0.5801802084204046, 5, 90), (0.565477267666843, 6, 5), (0.5714170715174005, 6, 10), (0.5556669783655166, 6, 25), (0.5393250976447144, 6, 50), (0.551108802629674, 6, 90), (0.5593255195650407, 7, 5), (0.5333741821493769, 7, 10), (0.5141040308528243, 7, 25), (0.517263327427014, 7, 50), (0.5206085274478798, 7, 90), (0.528290772088014, 8, 5), (0.5373816218394938, 8, 10), (0.5515917579608403, 8, 25), (0.5195296201100231, 8, 50), (0.5390800823846845, 8, 90), (0.5317400577947595, 9, 5), (0.542349665758342, 9, 10), (0.5411789553375473, 9, 25), (0.5111085035230507, 9, 50), (0.5380480982376123, 9, 90)]]}
    # UNSUPERVISED (ONEC)
    results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.546341625283268, 0, 5), (0.5503935418001826, 0, 10), (0.5453669275854262, 0, 25), (0.5469488034141036, 0, 50), (0.5551048540423046, 0, 90), (0.5446232750976117, 1, 5), (0.5561163350621727, 1, 10), (0.5539470446120158, 1, 25), (0.555534724596148, 1, 50), (0.5577215916246956, 1, 90), (0.5522743529624207, 2, 5), (0.561764291837036, 2, 10), (0.5559757835104138, 2, 25), (0.5541562182129678, 2, 50), (0.5593101488856195, 2, 90), (0.5551340593625187, 3, 5), (0.5547903281609113, 3, 10), (0.5533367830275112, 3, 25), (0.5569267151181426, 3, 50), (0.5596465769194432, 3, 90), (0.5660889460846034, 4, 5), (0.5603122502692737, 4, 10), (0.54935081970066, 4, 25), (0.5520602450328347, 4, 50), (0.5563674293233504, 4, 90), (0.5593739777897184, 5, 5), (0.5821917554035, 5, 10), (0.5680918141705675, 5, 25), (0.5644706306177719, 5, 50), (0.5702566556628341, 5, 90), (0.5254005633344804, 6, 5), (0.5372726556218904, 6, 10), (0.5223707236525998, 6, 25), (0.5263156784535119, 6, 50), (0.5292519473439148, 6, 90), (0.5157374038162592, 7, 5), (0.49739151254215547, 7, 10), (0.49756176004368885, 7, 25), (0.5079427181109941, 7, 50), (0.5064556873774666, 7, 90), (0.4960562346910079, 8, 5), (0.5091719815097403, 8, 10), (0.5047209522606346, 8, 25), (0.4877101500758232, 8, 50), (0.49886987016996004, 8, 90), (0.4985828566479606, 9, 5), (0.5040831982639233, 9, 10), (0.4960730421015711, 9, 25), (0.4771992511978128, 9, 50), (0.49435439975809453, 9, 90)], [(0.5725909448429218, 0, 5), (0.5775485994177851, 0, 10), (0.5806517397628298, 0, 25), (0.5834830130719043, 0, 50), (0.5790655718948782, 0, 90), (0.5798907133901836, 1, 5), (0.5779308639228412, 1, 10), (0.5814191044109729, 1, 25), (0.5801827120180192, 1, 50), (0.5802995263291764, 1, 90), (0.5815670955286317, 2, 5), (0.5789693637658382, 2, 10), (0.5842699855018889, 2, 25), (0.5877583853357526, 2, 50), (0.5833723461554593, 2, 90), (0.579728425119334, 3, 5), (0.574632341633079, 3, 10), (0.5802832903955557, 3, 25), (0.5885177339314442, 3, 50), (0.5838949624970478, 3, 90), (0.5792464757756917, 4, 5), (0.5767137213071483, 4, 10), (0.5735760536536949, 4, 25), (0.5873606042149432, 4, 50), (0.5843455475107272, 4, 90), (0.5812148271353901, 5, 5), (0.5914496633455509, 5, 10), (0.5604633067404107, 5, 25), (0.5860629974918216, 5, 50), (0.5632987439626633, 5, 90), (0.538511953589178, 6, 5), (0.5387131117909131, 6, 10), (0.5516054537257394, 6, 25), (0.5456194608495262, 6, 50), (0.5515139854128426, 6, 90), (0.5175123341358826, 7, 5), (0.5377741025450529, 7, 10), (0.5116924223646055, 7, 25), (0.5072439776521116, 7, 50), (0.5071569447251074, 7, 90), (0.5176285604912123, 8, 5), (0.5063456240305787, 8, 10), (0.5165007671790329, 8, 25), (0.5209300282626187, 8, 50), (0.49273233080110107, 8, 90), (0.5067374374794297, 9, 5), (0.5194187069069056, 9, 10), (0.506835955793043, 9, 25), (0.5208614467890544, 9, 50), (0.49367459056513646, 9, 90)], [(0.5692325958466053, 0, 5), (0.5724533515446342, 0, 10), (0.5698589853474766, 0, 25), (0.5710262967452059, 0, 50), (0.5723895043352659, 0, 90), (0.5767359530017857, 1, 5), (0.5755184735525938, 1, 10), (0.5717610333960803, 1, 25), (0.5748447920212739, 1, 50), (0.5778447684801378, 1, 90), (0.579618845704988, 2, 5), (0.5764531711522506, 2, 10), (0.5744706000656529, 2, 25), (0.5826050310428422, 2, 50), (0.5846195812395072, 2, 90), (0.575252552891545, 3, 5), (0.5856184799630212, 3, 10), (0.579379832669929, 3, 25), (0.584480712407746, 3, 50), (0.5846022751266995, 3, 90), (0.5720522298422757, 4, 5), (0.5829087875716308, 4, 10), (0.5724513587981607, 4, 25), (0.5848556001872253, 4, 50), (0.5742265505627208, 4, 90), (0.5650309647910607, 5, 5), (0.5758860000197712, 5, 10), (0.5720550611133817, 5, 25), (0.5769953236706915, 5, 50), (0.5860535217747332, 5, 90), (0.5485235266785812, 6, 5), (0.5465485664541022, 6, 10), (0.5322860448297189, 6, 25), (0.5422885505858267, 6, 50), (0.5478112877761556, 6, 90), (0.49817524836186833, 7, 5), (0.5414812405164072, 7, 10), (0.5062254258701402, 7, 25), (0.5342201486526459, 7, 50), (0.4879844479184738, 7, 90), (0.49714616939189354, 8, 5), (0.5132081111205788, 8, 10), (0.49413929960863695, 8, 25), (0.5194722935689958, 8, 50), (0.5018270875472872, 8, 90), (0.4998931723502326, 9, 5), (0.5216715244346453, 9, 10), (0.5042761847153973, 9, 25), (0.518651055397279, 9, 50), (0.5033295939678768, 9, 90)]]}
    fgr_r = np.hstack(results['fgr'])
    max_fgr = np.argmax(fgr_r[:,[0,3,6]].mean(axis=1))
    print(fgr_r[max_fgr])
    best_fgr = fgr_r[max_fgr][[1,2]]

    # print("Using the best ones, calculate:")
    # # print(best_cgl)
    # # print(best_fgl)
    # print(best_cgr)
    # # print(best_fgr)

    current_seed = 0
    for pwithc, pwithoutc in zip(paths_with_context, paths_without_context):
        current_seed += 1
        with open(pwithc, 'rb') as fin:
            data_with_context = pickle.load(fin)
        with open(pwithoutc, 'rb') as fin:
            data_without_context = pickle.load(fin)
        for dataset, best in zip(datasets, [best_fgr]):
            data = load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, np.mean, best[1])
            train_k_above_threshold = data['train_k_above_threshold']
            train_x_above_threshold = data['train_x_above_threshold']
            train_y_above_threshold = data['train_y_above_threshold']
            val_k_above_threshold = data['val_k_above_threshold']
            val_x_above_threshold = data['val_x_above_threshold']
            val_y_above_threshold = data['val_y_above_threshold']
            test_k_above_threshold = data['test_k_above_threshold']
            test_x_above_threshold = data['test_x_above_threshold']
            test_y_above_threshold = data['test_y_above_threshold']
            train_k_below_threshold = data['train_k_below_threshold']
            train_x_below_threshold = data['train_x_below_threshold']
            train_y_below_threshold = data['train_y_below_threshold']
            val_k_below_threshold = data['val_k_below_threshold']
            val_x_below_threshold = data['val_x_below_threshold']
            val_y_below_threshold = data['val_y_below_threshold']
            test_k_below_threshold = data['test_k_below_threshold']
            test_x_below_threshold = data['test_x_below_threshold']
            test_y_below_threshold = data['test_y_below_threshold']
            init_seed2(current_seed)
            train_x = np.vstack([train_x_above_threshold, train_x_below_threshold])
            train_y = np.hstack([train_y_above_threshold, train_y_below_threshold])
            classifier1 = clone(models[int(best[0])])
            # classifier2 = clone(models[int(best[0])])
            classifier1.fit(train_x, train_y)
            # classifier2.fit(train_x_below_threshold, train_y_below_threshold)     
            test_x = np.vstack([test_x_above_threshold, test_x_below_threshold])
            test_y = np.hstack([test_y_above_threshold, test_y_below_threshold])
            # predicted_y = np.hstack([classifier1.predict(test_x_above_threshold), classifier2.predict(test_x_below_threshold)])
            predicted_y = classifier1.predict(test_x)
            f1 = f1_score(test_y, predicted_y, average='weighted')
            print(f"{current_seed} - {dataset} - {f1} - {best}")


def find_best_threshold_daumestrick(paths_with_context, paths_without_context):
    x = 0
    results = {}
    results['cgl'] = []
    results['fgl'] = []
    results['cgr'] = []
    results['fgr'] = []
    current_seed = 0
    for pwithc, pwithoutc in zip(paths_with_context, paths_without_context):
        current_seed += 1
        with open(pwithc, 'rb') as fin:
            data_with_context = pickle.load(fin)
        with open(pwithoutc, 'rb') as fin:
            data_without_context = pickle.load(fin)
        for dataset in datasets:
            dataset_result = []
            for model_number, model in enumerate(models):
                for threshold in [5,10,25,50,90]:
                    print(f"{model_number} - {threshold}")
                    data = load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, np.mean, threshold)
                    train_k_above_threshold = np.array(data['train_k_above_threshold'])
                    train_x_above_threshold = np.array(data['train_x_above_threshold'])
                    train_y_above_threshold = np.array(data['train_y_above_threshold'])
                    val_k_above_threshold = np.array(data['val_k_above_threshold'])
                    val_x_above_threshold = np.array(data['val_x_above_threshold'])
                    val_y_above_threshold = np.array(data['val_y_above_threshold'])
                    test_k_above_threshold = np.array(data['test_k_above_threshold'])
                    test_x_above_threshold = np.array(data['test_x_above_threshold'])
                    test_y_above_threshold = np.array(data['test_y_above_threshold'])
                    train_k_below_threshold = np.array(data['train_k_below_threshold'])
                    train_x_below_threshold = np.array(data['train_x_below_threshold'])
                    train_y_below_threshold = np.array(data['train_y_below_threshold'])
                    val_k_below_threshold = np.array(data['val_k_below_threshold'])
                    val_x_below_threshold = np.array(data['val_x_below_threshold'])
                    val_y_below_threshold = np.array(data['val_y_below_threshold'])
                    test_k_below_threshold = np.array(data['test_k_below_threshold'])
                    test_x_below_threshold = np.array(data['test_x_below_threshold'])
                    test_y_below_threshold = np.array(data['test_y_below_threshold'])
                    init_seed2(current_seed)
                    classifier1 = clone(model)
                    # classifier2 = clone(model)
                    # if len(train_k_below_threshold) == 0:
                    #     classifier1.fit(train_x_above_threshold, train_y_above_threshold)
                    #     dev_y = val_y_above_threshold
                    #     predicted_y = classifier1.predict(val_x_above_threshold)
                    # else:
                    tx1 = np.hstack([train_x_above_threshold, np.zeros(train_x_above_threshold.shape), train_x_above_threshold])
                    tx2 = np.hstack([train_x_below_threshold, train_x_below_threshold, np.zeros(train_x_below_threshold.shape)])
                    train_x = np.vstack([tx1, tx2])
                    train_y = np.hstack([train_y_above_threshold, train_y_below_threshold])
                    classifier1.fit(train_x, train_y)
                    # classifier2.fit(train_x_below_threshold, train_y_below_threshold)

                    dx1 = np.hstack([val_x_above_threshold, np.zeros(val_x_above_threshold.shape), val_x_above_threshold])
                    dx2 = np.hstack([val_x_below_threshold, val_x_below_threshold, np.zeros(val_x_below_threshold.shape)])

                    dev_x = np.vstack([dx1, dx2])
                    dev_y = np.hstack([val_y_above_threshold, val_y_below_threshold])
                    predicted_y = classifier1.predict(dev_x)
                    
                    f1 = f1_score(dev_y, predicted_y, average='weighted')
                    dataset_result.append((f1, model_number, threshold))
            results[dataset].append(dataset_result)
    print(results)
    exit()
    
    # SUPERVISED (TWOC)
    # results = {'cgl': [[(0.4102804329347522, 0, 5), (0.41208536186729433, 0, 10), (0.4231259952775517, 0, 25), (0.41921452305971646, 0, 50), (0.4138169262246121, 0, 90),   (0.39836511003030206, 1, 5), (0.4052881905569985, 1, 10), (0.4092884262251215, 1, 25), (0.40966779520458957, 1, 50), (0.39843408756213533, 1, 90), (0.3881889255918104, 2, 5), (0.39301959572688444, 2, 10), (0.4000588910566318, 2, 25), (0.3985351879754606, 2, 50), (0.38954477644955987, 2, 90), (0.37166440742623874, 3, 5), (0.38451811005236664, 3, 10), (0.36934701280223153, 3, 25), (0.37389530567115703, 3, 50), (0.3647776330120258, 3, 90), (0.36863442502614446, 4, 5), (0.37100528129179694, 4, 10), (0.35755238921472304, 4, 25), (0.3560937904539152, 4, 50), (0.3444706522569105, 4, 90), (0.3853275384979439, 5, 5), (0.3747905552233459, 5, 10), (0.3914222120188986, 5, 25), (0.38021841568110815, 5, 50), (0.3931250406711551, 5, 90), (0.36387428593924276, 6, 5), (0.35646969233628856, 6, 10), (0.37483776252063494, 6, 25), (0.37140400216913305, 6, 50), (0.3614250952804833, 6, 90), (0.34358957635883985, 7, 5), (0.3614699344300774, 7, 10), (0.36457202418424556, 7, 25), (0.3604352918409713, 7, 50), (0.3638132422467477, 7, 90), (0.34469240276552005, 8, 5), (0.3217570948870951, 8, 10), (0.33708552129927993, 8, 25), (0.35204118516095734, 8, 50), (0.35698565716482744, 8, 90), (0.33151931062270584, 9, 5), (0.32144047253534525, 9, 10), (0.3362675855409881, 9, 25), (0.3470608773997233, 9, 50), (0.3614758210187094, 9, 90)], [(0.40308637147270365, 0, 5), (0.4175825933966849, 0, 10), (0.41694553122448164, 0, 25), (0.42188594274500124, 0, 50), (0.41471563986308974, 0, 90), (0.39419726715169173, 1, 5), (0.4086996234077219, 1, 10), (0.4113048812163874, 1, 25), (0.4074519708507448, 1, 50), (0.4056981277780971, 1, 90), (0.3829242026308986, 2, 5), (0.3990312207868829, 2, 10), (0.395203915845685, 2, 25), (0.3981140244083306, 2, 50), (0.38828181830797426, 2, 90), (0.3719065432592382, 3, 5), (0.3706185161774576, 3, 10), (0.3854508361495431, 3, 25), (0.3861978792201278, 3, 50), (0.38227992478066797, 3, 90), (0.36418299009219696, 4, 5), (0.3649977482140913, 4, 10), (0.3748469510090493, 4, 25), (0.3783119727717996, 4, 50), (0.3688728406084082, 4, 90), (0.38187701701044086, 5, 5), (0.38933223502474285, 5, 10), (0.3878524000365328, 5, 25), (0.4027965581001839, 5, 50), (0.39095155452064545, 5, 90), (0.3746640399534234, 6, 5), (0.3835881582404714, 6, 10), (0.3853440033775971, 6, 25), (0.38497187627271046, 6, 50), (0.3717925932628463, 6, 90), (0.34736938091701314, 7, 5), (0.3657965276940995, 7, 10), (0.3652261289273505, 7, 25), (0.37986504772076285, 7, 50), (0.36361318361544553, 7, 90), (0.34071103205346165, 8, 5), (0.3415514014068976, 8, 10), (0.3487732277513302, 8, 25), (0.367781896839728, 8, 50), (0.3592568230707075, 8, 90), (0.3342337450480731, 9, 5), (0.3421200862513303, 9, 10), (0.35166251479864213, 9, 25), (0.3674656008332376, 9, 50), (0.362803637692165, 9, 90)], [(0.41022159933139585, 0, 5), (0.417755511965642, 0, 10), (0.4154310854330731, 0, 25), (0.4147507455109812, 0, 50), (0.4088234233262463, 0, 90), (0.39620303382913946, 1, 5), (0.40520010795394223, 1, 10), (0.40580191812601735, 1, 25), (0.399196443916301, 1, 50), (0.399388037413909, 1, 90), (0.3869353501216854, 2, 5), (0.3856925172970741, 2, 10), (0.38989081142394905, 2, 25), (0.38661081459057145, 2, 50), (0.38539596202813003, 2, 90), (0.3743842179423089, 3, 5), (0.3773817389864607, 3, 10), (0.38108355886851997, 3, 25), (0.3631830783488949, 3, 50), (0.37207887069969764, 3, 90), (0.3628776162121137, 4, 5), (0.3672485875506718, 4, 10), (0.36188553154834524, 4, 25), (0.3558932513351208, 4, 50), (0.3507435719643765, 4, 90), (0.38971893591986806, 5, 5), (0.38243207977063, 5, 10), (0.3971816385680995, 5, 25), (0.39579362233978366, 5, 50), (0.39106753078420226, 5, 90), (0.37237758633127965, 6, 5), (0.3778107688166909, 6, 10), (0.3742933419163627, 6, 25), (0.3667304578447956, 6, 50), (0.3720487279014911, 6, 90), (0.3540097065088358, 7, 5), (0.3720084980359627, 7, 10), (0.3519223119903412, 7, 25), (0.36069886021350117, 7, 50), (0.35521464317799406, 7, 90), (0.3314276275128467, 8, 5), (0.34549802260329104, 8, 10), (0.3372856563730308, 8, 25), (0.33256739248217576, 8, 50), (0.3536739584284242, 8, 90), (0.328134591376323, 9, 5), (0.3366874944818235, 9, 10), (0.3463030354431289, 9, 25), (0.33432514785791645, 9, 50), (0.35620968758539645, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # UNSUPERVISED (TWOC)
    # results = {'cgl': [[(0.3782813874973521, 0, 5), (0.3780468143768835, 0, 10), (0.3898021864769625, 0, 25), (0.3855812341312119, 0, 50), (0.38878175305833473, 0, 90), (0.3669270821992437, 1, 5), (0.36774529206818646, 1, 10), (0.38144528341867323, 1, 25), (0.37653113799339577, 1, 50), (0.3722225002640868, 1, 90), (0.3528325666553546, 2, 5), (0.3624304578687187, 2, 10), (0.3672164963599891, 2, 25), (0.3655931127328699, 2, 50), (0.35489153294292186, 2, 90), (0.34476333055331165, 3, 5), (0.34721911427784613, 3, 10), (0.3522724969198418, 3, 25), (0.3428389058063359, 3, 50), (0.3313361553330887, 3, 90), (0.3298490034487891, 4, 5), (0.3346453901522413, 4, 10), (0.3366044083315605, 4, 25), (0.3357708980814143, 4, 50), (0.3167126455927852, 4, 90), (0.3592485010874357, 5, 5), (0.34936019409537494, 5, 10), (0.3645627473641764, 5, 25), (0.37631354737823103, 5, 50), (0.3684227564930254, 5, 90), (0.34255920372590243, 6, 5), (0.34205191439664123, 6, 10), (0.34689390696377687, 6, 25), (0.3466770133012599, 6, 50), (0.34851653889817485, 6, 90), (0.32178733232693457, 7, 5), (0.32780869873802115, 7, 10), (0.3434689895349313, 7, 25), (0.34042314135606816, 7, 50), (0.3273329831138282, 7, 90), (0.32427337945533097, 8, 5), (0.32381360191297237, 8, 10), (0.332353907319302, 8, 25), (0.3433532162489752, 8, 50), (0.34022458880551143, 8, 90), (0.32593272791661104, 9, 5), (0.3260088922147983, 9, 10), (0.3345713433683215, 9, 25), (0.342606796591596, 9, 50), (0.33121739042248577, 9, 90)], [(0.37137633305342943, 0, 5), (0.37464613736265284, 0, 10), (0.39217149933719486, 0, 25), (0.38871419791361317, 0, 50), (0.3912133790548793, 0, 90), (0.37144178985685233, 1, 5), (0.36074858169022817, 1, 10), (0.3807918323825396, 1, 25), (0.3731796045442015, 1, 50), (0.3712909050995396, 1, 90), (0.36017387532566036, 2, 5), (0.35116504126918396, 2, 10), (0.3675872153411259, 2, 25), (0.36334374791542334, 2, 50), (0.36517385657058143, 2, 90), (0.34800807547154083, 3, 5), (0.34539113016262835, 3, 10), (0.3485175072933307, 3, 25), (0.3457486543270156, 3, 50), (0.3401532621247159, 3, 90), (0.34450394496658243, 4, 5), (0.3323680134472784, 4, 10), (0.33650627798163635, 4, 25), (0.34122640241750324, 4, 50), (0.3334024110726006, 4, 90), (0.36503093988681284, 5, 5), (0.3576569531784085, 5, 10), (0.37939138558355084, 5, 25), (0.3757071311560938, 5, 50), (0.3717974355947033, 5, 90), (0.354850089528005, 6, 5), (0.35264694013033854, 6, 10), (0.35837911749141843, 6, 25), (0.35000031810049864, 6, 50), (0.3427666686602213, 6, 90), (0.318335240495369, 7, 5), (0.3493500308066362, 7, 10), (0.34628541415482833, 7, 25), (0.34384398523844806, 7, 50), (0.34341203371395845, 7, 90), (0.32859583675966775, 8, 5), (0.311710973595099, 8, 10), (0.3283769185640163, 8, 25), (0.32651875608960995, 8, 50), (0.3474415883913153, 8, 90), (0.31198725173134584, 9, 5), (0.2966258020578455, 9, 10), (0.34114315024920755, 9, 25), (0.3313055673864683, 9, 50), (0.34263501714189454, 9, 90)], [(0.39201643787936635, 0, 5), (0.3870724592383659, 0, 10), (0.38624178542990945, 0, 25), (0.3902345957484623, 0, 50), (0.39028072810399367, 0, 90), (0.3849350171112882, 1, 5), (0.3729741084977359, 1, 10), (0.37341313846711616, 1, 25), (0.37319279392745075, 1, 50), (0.3802189629713088, 1, 90), (0.3779890282169239, 2, 5), (0.3661697069783714, 2, 10), (0.3651550678816176, 2, 25), (0.3701803990307472, 2, 50), (0.37242524615730155, 2, 90), (0.35364626772968516, 3, 5), (0.3545579698186012, 3, 10), (0.3466591213360149, 3, 25), (0.339273442391637, 3, 50), (0.3587064122870058, 3, 90), (0.3490769627038725, 4, 5), (0.35101597236025095, 4, 10), (0.33320767707005233, 4, 25), (0.33289847028711156, 4, 50), (0.342173209194011, 4, 90), (0.3574924119425629, 5, 5), (0.35840686388633874, 5, 10), (0.36891621373032485, 5, 25), (0.37529564270127147, 5, 50), (0.36651217950887716, 5, 90), (0.3463947668560262, 6, 5), (0.3349752481017397, 6, 10), (0.3441200376190676, 6, 25), (0.3464441496443967, 6, 50), (0.3526588333537202, 6, 90), (0.32449550390461157, 7, 5), (0.31043652473898, 7, 10), (0.3427204242841226, 7, 25), (0.3372969214458639, 7, 50), (0.3523337751579334, 7, 90), (0.3185119450256161, 8, 5), (0.3039627782091761, 8, 10), (0.31779726333847486, 8, 25), (0.32957302562371804, 8, 50), (0.34896653660214144, 8, 90), (0.32169023476107617, 9, 5), (0.3122606422045862, 9, 10), (0.322591357759478, 9, 25), (0.32887548694697155, 9, 50), (0.3485730842070277, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}   
    # SUPERVISED (ONEC)
    # results = {'cgl': [[(0.4042356426922654, 0, 5), (0.4107619626205481, 0, 10), (0.4160092288247386, 0, 25), (0.4058986953516379, 0, 50), (0.406005692909913, 0, 90), (0.40838647438812253, 1, 5), (0.4045444474422312, 1, 10), (0.4079199657023436, 1, 25), (0.4024617506695809, 1, 50), (0.40625075940187044, 1, 90), (0.3979398324658045, 2, 5), (0.40348717811566526, 2, 10), (0.40429156067294475, 2, 25), (0.3986886208546781, 2, 50), (0.3981889721815933, 2, 90), (0.3938117631104169, 3, 5), (0.3942717581924138, 3, 10), (0.395817934938701, 3, 25), (0.3852975580562127, 3, 50), (0.390602947292478, 3, 90), (0.3875556206657997, 4, 5), (0.38578603631960107, 4, 10), (0.3900843850846734, 4, 25), (0.3823328524348764, 4, 50), (0.38604008254418587, 4, 90), (0.3922113450369085, 5, 5), (0.3847428667908436, 5, 10), (0.3878502391261553, 5, 25), (0.3712290146054678, 5, 50), (0.36951836743130934, 5, 90), (0.37419764211138873, 6, 5), (0.38629877615253755, 6, 10), (0.39495777258879355, 6, 25), (0.3551285678144711, 6, 50), (0.36824751805098305, 6, 90), (0.3501613721050864, 7, 5), (0.3625054558057274, 7, 10), (0.35454989867264586, 7, 25), (0.351380924996797, 7, 50), (0.34287268266576665, 7, 90), (0.3341696879271528, 8, 5), (0.34613988554097375, 8, 10), (0.34079975828839404, 8, 25), (0.3403112779680209, 8, 50), (0.33813193612773906, 8, 90), (0.3395482923862807, 9, 5), (0.35701188705504644, 9, 10), (0.33235581976906436, 9, 25), (0.35371601815976406, 9, 50), (0.3324036661081422, 9, 90)], [(0.41121326922683865, 0, 5), (0.41629358541219397, 0, 10), (0.4080253574715743, 0, 25), (0.41615776019585254, 0, 50), (0.4124911892865882, 0, 90), (0.4059030655109156, 1, 5), (0.41550128483748566, 1, 10), (0.4091533096391006, 1, 25), (0.4063059033723392, 1, 50), (0.4146712058952662, 1, 90), (0.3948890892328874, 2, 5), (0.40616204500460096, 2, 10), (0.4064441486556245, 2, 25), (0.40539369116523705, 2, 50), (0.40550581185642376, 2, 90), (0.38669579438803936, 3, 5), (0.3911369030523805, 3, 10), (0.39691357711855607, 3, 25), (0.39002021744208537, 3, 50), (0.3932120635451256, 3, 90), (0.3802781986199711, 4, 5), (0.3877458204841598, 4, 10), (0.3922506156200193, 4, 25), (0.38531209869050254, 4, 50), (0.39030737458271547, 4, 90), (0.4112526904832394, 5, 5), (0.39790656893675613, 5, 10), (0.4063378338832679, 5, 25), (0.39154589101204945, 5, 50), (0.384881460706296, 5, 90), (0.38426369917089975, 6, 5), (0.381789825001693, 6, 10), (0.3901598436875141, 6, 25), (0.3686387634764362, 6, 50), (0.3707136308034388, 6, 90), (0.3725301795387268, 7, 5), (0.3671290995481827, 7, 10), (0.34740931896316196, 7, 25), (0.3703180841374357, 7, 50), (0.34533243258068635, 7, 90), (0.36791906933849944, 8, 5), (0.3386239769609562, 8, 10), (0.3463616724014912, 8, 25), (0.3468708879200587, 8, 50), (0.34559699365342994, 8, 90), (0.3657319750902574, 9, 5), (0.34559286619325075, 9, 10), (0.34755233834816796, 9, 25), (0.3471627444764937, 9, 50), (0.3441791981393916, 9, 90)], [(0.4140052419041886, 0, 5), (0.4121581226123169, 0, 10), (0.4107664905034652, 0, 25), (0.40640966931063094, 0, 50), (0.4099946374897826, 0, 90), (0.39965885028803577, 1, 5), (0.4035885792201583, 1, 10), (0.3970546928391135, 1, 25), (0.39417988931871384, 1, 50), (0.40100767804304444, 1, 90), (0.39179954765844105, 2, 5), (0.38805617164037653, 2, 10), (0.3847219491491586, 2, 25), (0.3940033573031172, 2, 50), (0.39507782595195273, 2, 90), (0.3879999436925691, 3, 5), (0.3802912661712574, 3, 10), (0.3828897820912041, 3, 25), (0.38132196024186815, 3, 50), (0.38188439253154155, 3, 90), (0.3811334230767334, 4, 5), (0.3773645301657935, 4, 10), (0.3774750787280483, 4, 25), (0.37796108905392406, 4, 50), (0.3778316239906025, 4, 90), (0.40103486458568505, 5, 5), (0.3951915648348099, 5, 10), (0.3972130431319027, 5, 25), (0.37764262505086793, 5, 50), (0.37270840279748135, 5, 90), (0.3673608712711848, 6, 5), (0.38895811534917873, 6, 10), (0.36737674010656834, 6, 25), (0.3639528353077486, 6, 50), (0.36180162799455196, 6, 90), (0.33683992406706204, 7, 5), (0.3563436704725195, 7, 10), (0.3422176739035851, 7, 25), (0.3461149809476738, 7, 50), (0.3327931010101147, 7, 90), (0.34038113958660954, 8, 5), (0.33359137464223576, 8, 10), (0.34309723873115516, 8, 25), (0.34579311078153924, 8, 50), (0.3425988761928933, 8, 90), (0.33242519889505645, 9, 5), (0.33170960226713464, 9, 10), (0.3359991286014549, 9, 25), (0.34412873138003647, 9, 50), (0.3524082989932175, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # UNSUPERVISED (ONEC)
    results = {'cgl': [[(0.3804211777512578, 0, 5), (0.3809832614088193, 0, 10), (0.38222091282759535, 0, 25), (0.37904848698887944, 0, 50), (0.3794239889771677, 0, 90), (0.36831773978362836, 1, 5), (0.36586506768082117, 1, 10), (0.3681544802740751, 1, 25), (0.3718481958814243, 1, 50), (0.3670049892754971, 1, 90), (0.36033836880514764, 2, 5), (0.36208765456228037, 2, 10), (0.3591447145005213, 2, 25), (0.3651863832300204, 2, 50), (0.3633988428827399, 2, 90), (0.3506537343160914, 3, 5), (0.3522356746578327, 3, 10), (0.34828830411132383, 3, 25), (0.35692783780755777, 3, 50), (0.3542920534588233, 3, 90), (0.34269384518313806, 4, 5), (0.34745102102480363, 4, 10), (0.34196519472694686, 4, 25), (0.34763571475765354, 4, 50), (0.34725733176391776, 4, 90), (0.36129109748806915, 5, 5), (0.3708629734115532, 5, 10), (0.3675583389339376, 5, 25), (0.35499593558652326, 5, 50), (0.3572031726090279, 5, 90), (0.35548094646459116, 6, 5), (0.36041897290026376, 6, 10), (0.3556429156697163, 6, 25), (0.33019329107907974, 6, 50), (0.31530026573411496, 6, 90), (0.30678235442139, 7, 5), (0.3169464605808715, 7, 10), (0.32646386880349854, 7, 25), (0.3238984597586405, 7, 50), (0.3057407293821037, 7, 90), (0.3183559429928945, 8, 5), (0.3094451305790187, 8, 10), (0.30507826834788304, 8, 25), (0.31428086380485704, 8, 50), (0.2932660419436293, 8, 90), (0.320581637341337, 9, 5), (0.32591468137081786, 9, 10), (0.3068941628873757, 9, 25), (0.32336060996454585, 9, 50), (0.28945764263444274, 9, 90)], [(0.3859817911166326, 0, 5), (0.3799201820526341, 0, 10), (0.38083440560766946, 0, 25), (0.37748356698622876, 0, 50), (0.38161433047893095, 0, 90), (0.37285372632984, 1, 5), (0.3701301511909626, 1, 10), (0.36879315413088126, 1, 25), (0.36968407797331737, 1, 50), (0.36826630546546557, 1, 90), (0.36336972135813234, 2, 5), (0.3636597274406894, 2, 10), (0.36287914696927603, 2, 25), (0.36019232817438, 2, 50), (0.3586884393403606, 2, 90), (0.3565207805611774, 3, 5), (0.35674680930283387, 3, 10), (0.3511967423710574, 3, 25), (0.34615178331015095, 3, 50), (0.3506986589356748, 3, 90), (0.349921013502546, 4, 5), (0.35150110154398995, 4, 10), (0.3414876350337971, 4, 25), (0.34111410639801115, 4, 50), (0.3461012344978562, 4, 90), (0.3640131498828832, 5, 5), (0.3768095912347764, 5, 10), (0.35821692445348335, 5, 25), (0.36009348311375816, 5, 50), (0.36849660890552777, 5, 90), (0.365594433719168, 6, 5), (0.3526733809069021, 6, 10), (0.35137831134614467, 6, 25), (0.34898728728712386, 6, 50), (0.3503534977590903, 6, 90), (0.35095348651818686, 7, 5), (0.350558431890638, 7, 10), (0.35756662524992966, 7, 25), (0.33165097834313606, 7, 50), (0.3290426965459285, 7, 90), (0.30751968664771395, 8, 5), (0.33205064675567564, 8, 10), (0.32785140362424836, 8, 25), (0.31949743332220126, 8, 50), (0.3414366440338714, 8, 90), (0.3282486168860169, 9, 5), (0.3299239865305869, 9, 10), (0.3261565787479909, 9, 25), (0.31763016901049324, 9, 50), (0.34484228996166294, 9, 90)], [(0.39768296644926726, 0, 5), (0.38525392148423737, 0, 10), (0.3849469943835075, 0, 25), (0.38207034555617864, 0, 50), (0.37819448640326125, 0, 90), (0.3947060960478313, 1, 5), (0.38293527919094156, 1, 10), (0.36938488828600946, 1, 25), (0.37200682741151553, 1, 50), (0.3645011915590957, 1, 90), (0.3820151225689187, 2, 5), (0.37183479763886623, 2, 10), (0.3664428423891532, 2, 25), (0.3607709706083549, 2, 50), (0.35906664519625114, 2, 90), (0.3642205423524975, 3, 5), (0.3592783178098167, 3, 10), (0.35555187416484435, 3, 25), (0.3508043225278215, 3, 50), (0.35320324679334314, 3, 90), (0.3597856327471204, 4, 5), (0.35675456206336087, 4, 10), (0.3494161763574812, 4, 25), (0.34375719257840703, 4, 50), (0.3487430891312939, 4, 90), (0.37848317987540786, 5, 5), (0.356199906483787, 5, 10), (0.36859178132293124, 5, 25), (0.3602297802928768, 5, 50), (0.3421588838555379, 5, 90), (0.32988715226197984, 6, 5), (0.33409507620482026, 6, 10), (0.3277799253040105, 6, 25), (0.3284115143586288, 6, 50), (0.3342428331496404, 6, 90), (0.31938867191434495, 7, 5), (0.31908865689939314, 7, 10), (0.30099405633578763, 7, 25), (0.3017114560283231, 7, 50), (0.3061018868891668, 7, 90), (0.3181977736534347, 8, 5), (0.33739198193764525, 8, 10), (0.31665591367853213, 8, 25), (0.29783812195134945, 8, 50), (0.30907204301595353, 8, 90), (0.3166556666260974, 9, 5), (0.32799066609765737, 9, 10), (0.31058943832723024, 9, 25), (0.30284547575504006, 9, 50), (0.31660819861714373, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    cgl_r = np.hstack(results['cgl'])
    max_cgl = np.argmax(cgl_r[:,[0,3,6]].mean(axis=1))
    print(cgl_r[max_cgl])
    best_cgl = cgl_r[max_cgl][[1,2]]

    # SUPERVISED
    # results = {'cgl': [], 'fgl': [[(0.44018287683414437, 0, 5), (0.4374704863828879, 0, 10), (0.4329581080072101, 0, 25), (0.4300000662527114, 0, 50), (0.4339915145072298, 0, 90), (0.4337458435309339, 1, 5), (0.42888878239427825, 1, 10), (0.4264211863868156, 1, 25), (0.424618259580433, 1, 50), (0.4337302931132867, 1, 90), (0.42321662368432755, 2, 5), (0.42334321745355225, 2, 10), (0.41598785460620225, 2, 25), (0.41195960442025853, 2, 50), (0.41752435409352645, 2, 90), (0.408471598702253, 3, 5), (0.41611847794978946, 3, 10), (0.40750872985138703, 3, 25), (0.39794534811210397, 3, 50), (0.40226274909969467, 3, 90), (0.39847952783303603, 4, 5), (0.4050468345156869, 4, 10), (0.3948845383774175, 4, 25), (0.3859575425389037, 4, 50), (0.3905588546877185, 4, 90), (0.42307068921425167, 5, 5), (0.4195107046046909, 5, 10), (0.41714786320366964, 5, 25), (0.41624116693418206, 5, 50), (0.4169776813650202, 5, 90), (0.425723122742877, 6, 5), (0.4221722346669565, 6, 10), (0.42184380303793984, 6, 25), (0.40719848549915344, 6, 50), (0.4107287878541265, 6, 90), (0.42347317360426495, 7, 5), (0.41166173141612133, 7, 10), (0.40544823305371963, 7, 25), (0.4071200635848804, 7, 50), (0.4076235872923531, 7, 90), (0.4057859311268913, 8, 5), (0.40891741237695955, 8, 10), (0.4010853291668894, 8, 25), (0.40712013291202964, 8, 50), (0.4049433798024638, 8, 90), (0.4136660569296781, 9, 5), (0.403678611736522, 9, 10), (0.3947961835628832, 9, 25), (0.4053323457182333, 9, 50), (0.40434484256287095, 9, 90)], [(0.4399850843536158, 0, 5), (0.4352550838926977, 0, 10), (0.4320715279451688, 0, 25), (0.4237364563145757, 0, 50), (0.4229868938170582, 0, 90), (0.4349863814421545, 1, 5), (0.4301498852436695, 1, 10), (0.424837246440088, 1, 25), (0.41547616594063236, 1, 50), (0.41938745760296925, 1, 90), (0.4204640289837625, 2, 5), (0.4225216042613754, 2, 10), (0.41343178913964423, 2, 25), (0.39539186634720985, 2, 50), (0.4025083214919781, 2, 90), (0.4091798984199242, 3, 5), (0.4113104845112113, 3, 10), (0.4026008311834082, 3, 25), (0.38174918537139974, 3, 50), (0.39029563053908156, 3, 90), (0.39791090786256766, 4, 5), (0.3928487390654487, 4, 10), (0.39146999977749314, 4, 25), (0.37387289187504574, 4, 50), (0.38501357686099574, 4, 90), (0.42339687815537663, 5, 5), (0.42426378929620695, 5, 10), (0.43315691710863136, 5, 25), (0.4123643946929854, 5, 50), (0.40875397333024616, 5, 90), (0.4201121935807676, 6, 5), (0.4289600021124884, 6, 10), (0.41633808100138614, 6, 25), (0.4047288342806114, 6, 50), (0.4090304052088028, 6, 90), (0.41934345076302987, 7, 5), (0.4126467234165702, 7, 10), (0.41247415164334517, 7, 25), (0.39279534172840697, 7, 50), (0.39276753117118474, 7, 90), (0.410635748949425, 8, 5), (0.39151054129098006, 8, 10), (0.40710427145825695, 8, 25), (0.3940321333000986, 8, 50), (0.39823362633949283, 8, 90), (0.4108599763235845, 9, 5), (0.3899388535537887, 9, 10), (0.40605878110762494, 9, 25), (0.39438618017662747, 9, 50), (0.39807305686367966, 9, 90)], [(0.4402475621774054, 0, 5), (0.4330453091952697, 0, 10), (0.4391608874563181, 0, 25), (0.4248422182781126, 0, 50), (0.4289093988672736, 0, 90), (0.4444450351694549, 1, 5), (0.42991107302401377, 1, 10), (0.43290936818375486, 1, 25), (0.4199051348221317, 1, 50), (0.42963307068286116, 1, 90), (0.4365133956158961, 2, 5), (0.43334219934103535, 2, 10), (0.43542521786194005, 2, 25), (0.4139776172963612, 2, 50), (0.416871027737984, 2, 90), (0.416380296320427, 3, 5), (0.41741259303656897, 3, 10), (0.4249904685935248, 3, 25), (0.3960805313867102, 3, 50), (0.4038090304192427, 3, 90), (0.4011009225295238, 4, 5), (0.41059701241022034, 4, 10), (0.40920555291087857, 4, 25), (0.38602278769468334, 4, 50), (0.39190813718164985, 4, 90), (0.4237175296230875, 5, 5), (0.4426037029367199, 5, 10), (0.4221092926910767, 5, 25), (0.4061322366870223, 5, 50), (0.4190775537988329, 5, 90), (0.42033464236441104, 6, 5), (0.431796319212524, 6, 10), (0.41974254088681684, 6, 25), (0.4026924302664537, 6, 50), (0.4174429066002549, 6, 90), (0.4146101657054444, 7, 5), (0.4262720243680534, 7, 10), (0.4133108436045176, 7, 25), (0.3967877343319732, 7, 50), (0.40721401103910215, 7, 90), (0.4038839517135078, 8, 5), (0.41693270113711167, 8, 10), (0.4079112626562324, 8, 25), (0.3922226471543043, 8, 50), (0.4032810507698635, 8, 90), (0.4055171736573638, 9, 5), (0.4159159966321856, 9, 10), (0.4039033248494488, 9, 25), (0.3918124435294805, 9, 50), (0.4037375097369582, 9, 90)]], 'cgr': [], 'fgr': []}
    # UNSUPERVISED
    # results = {'cgl': [], 'fgl': [[(0.415803272970497, 0, 5), (0.40802527010745177, 0, 10), (0.3937731632369722, 0, 25), (0.39665038497879596, 0, 50), (0.3932270650396818, 0, 90), (0.4053612878941299, 1, 5), (0.40114081163145165, 1, 10), (0.3926375288995982, 1, 25), (0.38562078632915947, 1, 50), (0.3888129032707594, 1, 90), (0.3924275798585352, 2, 5), (0.3922567781527804, 2, 10), (0.3879635796081622, 2, 25), (0.37762013302663244, 2, 50), (0.3803100248682387, 2, 90), (0.38301057596140214, 3, 5), (0.3852344921915184, 3, 10), (0.3676987740322083, 3, 25), (0.3601102252442845, 3, 50), (0.3741137505305689, 3, 90), (0.3730750255148819, 4, 5), (0.37531174660353817, 4, 10), (0.3531993396774852, 4, 25), (0.3549691542261483, 4, 50), (0.3618568748606364, 4, 90), (0.39822438204613914, 5, 5), (0.40888434921454075, 5, 10), (0.3832557235673628, 5, 25), (0.39028804577979537, 5, 50), (0.38653427584941447, 5, 90), (0.4026916262486822, 6, 5), (0.38756830348554144, 6, 10), (0.37915492935855577, 6, 25), (0.3885764828216486, 6, 50), (0.3739924329583462, 6, 90), (0.3896940231607346, 7, 5), (0.38563422101475436, 7, 10), (0.37329082633690147, 7, 25), (0.3788692310135714, 7, 50), (0.3675222754292613, 7, 90), (0.38808386750514007, 8, 5), (0.3795226950539602, 8, 10), (0.3668276312335112, 8, 25), (0.3800696759224338, 8, 50), (0.36062361116308267, 8, 90), (0.38207619704695817, 9, 5), (0.3781378581583559, 9, 10), (0.3684585584667498, 9, 25), (0.382239202952604, 9, 50), (0.3603754543712701, 9, 90)], [(0.4204734480862849, 0, 5), (0.42202834734300687, 0, 10), (0.4104577890349908, 0, 25), (0.4015957542585421, 0, 50), (0.39136212461687, 0, 90), (0.41487214889044244, 1, 5), (0.4130317517936334, 1, 10), (0.39772229300752016, 1, 25), (0.3979107539613404, 1, 50), (0.39347639712052024, 1, 90), (0.40387798549909726, 2, 5), (0.40551666720039353, 2, 10), (0.3888299806122486, 2, 25), (0.3833138543584828, 2, 50), (0.38854692009898334, 2, 90), (0.39676890520605684, 3, 5), (0.40032315845093536, 3, 10), (0.3716427375360405, 3, 25), (0.36821062254119175, 3, 50), (0.37463174506729174, 3, 90), (0.39556599252397107, 4, 5), (0.39115191898694474, 4, 10), (0.36717356213231855, 4, 25), (0.36033146387166126, 4, 50), (0.36392749960834725, 4, 90), (0.4181817671746023, 5, 5), (0.42450371020603844, 5, 10), (0.4031630712439084, 5, 25), (0.3941120089835419, 5, 50), (0.37937108280843856, 5, 90), (0.4069312416805575, 6, 5), (0.41234120327630347, 6, 10), (0.39053296113100533, 6, 25), (0.3953289382416856, 6, 50), (0.3708960397443583, 6, 90), (0.398026138484828, 7, 5), (0.4120633675179572, 7, 10), (0.3933378988362744, 7, 25), (0.3844603760792586, 7, 50), (0.3721657464101367, 7, 90), (0.3926238503602263, 8, 5), (0.39628700063450195, 8, 10), (0.3871910357663872, 8, 25), (0.3833779984994899, 8, 50), (0.3663700343722775, 8, 90), (0.3916932812221703, 9, 5), (0.3959232945449926, 9, 10), (0.3880058468351905, 9, 25), (0.38169485464119085, 9, 50), (0.36701546137829794, 9, 90)], [(0.42453935078556626, 0, 5), (0.42090895550949015, 0, 10), (0.41648362492184005, 0, 25), (0.40147159455249937, 0, 50), (0.4002287009127716, 0, 90), (0.4207820591098823, 1, 5), (0.41466811334226705, 1, 10), (0.4008129430709465, 1, 25), (0.40214667959609246, 1, 50), (0.39801717623788696, 1, 90), (0.4101240588877736, 2, 5), (0.39992824784443687, 2, 10), (0.39882285451634436, 2, 25), (0.38974506593680985, 2, 50), (0.3928849393031416, 2, 90), (0.3928839796052144, 3, 5), (0.38813496381817114, 3, 10), (0.39263662595406285, 3, 25), (0.3735698741129318, 3, 50), (0.3768530520243214, 3, 90), (0.38153689262491436, 4, 5), (0.3790774698759725, 4, 10), (0.3860816985499904, 4, 25), (0.3622450792276566, 4, 50), (0.36033850424556324, 4, 90), (0.4071262114402906, 5, 5), (0.4001028001718561, 5, 10), (0.3970396150508317, 5, 25), (0.3867502932475946, 5, 50), (0.39113864121341585, 5, 90), (0.39187044368623863, 6, 5), (0.3997759663623916, 6, 10), (0.3861014260563736, 6, 25), (0.3735573604798093, 6, 50), (0.38554249553069986, 6, 90), (0.3981294097751596, 7, 5), (0.3780519395887838, 7, 10), (0.3733285657974545, 7, 25), (0.3733504104415273, 7, 50), (0.36470828295944224, 7, 90), (0.3779995836195638, 8, 5), (0.37720336162585577, 8, 10), (0.3751738182778737, 8, 25), (0.36878150712162633, 8, 50), (0.36690046495933737, 8, 90), (0.37955388464421724, 9, 5), (0.38003041124075443, 9, 10), (0.37452417712028635, 9, 25), (0.3682548492613898, 9, 50), (0.36643038512132275, 9, 90)]], 'cgr': [], 'fgr': []}  
    # SUPERVISED (ONEC)
    # UNSUPERVISED (ONEC)
    # results = {'cgl': [[(0.3804211777512578, 0, 5), (0.3809832614088193, 0, 10), (0.38222091282759535, 0, 25), (0.37904848698887944, 0, 50), (0.3794239889771677, 0, 90), (0.36831773978362836, 1, 5), (0.36586506768082117, 1, 10), (0.3681544802740751, 1, 25), (0.3718481958814243, 1, 50), (0.3670049892754971, 1, 90), (0.36033836880514764, 2, 5), (0.36208765456228037, 2, 10), (0.3591447145005213, 2, 25), (0.3651863832300204, 2, 50), (0.3633988428827399, 2, 90), (0.3506537343160914, 3, 5), (0.3522356746578327, 3, 10), (0.34828830411132383, 3, 25), (0.35692783780755777, 3, 50), (0.3542920534588233, 3, 90), (0.34269384518313806, 4, 5), (0.34745102102480363, 4, 10), (0.34196519472694686, 4, 25), (0.34763571475765354, 4, 50), (0.34725733176391776, 4, 90), (0.36129109748806915, 5, 5), (0.3708629734115532, 5, 10), (0.3675583389339376, 5, 25), (0.35499593558652326, 5, 50), (0.3572031726090279, 5, 90), (0.35548094646459116, 6, 5), (0.36041897290026376, 6, 10), (0.3556429156697163, 6, 25), (0.33019329107907974, 6, 50), (0.31530026573411496, 6, 90), (0.30678235442139, 7, 5), (0.3169464605808715, 7, 10), (0.32646386880349854, 7, 25), (0.3238984597586405, 7, 50), (0.3057407293821037, 7, 90), (0.3183559429928945, 8, 5), (0.3094451305790187, 8, 10), (0.30507826834788304, 8, 25), (0.31428086380485704, 8, 50), (0.2932660419436293, 8, 90), (0.320581637341337, 9, 5), (0.32591468137081786, 9, 10), (0.3068941628873757, 9, 25), (0.32336060996454585, 9, 50), (0.28945764263444274, 9, 90)], [(0.3859817911166326, 0, 5), (0.3799201820526341, 0, 10), (0.38083440560766946, 0, 25), (0.37748356698622876, 0, 50), (0.38161433047893095, 0, 90), (0.37285372632984, 1, 5), (0.3701301511909626, 1, 10), (0.36879315413088126, 1, 25), (0.36968407797331737, 1, 50), (0.36826630546546557, 1, 90), (0.36336972135813234, 2, 5), (0.3636597274406894, 2, 10), (0.36287914696927603, 2, 25), (0.36019232817438, 2, 50), (0.3586884393403606, 2, 90), (0.3565207805611774, 3, 5), (0.35674680930283387, 3, 10), (0.3511967423710574, 3, 25), (0.34615178331015095, 3, 50), (0.3506986589356748, 3, 90), (0.349921013502546, 4, 5), (0.35150110154398995, 4, 10), (0.3414876350337971, 4, 25), (0.34111410639801115, 4, 50), (0.3461012344978562, 4, 90), (0.3640131498828832, 5, 5), (0.3768095912347764, 5, 10), (0.35821692445348335, 5, 25), (0.36009348311375816, 5, 50), (0.36849660890552777, 5, 90), (0.365594433719168, 6, 5), (0.3526733809069021, 6, 10), (0.35137831134614467, 6, 25), (0.34898728728712386, 6, 50), (0.3503534977590903, 6, 90), (0.35095348651818686, 7, 5), (0.350558431890638, 7, 10), (0.35756662524992966, 7, 25), (0.33165097834313606, 7, 50), (0.3290426965459285, 7, 90), (0.30751968664771395, 8, 5), (0.33205064675567564, 8, 10), (0.32785140362424836, 8, 25), (0.31949743332220126, 8, 50), (0.3414366440338714, 8, 90), (0.3282486168860169, 9, 5), (0.3299239865305869, 9, 10), (0.3261565787479909, 9, 25), (0.31763016901049324, 9, 50), (0.34484228996166294, 9, 90)], [(0.39768296644926726, 0, 5), (0.38525392148423737, 0, 10), (0.3849469943835075, 0, 25), (0.38207034555617864, 0, 50), (0.37819448640326125, 0, 90), (0.3947060960478313, 1, 5), (0.38293527919094156, 1, 10), (0.36938488828600946, 1, 25), (0.37200682741151553, 1, 50), (0.3645011915590957, 1, 90), (0.3820151225689187, 2, 5), (0.37183479763886623, 2, 10), (0.3664428423891532, 2, 25), (0.3607709706083549, 2, 50), (0.35906664519625114, 2, 90), (0.3642205423524975, 3, 5), (0.3592783178098167, 3, 10), (0.35555187416484435, 3, 25), (0.3508043225278215, 3, 50), (0.35320324679334314, 3, 90), (0.3597856327471204, 4, 5), (0.35675456206336087, 4, 10), (0.3494161763574812, 4, 25), (0.34375719257840703, 4, 50), (0.3487430891312939, 4, 90), (0.37848317987540786, 5, 5), (0.356199906483787, 5, 10), (0.36859178132293124, 5, 25), (0.3602297802928768, 5, 50), (0.3421588838555379, 5, 90), (0.32988715226197984, 6, 5), (0.33409507620482026, 6, 10), (0.3277799253040105, 6, 25), (0.3284115143586288, 6, 50), (0.3342428331496404, 6, 90), (0.31938867191434495, 7, 5), (0.31908865689939314, 7, 10), (0.30099405633578763, 7, 25), (0.3017114560283231, 7, 50), (0.3061018868891668, 7, 90), (0.3181977736534347, 8, 5), (0.33739198193764525, 8, 10), (0.31665591367853213, 8, 25), (0.29783812195134945, 8, 50), (0.30907204301595353, 8, 90), (0.3166556666260974, 9, 5), (0.32799066609765737, 9, 10), (0.31058943832723024, 9, 25), (0.30284547575504006, 9, 50), (0.31660819861714373, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
    # fgl_r = np.hstack(results['fgl'])
    # max_fgl = np.argmax(fgl_r[:,[0,3,6]].mean(axis=1))
    # print(fgl_r[max_fgl])
    # best_fgl = fgl_r[max_fgl][[1,2]]
    
    # SUPERVISED
    # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.6335305735476063, 0, 5), (0.6336038795474582, 0, 10), (0.6237053159635588, 0, 25), (0.6352967277769281, 0, 50), (0.6417171357068032, 0, 90), (0.632294063499953, 1, 5), (0.6323210057292162, 1, 10), (0.6275361812150975, 1, 25), (0.6321716034558073, 1, 50), (0.6352738163131864, 1, 90), (0.6382340547624781, 2, 5), (0.6270063724679632, 2, 10), (0.6236490339544416, 2, 25), (0.6355786764331393, 2, 50), (0.6390019712961584, 2, 90), (0.6403475641896689, 3, 5), (0.6243981436482632, 3, 10), (0.6211828278632061, 3, 25), (0.6300723404790883, 3, 50), (0.6276237262416519, 3, 90), (0.6398016270158073, 4, 5), (0.6177630657878398, 4, 10), (0.6176662897754066, 4, 25), (0.6293614917198811, 4, 50), (0.6239239011608432, 4, 90), (0.5875080908010264, 5, 5), (0.575629047411968, 5, 10), (0.6165160030551806, 5, 25), (0.608623933050234, 5, 50), (0.6054297781752622, 5, 90), (0.5051669911937806, 6, 5), (0.5255872468038585, 6, 10), (0.5413174883574129, 6, 25), (0.5502346194076955, 6, 50), (0.5964539991833298, 6, 90), (0.4745673691685388, 7, 5), (0.46748544854318, 7, 10), (0.5057169066464002, 7, 25), (0.5015863445446319, 7, 50), (0.5261085045387469, 7, 90), (0.45185852774690377, 8, 5), (0.47057242618578854, 8, 10), (0.48867076065206877, 8, 25), (0.49563394686038387, 8, 50), (0.5008150467214277, 8, 90), (0.44701431828150817, 9, 5), (0.46100029599881237, 9, 10), (0.4766858837503574, 9, 25), (0.4906235687817101, 9, 50), (0.5020165038065759, 9, 90)], [(0.6301366740328136, 0, 5), (0.6279020381551123, 0, 10), (0.6256552339014557, 0, 25), (0.611828932392197, 0, 50), (0.6203673246817254, 0, 90), (0.6304018758499298, 1, 5), (0.6226643801684654, 1, 10), (0.6221169450322639, 1, 25), (0.6167527747758982, 1, 50), (0.6236141006611674, 1, 90), (0.6236796665531976, 2, 5), (0.6194227238251587, 2, 10), (0.6156667325849168, 2, 25), (0.6158867424930786, 2, 50), (0.6225866711759408, 2, 90), (0.6238283923974031, 3, 5), (0.6120381792898106, 3, 10), (0.6117034134151088, 3, 25), (0.6167875753430411, 3, 50), (0.6201789393843319, 3, 90), (0.6199835499664827, 4, 5), (0.6151661357582845, 4, 10), (0.6074808494988004, 4, 25), (0.6208378321447652, 4, 50), (0.6199503040974368, 4, 90), (0.566142855777455, 5, 5), (0.591130669441746, 5, 10), (0.609195034298824, 5, 25), (0.6087213750494739, 5, 50), (0.598364727446016, 5, 90), (0.5096338999632193, 6, 5), (0.5380318999529439, 6, 10), (0.5200013123303918, 6, 25), (0.5528473989662037, 6, 50), (0.5742099203580662, 6, 90), (0.47697795482076516, 7, 5), (0.4911425815167493, 7, 10), (0.49718613756682645, 7, 25), (0.49484219384234374, 7, 50), (0.5077813498827728, 7, 90), (0.47428268395122974, 8, 5), (0.4292362319964243, 8, 10), (0.4853727004875425, 8, 25), (0.4979996152745482, 8, 50), (0.4989477135807658, 8, 90), (0.48075026124844994, 9, 5), (0.44910370407014477, 9, 10), (0.47883357887480055, 9, 25), (0.5092458945719472, 9, 50), (0.509492676742255, 9, 90)], [(0.6248042308276723, 0, 5), (0.6232985111851588, 0, 10), (0.6267120813035677, 0, 25), (0.620446458478406, 0, 50), (0.6255275219682901, 0, 90), (0.6239493284556609, 1, 5), (0.6170441597125598, 1, 10), (0.6276261605723862, 1, 25), (0.6171435948659454, 1, 50), (0.6264357007556924, 1, 90), (0.6212157159780707, 2, 5), (0.6161068521732505, 2, 10), (0.622300875019216, 2, 25), (0.614971319319924, 2, 50), (0.6235218503714338, 2, 90), (0.6170035847217639, 3, 5), (0.6134130479221432, 3, 10), (0.6196153545433931, 3, 25), (0.6086451676086644, 3, 50), (0.6236023418355944, 3, 90), (0.6156031138595426, 4, 5), (0.612899559996649, 4, 10), (0.6207341780279997, 4, 25), (0.6122868899341332, 4, 50), (0.6200942962034125, 4, 90), (0.5563309624302838, 5, 5), (0.5697269699317902, 5, 10), (0.5918359829887057, 5, 25), (0.6254975588108049, 5, 50), (0.6210704865600115, 5, 90), (0.5231369966451206, 6, 5), (0.5318687582579041, 6, 10), (0.557103567117944, 6, 25), (0.5879168167074934, 6, 50), (0.5779733014067067, 6, 90), (0.47563343677003506, 7, 5), (0.48181000689401277, 7, 10), (0.5156862585001541, 7, 25), (0.5069699766369133, 7, 50), (0.49974965329277726, 7, 90), (0.46049671065011194, 8, 5), (0.44509458639443705, 8, 10), (0.463238173656438, 8, 25), (0.5044061842966647, 8, 50), (0.4740348559764178, 8, 90), (0.4722169168012738, 9, 5), (0.4494684689917981, 9, 10), (0.46267597027200447, 9, 25), (0.5057948042465382, 9, 50), (0.505388994304544, 9, 90)]], 'fgr': []}
    # # UNSUPERVISED
    # # results = {'cgl': [], 'fgl': [], 'cgr': [[(0.5982087609628108, 0, 5), (0.5978653120662508, 0, 10), (0.6035011630537971, 0, 25), (0.6010115648092957, 0, 50), (0.6104777485275861, 0, 90), (0.5951350579768203, 1, 5), (0.5938677256144633, 1, 10), (0.5973541699787354, 1, 25), (0.5960759160724335, 1, 50), (0.6071248337541574, 1, 90), (0.5903336476105263, 2, 5), (0.5934904727623621, 2, 10), (0.5955252763491589, 2, 25), (0.5968539291958053, 2, 50), (0.6091892180581598, 2, 90), (0.5896510545625782, 3, 5), (0.5914154965287277, 3, 10), (0.5919345775625232, 3, 25), (0.5935722393239994, 3, 50), (0.6114361039133386, 3, 90), (0.5833085463885981, 4, 5), (0.5898602822645523, 4, 10), (0.5858888277902256, 4, 25), (0.5884588392810369, 4, 50), (0.6114048132650838, 4, 90), (0.5343226274063584, 5, 5), (0.5559156507969513, 5, 10), (0.5649014571017663, 5, 25), (0.5940532822060649, 5, 50), (0.5798545890877165, 5, 90), (0.497762921037043, 6, 5), (0.47830541794541276, 6, 10), (0.5119443636961171, 6, 25), (0.5004782352081942, 6, 50), (0.525676167205516, 6, 90), (0.4398452693987577, 7, 5), (0.46695788257241577, 7, 10), (0.4507212259405072, 7, 25), (0.48670354628720913, 7, 50), (0.4934674666209327, 7, 90), (0.4172596109432336, 8, 5), (0.45198069685525033, 8, 10), (0.4584487678736591, 8, 25), (0.4744082723321031, 8, 50), (0.4640387642420637, 8, 90), (0.41930433365125885, 9, 5), (0.452614359028517, 9, 10), (0.4478100979907353, 9, 25), (0.46019355293832903, 9, 50), (0.46638167307262746, 9, 90)], [(0.6138677396750671, 0, 5), (0.6042503952708843, 0, 10), (0.6050933450327515, 0, 25), (0.6020542445400484, 0, 50), (0.6141351362781852, 0, 90), (0.617531035894853, 1, 5), (0.6083754871336962, 1, 10), (0.6063069069671267, 1, 25), (0.5978120954644214, 1, 50), (0.6092107831254969, 1, 90), (0.6107913163420883, 2, 5), (0.6095945901188639, 2, 10), (0.6077761700013508, 2, 25), (0.5927304176634672, 2, 50), (0.6039129984405085, 2, 90), (0.5999491297532752, 3, 5), (0.6098824420964958, 3, 10), (0.5998485244707467, 3, 25), (0.5984036634769353, 3, 50), (0.6070453298103486, 3, 90), (0.5960939874067724, 4, 5), (0.604389297691807, 4, 10), (0.5995647058609567, 4, 25), (0.5971804489662299, 4, 50), (0.6080995800299516, 4, 90), (0.5470717450506277, 5, 5), (0.5476486704314669, 5, 10), (0.5591907812724707, 5, 25), (0.5881304241891556, 5, 50), (0.5811053421562002, 5, 90), (0.4815708526061015, 6, 5), (0.5133412945137531, 6, 10), (0.49993516847936215, 6, 25), (0.5463617035657711, 6, 50), (0.545151388417251, 6, 90), (0.4440221605935675, 7, 5), (0.451992669696246, 7, 10), (0.45844252591896323, 7, 25), (0.4576842237565175, 7, 50), (0.4882574535669322, 7, 90), (0.4518020655226081, 8, 5), (0.46298269541201614, 8, 10), (0.4583164309537097, 8, 25), (0.4862799034916102, 8, 50), (0.456568977749472, 8, 90), (0.43512440938459007, 9, 5), (0.4558113099414182, 9, 10), (0.4730238114918816, 9, 25), (0.4871297957069862, 9, 50), (0.45538427726032615, 9, 90)], [(0.6065971847519118, 0, 5), (0.5979189537784383, 0, 10), (0.5908682857024706, 0, 25), (0.5857481762788541, 0, 50), (0.6034950692314734, 0, 90), (0.6085042258976159, 1, 5), (0.595710557315949, 1, 10), (0.592010907356809, 1, 25), (0.588657606342776, 1, 50), (0.5921332087270642, 1, 90), (0.6106627297078011, 2, 5), (0.6039872767235409, 2, 10), (0.5865498351113304, 2, 25), (0.5856434096336764, 2, 50), (0.5925306348498977, 2, 90), (0.602627957076022, 3, 5), (0.6038368967736818, 3, 10), (0.5829485181073373, 3, 25), (0.5801111141683117, 3, 50), (0.5915639275017376, 3, 90), (0.604042581273862, 4, 5), (0.6028644707566512, 4, 10), (0.5810737265081867, 4, 25), (0.5816748661085351, 4, 50), (0.588575656875638, 4, 90), (0.5356507390762959, 5, 5), (0.5620577831215845, 5, 10), (0.5498342330754065, 5, 25), (0.5673902181819686, 5, 50), (0.5834953833825931, 5, 90), (0.48721104652907926, 6, 5), (0.4905616481390015, 6, 10), (0.5395943457766874, 6, 25), (0.5326684203773876, 6, 50), (0.510663645158058, 6, 90), (0.43827362153815536, 7, 5), (0.4812592940955219, 7, 10), (0.47955910845102595, 7, 25), (0.49723693661316615, 7, 50), (0.44738561005310606, 7, 90), (0.429538516988762, 8, 5), (0.42743208156378304, 8, 10), (0.45266336079127695, 8, 25), (0.4788937635366271, 8, 50), (0.45647961942518256, 8, 90), (0.4349491780638692, 9, 5), (0.42585468309901736, 9, 10), (0.4459623385197902, 9, 25), (0.4700471549315736, 9, 50), (0.45692093647484155, 9, 90)]], 'fgr': []}
    # cgr_r = np.hstack(results['cgr'])
    # max_cgr = np.argmax(cgr_r[:,[0,3,6]].mean(axis=1))
    # print(cgr_r[max_cgr])
    # best_cgr = cgr_r[max_cgr][[1,2]]

    # # SUPERVISED
    # # results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5903718870737162, 0, 5), (0.6011489810413875, 0, 10), (0.5925130222230471, 0, 25), (0.6024335811083996, 0, 50), (0.6094000928652691, 0, 90), (0.6005279479680646, 1, 5), (0.6049420952279738, 1, 10), (0.6036868305176555, 1, 25), (0.5980181669259957, 1, 50), (0.6153509318865661, 1, 90), (0.5929839948862893, 2, 5), (0.5986218891715384, 2, 10), (0.6075005070656517, 2, 25), (0.6074698974885206, 2, 50), (0.6182322130943207, 2, 90), (0.5908107387218855, 3, 5), (0.5828417264333067, 3, 10), (0.5865391144117658, 3, 25), (0.5985335232357253, 3, 50), (0.6039959891852699, 3, 90), (0.5868435812058838, 4, 5), (0.5812156088430335, 4, 10), (0.5818658678012405, 4, 25), (0.5955281463239098, 4, 50), (0.5924709539242682, 4, 90), (0.6039878015060552, 5, 5), (0.6115419982595495, 5, 10), (0.6233282843210733, 5, 25), (0.6321479790870382, 5, 50), (0.6066992744454001, 5, 90), (0.582683404849217, 6, 5), (0.6009567890543889, 6, 10), (0.6056516823758414, 6, 25), (0.620087143879415, 6, 50), (0.6120584720062278, 6, 90), (0.5540285251413007, 7, 5), (0.5625609045595903, 7, 10), (0.5805535241303752, 7, 25), (0.5782993886467233, 7, 50), (0.5763806496584883, 7, 90), (0.5319658415885316, 8, 5), (0.5528620420788595, 8, 10), (0.5659187297955962, 8, 25), (0.5719769676935522, 8, 50), (0.5577424080138667, 8, 90), (0.5294431165873039, 9, 5), (0.5461183208302762, 9, 10), (0.5676094564801941, 9, 25), (0.5799784513504256, 9, 50), (0.5549281834057279, 9, 90)], [(0.5793677445821952, 0, 5), (0.5930525137116809, 0, 10), (0.5877458856795724, 0, 25), (0.6035673503203225, 0, 50), (0.5943533648070481, 0, 90), (0.5939079994751041, 1, 5), (0.5964865590897356, 1, 10), (0.5841812190604989, 1, 25), (0.6008174500662772, 1, 50), (0.5947880187014272, 1, 90), (0.5953738988175196, 2, 5), (0.6029776049053617, 2, 10), (0.5955883261268273, 2, 25), (0.5973344519983158, 2, 50), (0.5958986979161736, 2, 90), (0.5921187869745803, 3, 5), (0.5896747072748365, 3, 10), (0.5911411240008166, 3, 25), (0.591567997828993, 3, 50), (0.5900970825162217, 3, 90), (0.5841422549255977, 4, 5), (0.5845316888158516, 4, 10), (0.5892650269639353, 4, 25), (0.5854126525070832, 4, 50), (0.5799711179057827, 4, 90), (0.5788459073327208, 5, 5), (0.6105737353336383, 5, 10), (0.6107802099464169, 5, 25), (0.6022168275625115, 5, 50), (0.6226154661473274, 5, 90), (0.5645106877427807, 6, 5), (0.5950974952335355, 6, 10), (0.5766836197483562, 6, 25), (0.5934053499660329, 6, 50), (0.6135158347092889, 6, 90), (0.5518624605116741, 7, 5), (0.5751149215488339, 7, 10), (0.5830244631997044, 7, 25), (0.5880066342907111, 7, 50), (0.5837550948387072, 7, 90), (0.5394955381889776, 8, 5), (0.5476254206591833, 8, 10), (0.5758332855940197, 8, 25), (0.5764027489822078, 8, 50), (0.577007885762227, 8, 90), (0.5298968122180164, 9, 5), (0.5538071940012614, 9, 10), (0.5749826969549459, 9, 25), (0.5799848487617251, 9, 50), (0.5863628995000022, 9, 90)], [(0.5863242473764344, 0, 5), (0.5939230509343515, 0, 10), (0.5858147237402392, 0, 25), (0.5889287167764624, 0, 50), (0.5900730413176192, 0, 90), (0.5892870982620022, 1, 5), (0.5951794346678319, 1, 10), (0.5937520597364832, 1, 25), (0.5908498219470437, 1, 50), (0.5948428658410876, 1, 90), (0.6044216055059937, 2, 5), (0.5877577540680644, 2, 10), (0.5977259575427265, 2, 25), (0.5906421644463046, 2, 50), (0.589377710307729, 2, 90), (0.5980646493510393, 3, 5), (0.5823481156549339, 3, 10), (0.5974107287533773, 3, 25), (0.5888850938452845, 3, 50), (0.5869771389267504, 3, 90), (0.5899449979408353, 4, 5), (0.57661040573333, 4, 10), (0.589716259238575, 4, 25), (0.5821866071276894, 4, 50), (0.5761580857082187, 4, 90), (0.6076499923621551, 5, 5), (0.6027091873910214, 5, 10), (0.6145069609950401, 5, 25), (0.6105484604414246, 5, 50), (0.6162097570418094, 5, 90), (0.5871808992835582, 6, 5), (0.5725819525164284, 6, 10), (0.5945413269265135, 6, 25), (0.6004952910851253, 6, 50), (0.6076466067239048, 6, 90), (0.5484815240735404, 7, 5), (0.5631062018562601, 7, 10), (0.5716407233469012, 7, 25), (0.5759765889045486, 7, 50), (0.5826622138590767, 7, 90), (0.5576794941897906, 8, 5), (0.5766778409945758, 8, 10), (0.5825400171034448, 8, 25), (0.5690413564789807, 8, 50), (0.5617587030949365, 8, 90), (0.5541335632925123, 9, 5), (0.5799495854703666, 9, 10), (0.5761009788773995, 9, 25), (0.5728667833141179, 9, 50), (0.569190245020359, 9, 90)]]}    
    # # UNSUPERVISED
    # # results = {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5488241686852108, 0, 5), (0.5524803396889513, 0, 10), (0.5526672648885746, 0, 25), (0.5486679739022968, 0, 50), (0.5741888298183513, 0, 90), (0.5507957167642988, 1, 5), (0.5518739158986815, 1, 10), (0.557218833723347, 1, 25), (0.5538838551754386, 1, 50), (0.5713894017085774, 1, 90), (0.5526233900816275, 2, 5), (0.5590337042360871, 2, 10), (0.55898908340512, 2, 25), (0.558950408878422, 2, 50), (0.5730609607783822, 2, 90), (0.5468270239026773, 3, 5), (0.5540200517038967, 3, 10), (0.5472289281844883, 3, 25), (0.5556327629969816, 3, 50), (0.5792283932295347, 3, 90), (0.5513365439047788, 4, 5), (0.5559334324706474, 4, 10), (0.5399528854351364, 4, 25), (0.5481885272816027, 4, 50), (0.571965700670769, 4, 90), (0.5634209805290122, 5, 5), (0.580354143784334, 5, 10), (0.5845561754555832, 5, 25), (0.5824880686543333, 5, 50), (0.593656957424263, 5, 90), (0.5514265111282504, 6, 5), (0.5548754321120832, 6, 10), (0.5711042846343574, 6, 25), (0.5788245600964348, 6, 50), (0.5733555932307303, 6, 90), (0.517466654488254, 7, 5), (0.5469307558281511, 7, 10), (0.547591222263191, 7, 25), (0.5640731714457059, 7, 50), (0.5449667855275393, 7, 90), (0.4992379884008261, 8, 5), (0.517661192790849, 8, 10), (0.5072267214898312, 8, 25), (0.539692653301569, 8, 50), (0.5247743472614333, 8, 90), (0.4987571846634131, 9, 5), (0.5179620719469966, 9, 10), (0.5236527851113115, 9, 25), (0.536168454269414, 9, 50), (0.5349806572323567, 9, 90)], [(0.5690731712939507, 0, 5), (0.5612189542577929, 0, 10), (0.5740439186706405, 0, 25), (0.576234683269052, 0, 50), (0.5817925588680203, 0, 90), (0.5775838363909404, 1, 5), (0.5719248471490392, 1, 10), (0.573732566904233, 1, 25), (0.5827063591658987, 1, 50), (0.5868459072551351, 1, 90), (0.5790601800032034, 2, 5), (0.5770919751946948, 2, 10), (0.5728929522241356, 2, 25), (0.5792705026730136, 2, 50), (0.5893088113764589, 2, 90), (0.5736190319877646, 3, 5), (0.5756987619704409, 3, 10), (0.5831398435332026, 3, 25), (0.5800391057881402, 3, 50), (0.5888215244003349, 3, 90), (0.5694745558513293, 4, 5), (0.5727471077466343, 4, 10), (0.5795074724420625, 4, 25), (0.5788317455796086, 4, 50), (0.5778670181661687, 4, 90), (0.5822439130718755, 5, 5), (0.6069271076378908, 5, 10), (0.6004860984181436, 5, 25), (0.5934852320415592, 5, 50), (0.5920069742572892, 5, 90), (0.5760991243671885, 6, 5), (0.5726372425893023, 6, 10), (0.5704977271730408, 6, 25), (0.6037334164105607, 6, 50), (0.5996871181959947, 6, 90), (0.5492024034587573, 7, 5), (0.543216146829633, 7, 10), (0.5538500012854053, 7, 25), (0.5750382791222607, 7, 50), (0.5723653547347778, 7, 90), (0.5216548870671832, 8, 5), (0.5444857409971939, 8, 10), (0.5278452745168168, 8, 25), (0.5452826196148453, 8, 50), (0.5574355881753135, 8, 90), (0.5148699350506994, 9, 5), (0.5466059657704806, 9, 10), (0.512872955295235, 9, 25), (0.5491108887045227, 9, 50), (0.5664044038479331, 9, 90)], [(0.554770173943866, 0, 5), (0.5680894622533437, 0, 10), (0.5710249839269915, 0, 25), (0.570669268590137, 0, 50), (0.5708144719664034, 0, 90), (0.5602843606128322, 1, 5), (0.5687000130781631, 1, 10), (0.5635465553473752, 1, 25), (0.565721458340422, 1, 50), (0.5814396912950707, 1, 90), (0.5612653072371557, 2, 5), (0.5601166276661611, 2, 10), (0.5668778191611719, 2, 25), (0.5683867759959343, 2, 50), (0.5850065764956783, 2, 90), (0.5653703981251791, 3, 5), (0.5622458207619893, 3, 10), (0.5648551435266416, 3, 25), (0.5699032021069081, 3, 50), (0.5843339443499673, 3, 90), (0.5620584811926106, 4, 5), (0.5635930768508417, 4, 10), (0.5526492166497516, 4, 25), (0.5686843203997365, 4, 50), (0.5852101262040553, 4, 90), (0.5804209089465837, 5, 5), (0.575643805157343, 5, 10), (0.5997006241035899, 5, 25), (0.5828146716922874, 5, 50), (0.6027993798486125, 5, 90), (0.5620509265420591, 6, 5), (0.5626811539937522, 6, 10), (0.5561381321183536, 6, 25), (0.5632414805523251, 6, 50), (0.5755826304944637, 6, 90), (0.5340435911325218, 7, 5), (0.5506495097099877, 7, 10), (0.5465635505908237, 7, 25), (0.5627190105992537, 7, 50), (0.5666966933860206, 7, 90), (0.4997780687182747, 8, 5), (0.5324347220500408, 8, 10), (0.5504806317312283, 8, 25), (0.5545968521657774, 8, 50), (0.564360981626576, 8, 90), (0.5031632569570922, 9, 5), (0.5290449759880886, 9, 10), (0.5448426619508594, 9, 25), (0.5588312460395962, 9, 50), (0.5568167017712876, 9, 90)]]}    
    # # fgr_r = np.hstack(results['fgr'])
    # # max_fgr = np.argmax(fgr_r[:,[0,3,6]].mean(axis=1))
    # # print(fgr_r[max_fgr])
    # # best_fgr = fgr_r[max_fgr][[1,2]]

    # print("Using the best ones, calculate:")
    # # print(best_cgl)
    # # print(best_fgl)
    # print(best_cgr)
    # # print(best_fgr)

    current_seed = 0
    for pwithc, pwithoutc in zip(paths_with_context, paths_without_context):
        current_seed += 1
        with open(pwithc, 'rb') as fin:
            data_with_context = pickle.load(fin)
        with open(pwithoutc, 'rb') as fin:
            data_without_context = pickle.load(fin)
        for dataset, best in zip(datasets, [best_cgl]):
            data = load_dataset_with_context_with_threshold(data_with_context, data_without_context, dataset, np.mean, best[1])
            train_k_above_threshold = np.array(data['train_k_above_threshold'])
            train_x_above_threshold = np.array(data['train_x_above_threshold'])
            train_y_above_threshold = np.array(data['train_y_above_threshold'])
            val_k_above_threshold = np.array(data['val_k_above_threshold'])
            val_x_above_threshold = np.array(data['val_x_above_threshold'])
            val_y_above_threshold = np.array(data['val_y_above_threshold'])
            test_k_above_threshold = np.array(data['test_k_above_threshold'])
            test_x_above_threshold = np.array(data['test_x_above_threshold'])
            test_y_above_threshold = np.array(data['test_y_above_threshold'])
            train_k_below_threshold = np.array(data['train_k_below_threshold'])
            train_x_below_threshold = np.array(data['train_x_below_threshold'])
            train_y_below_threshold = np.array(data['train_y_below_threshold'])
            val_k_below_threshold = np.array(data['val_k_below_threshold'])
            val_x_below_threshold = np.array(data['val_x_below_threshold'])
            val_y_below_threshold = np.array(data['val_y_below_threshold'])
            test_k_below_threshold = np.array(data['test_k_below_threshold'])
            test_x_below_threshold = np.array(data['test_x_below_threshold'])
            test_y_below_threshold = np.array(data['test_y_below_threshold'])
            init_seed2(current_seed)
            tx1 = np.hstack([train_x_above_threshold, np.zeros(train_x_above_threshold.shape), train_x_above_threshold])
            tx2 = np.hstack([train_x_below_threshold, train_x_below_threshold, np.zeros(train_x_below_threshold.shape)])
            train_x = np.vstack([tx1, tx2])
            train_y = np.hstack([train_y_above_threshold, train_y_below_threshold])
            classifier1 = clone(models[int(best[0])])
            # classifier2 = clone(models[int(best[0])])
            classifier1.fit(train_x, train_y)
            # classifier2.fit(train_x_below_threshold, train_y_below_threshold)     
            testx1 = np.hstack([test_x_above_threshold, np.zeros(test_x_above_threshold.shape), test_x_above_threshold])
            testx2 = np.hstack([test_x_below_threshold, test_x_below_threshold, np.zeros(test_x_below_threshold.shape)])
            test_x = np.vstack([test_x_above_threshold, test_x_below_threshold])
            test_y = np.hstack([test_y_above_threshold, test_y_below_threshold])
            # predicted_y = np.hstack([classifier1.predict(test_x_above_threshold), classifier2.predict(test_x_below_threshold)])
            predicted_y = classifier1.predict(test_x)
            f1 = f1_score(test_y, predicted_y, average='weighted')
            print(f"{current_seed} - {dataset} - {f1} - {best}")



def print_predictions(path, dataset):
    print(path)
    data = load_dataset_no_context(path, dataset)
    train_k = data['train_k']
    val_k = data['val_k']
    test_k = data['test_k']
    train_x = data['train_x']
    val_x = data['val_x']
    test_x = data['test_x']
    train_y = data['train_y']
    val_y = data['val_y']
    test_y = data['test_y']
    init_seed2(3)
    bm = clone(models[0])
    bm.fit(train_x, train_y)
    print(val_k)
    print(list(bm.predict(val_x)))
    print(val_y)
    print("\n\n")
    exit()


def analysis_on_predictions():
    mwes = ['company_commander', 'navy_commander', 'party_activist', 'bank_analyst', 'brokerage_analyst', 'company_attorney', 'defense_attorney', 'plaintiff_attorney', 'navy_diver', 'junta_force', 'board_investigator', 'navy_investigator', 'administration_lawyer', 'company_lawyer', 'industry_lawyer', 'plaintiff_lawyer', 'navy_pilot', 'company_representative', 'industry_representative', 'party_representative', 'player_representative', 'union_representative', 'airport_spokesman', 'association_spokesman', 'bank_spokesman', 'board_spokesman', 'campaign_spokesman', 'commission_spokesman', 'company_spokesman', 'embassy_spokesman', 'exchange_spokesman', 'industry_spokesman', 'labour_spokesman', 'league_spokesman', 'navy_spokesman', 'party_spokesman', 'school_teacher', 'bank_teller', 'industry_veteran', 'navy_veteran', 'broadcast_license', 'export_license', 'combat_plane', 'patrol_plane', 'spy_plane', 'dress_shirt', 'search_engine', 'search_dog', 'time_visitor', 'time_buyer', 'time_player', 'time_champion', 'loan_program', 'tax_program', 'agriculture_program', 'music_program', 'tourism_program', 'ocean_temperature', 'clock_speed', 'company_name', 'approval_rating', 'administration_cost', 'advertising_cost', 'cleanup_cost', 'commission_cost', 'defense_cost', 'depreciation_cost', 'fuel_cost', 'funding_cost', 'hospitalization_cost', 'interest_cost', 'investment_cost', 'labour_cost', 'maintenance_cost', 'management_cost', 'medicare_cost', 'pension_cost', 'processing_cost', 'production_cost', 'program_cost', 'repair_cost', 'severance_cost', 'trading_cost', 'training_cost', 'pension_rights', 'truth_commission', 'suntan_lotion', 'privacy_rights', 'breeding_pair', 'industry_association', 'production_association', 'rating_board', 'zoning_board', 'reservation_clerk', 'brokerage_commission', 'trading_commission', 'advertising_company', 'brokerage_company', 'dance_company', 'entertainment_company', 'exploration_company', 'factoring_company', 'fishing_company', 'industry_company', 'information_company', 'investment_company', 'machinery_company', 'maintenance_company', 'management_company', 'networking_company', 'printing_company', 'processing_company', 'production_company', 'rating_company', 'reinsurance_company', 'resource_company', 'retailing_company', 'storage_company', 'testing_company', 'trading_company', 'training_company', 'trucking_company', 'investment_corporation', 'entertainment_division', 'information_division', 'investment_division', 'management_division', 'production_division', 'section_division', 'trading_division', 'advertising_firm', 'clearing_firm', 'forecasting_firm', 'investment_firm', 'management_firm', 'outplacement_firm', 'rating_firm', 'trading_firm', 'trucking_firm', 'printing_house', 'trading_house', 'advertising_industry', 'brokerage_industry', 'fishing_industry', 'gambling_industry', 'information_industry', 'investment_industry', 'machinery_industry', 'management_industry', 'pension_industry', 'printing_industry', 'processing_industry', 'production_industry', 'retailing_industry', 'advertising_position', 'management_position', 'enforcement_chief', 'investment_bank', 'trading_bank', 'rating_bureaus', 'enforcement_activity', 'exploration_activity', 'investment_activity', 'lending_activity', 'management_activity', 'production_activity', 'redemption_activity', 'trading_activity', 'training_activity', 'abuse_charge', 'bribery_charge', 'corruption_charge', 'driving_charge', 'felony_charge', 'genocide_charge', 'graft_charge', 'interest_charge', 'management_charge', 'manslaughter_charge', 'robbery_charge', 'sex_charge', 'tax_charge', 'treason_charge', 'priority_program', 'star_defender', 'imitation_berry', 'computer_sensor', 'debtor_country', 'embassy_compound', 'export_earner', 'felony_driving', 'felony_murder', 'predecessor_company', 'president_emeritus', 'producer_country', 'semifinal_match', 'sister_company', 'sister_party', 'tanker_plane', 'brokerage_house', 'watershed_event', 'trading_abuse', 'dual-trading_abuse', 'software_company', 'software_firm', 'catalog_company', 'missile_division', 'supply_company', 'supply_house', 'supply_industry', 'beverage_company', 'computer_company', 'computer_division', 'computer_firm', 'computer_industry', 'cosmetic_company', 'drink_company', 'engine_company', 'fuel_company', 'gold_company', 'livestock_industry', 'lumber_company', 'package_company', 'petrochemical_company', 'securities_company', 'securities_firm', 'securities_house', 'semiconductor_company', 'semiconductor_division', 'semiconductor_industry', 'sex_industry', 'telephone_company', 'telephone_industry', 'timber_company', 'timber_industry', 'multimedia_company', 'music_company', 'music_division', 'music_industry', 'arms_company', 'art_company', 'art_house', 'tourism_industry', 'component_company', 'component_division', 'component_industry', 'specialty_company', 'card_company', 'chip_company', 'loan_company', 'heroin_ring', 'software_division', 'alcohol_industry', 'aluminium_industry', 'beverage_industry', 'cattle_industry', 'chip_industry', 'cosmetic_industry', 'footwear_industry', 'gold_industry', 'meat_industry', 'petrochemical_industry', 'software_industry', 'tea_industry', 'art_troupe', 'software_house', 'company_strategy', 'question_wording', 'currency_translation', 'league_lead', 'fuel_tax', 'alcohol_tax', 'export_tax', 'excise_tax', 'corporation_tax', 'wealth_tax', 'house_demolition', 'plant_closure', 'trading_halt', 'dog_slaughter', 'cost_cutting', 'production_cutback', 'investment_restriction', 'weight_restriction', 'export_restriction', 'fuel_leak', 'snow_shower', 'turkey_roaster', 'bank_reform', 'currency_reform', 'medicare_reform', 'school_reform', 'policy_reform', 'management_reform', 'tax_reform', 'campaign_reform', 'pension_reform', 'trade_reform', 'soil_conservation', 'wildlife_conservation', 'art_conservation', 'meat_consumption', 'fuel_consumption', 'alcohol_consumption', 'silver_consumption', 'alcohol_abuse', 'bank_robbery', 'tax_evaders', 'tourism_boycott', 'cancer_prevention', 'conflict_prevention', 'life_endangerment', 'museum_visitor', 'class_attendance', 'stock_trader', 'floor_trader', 'option_trader', 'gold_trader', 'currency_trader', 'future_trader', 'options_trader', 'futures_trader', 'livestock_trader', 'futures_trading', 'stock_trading', 'securities_trading', 'program_trading', 'currency_trading', 'dollar_trading', 'option_trading', 'future_broker', 'investment_broker', 'securities_broker', 'stock_broker', 'currency_swap', 'arms_trade', 'stock_trade', 'future_trade', 'productivity_improvement', 'policy_improvement', 'traffic_improvement', 'safety_improvement', 'efficiency_improvement', 'inventory_buildup', 'arms_buildup', 'information_processing', 'petrochemical_processing', 'aluminium_smelter', 'engine_repair', 'yen_appreciation', 'industry_growth', 'loan_growth', 'plant_growth', 'export_growth', 'investment_growth', 'production_growth', 'productivity_growth', 'deposit_growth', 'traffic_growth', 'growth_acceleration', 'diplomat_murder', 'livestock_mutilation', 'dog_poisoning', 'credibility_damage', 'fabric_damage', 'wildlife_damage', 'motor_damages', 'plane_damages', 'computer_controller', 'flight_controller', 'traffic_controller', 'bank_management', 'company_management', 'crisis_management', 'growth_management', 'hotel_management', 'information_management', 'inventory_management', 'investment_management', 'resource_management', 'stress_management', 'time_management', 'traffic_management', 'utilities_management', 'waste_management', 'wildlife_management', 'advertising_manager', 'airport_manager', 'bank_manager', 'campaign_manager', 'casino_manager', 'company_manager', 'computer_manager', 'division_manager', 'floor_manager', 'hedge_manager', 'house_manager', 'information_manager', 'investment_manager', 'line_manager', 'party_manager', 'pension_manager', 'plant_manager', 'production_manager', 'program_manager', 'resource_manager', 'restaurant_manager', 'shuttle_manager', 'station_manager', 'tax_manager', 'trading_manager', 'bank_regulator', 'safety_regulator', 'securities_regulator', 'bank_supervision', 'school_administration', 'tax_administration', 'policy_analysis', 'damage_assessment', 'policy_study', 'safety_study', 'retailing_analyst', 'future_analyst', 'investment_analyst', 'entertainment_analyst', 'chip_analyst', 'football_analyst', 'stock_analyst', 'livestock_analyst', 'defense_analyst', 'industry_analyst', 'policy_analyst', 'beverage_analyst', 'currency_analyst', 'securities_analyst', 'safety_investigator', 'turkey_sighting', 'art_appreciation', 'brain_stimulation', 'meat_chopper', 'waste_cleanup', 'room_cleanup', 'party_cleanup', 'hurricane_cleanup', 'snow_clearing', 'investment_guarantee', 'loan_guarantee', 'credibility_guarantee', 'occupancy_guarantee', 'pension_guarantee', 'return_guarantee', 'conflict_resolution', 'art_collector', 'tax_collector', 'corn_harvest', 'timber_harvest', 'corn_harvesting', 'chip_buyer', 'computer_buyer', 'dollar_buyer', 'stock_buyer', 'prescription_importation', 'pumpkin_importation', 'art_thief', 'currency_earner', 'history_teacher', 'design_teacher', 'kindergarten_teacher', 'music_teacher', 'math_teacher', 'art_teacher', 'tax_write-off', 'loan_write-off', 'tax_deferral', 'policy_illustration', 'specialty_retailing', 'grenade_explosion', 'program_coordinator', 'trails_coordinator', 'campaign_coordinator', 'policy_coordinator', 'flight_dispatcher', 'antelope_sighting', 'trumpet_player', 'music_player', 'aluminium_producer', 'cattle_producer', 'cocoa_producer', 'dairy_producer', 'entertainment_producer', 'gold_producer', 'livestock_producer', 'music_producer', 'software_producer', 'company_founder', 'component_supplier', 'software_supplier', 'music_publisher', 'newsletter_publisher', 'software_publisher', 'textbook_publisher', 'agriculture_production', 'alcohol_production', 'arms_production', 'broadcast_production', 'corn_production', 'gold_production', 'livestock_production', 'meat_production', 'opium_production', 'semiconductor_production', 'tea_production', 'timber_production', 'watch_production', 'card_dealing', 'arms_export', 'corn_export', 'software_export', 'tea_export', 'defense_planning', 'production_planning', 'war_planning', 'supply_disruption', 'traffic_disruption', 'music_fancier', 'tea_fancier', 'information_exchange', 'data_exchange', 'option_exchange', 'coin_exchange', 'apple_storage', 'cosmetic_saleswoman', 'teacher_training', 'time_warp', 'back_spasm', 'industry_consolidation', 'livestock_breeding', 'doubles_player', 'football_player', 'rugby_player', 'data_storage', 'cease-fire_violation', 'safety_violation', 'parole_violation', 'tax_violation', 'securities_violation', 'campaign_violation', 'traffic_violation', 'school_funding', 'school_aid', 'currency_rating', 'investment_rating', 'quarterback_rating', 'cancer_study', 'brain_study', 'alcohol_testing', 'aid_funding', 'art_funding', 'buy_order', 'closure_order', 'deportation_order', 'evacuation_order', 'sell_order', 'stop-loss_order', 'defense_order', 'engine_order', 'machinery_order', 'export_order', 'layout_description', 'ferry_reservation', 'restaurant_reservation', 'independence_celebration', 'holiday_celebration', 'anniversary_celebration', 'battalion_commander', 'combat_commander', 'division_commander', 'force_commander', 'shuttle_commander', 'tank_commander', 'school_governance', 'weather_forecasting', 'chip_design', 'computer_design', 'garden_design', 'plant_design', 'computer_breakdown', 'computer_malfunction', 'stock_picker', 'printer_announcement', 'resignation_announcement', 'arms_negotiation', 'traffic_negotiation', 'trade_negotiation', 'aid_proposal', 'arms_proposal', 'investment_proposal', 'management_proposal', 'policy_proposal', 'reform_proposal', 'tax_proposal', 'question_mark', 'corrosion_damage', 'drought_damage', 'hurricane_damage', 'weather_damage', 'monsoon_rain', 'combat_stress', 'weather_stress', 'tree_limb', 'protest_campaign', 'reform_campaign', 'art_complex', 'defense_complex', 'protest_demonstration', 'tourism_destination', 'defense_establishment', 'leisure_item', 'defense_lawyer', 'seat_license', 'growth_package', 'defense_plant', 'art_program', 'basketball_program', 'buy_program', 'cleanup_program', 'defense_program', 'exchange_program', 'export_program', 'flight_program', 'football_program', 'guarantee_program', 'policy_program', 'reform_school', 'hit_squad', 'broadcast_station', 'radio_station', 'art_supply', 'broadcast_rights', 'veto_rights', 'christian_commander', 'christian_pilgrim', 'deputy_attorney', 'deputy_chief', 'deputy_commander', 'deputy_coroner', 'deputy_manager', 'deputy_mayor', 'deputy_president', 'deputy_prosecutor', 'deputy_representative', 'deputy_spokesman', 'spy_chief', 'star_guard', 'star_performer', 'star_player', 'star_quarterback', 'star_receiver', 'woman_activist', 'woman_friend', 'woman_manager', 'woman_player', 'lead_attorney', 'lead_author', 'lead_investigator', 'lead_lawyer', 'lead_manager', 'lead_midway', 'lead_plaintiff', 'lead_prosecutor', 'adult_woman', 'gender_bias', 'dollar_worth', 'aid_campaign', 'aid_program', 'arms_program', 'missile_program', 'evacuation_flight', 'training_flight', 'entertainment_event', 'breeding_program', 'conservation_program', 'cooperation_program', 'dance_program', 'enforcement_program', 'entertainment_program', 'exploration_program', 'feeding_program', 'funding_program', 'immunization_program', 'improvement_program', 'investment_program', 'lending_program', 'maintenance_program', 'management_program', 'pension_program', 'prevention_program', 'production_program', 'stabilization_program', 'testing_program', 'training_program', 'vaccination_program', 'writing_program', 'immunization_campaign', 'reelection_campaign', 'training_seminar', 'speaking_engagement', 'training_mission', 'hotel_lobby', 'hotel_room', 'hotel_restaurant', 'hotel_suite', 'monster_burger', 'monster_hurricane', 'pillar_industry', 'package_deal', 'lump_sum', 'marquee_player', 'marquee_name', 'data_base', 'id_card', 'tax_package', 'aid_package', 'union_negotiation', 'policy_address', 'deportation_proceeding', 'divorce_proceeding', 'foreclosure_proceeding', 'extradition_proceeding', 'policy_meeting', 'strategy_meeting', 'campaign_consultant', 'computer_consultant', 'investment_consultant', 'defense_consultant', 'pension_consultant', 'design_consultant', 'industry_consultant', 'dog_journalist', 'music_journalist', 'bloc_country', 'fraternity_brother', 'minority_journalist', 'minority_party', 'minority_resident', 'minority_woman', 'party_colleague', 'party_elite', 'party_faction', 'party_faithful', 'union_miner', 'union_electrician', 'union_nationalist', 'program_activity', 'entertainment_field', 'petrochemical_complex', 'charm_offensive', 'computer_analysis', 'computer_analyst', 'computer_language', 'multimedia_presentation', 'multimedia_software', 'bidding_war', 'shuttle_diplomacy', 'faith_healer', 'breast_feeding', 'pig_farm', 'corn_field', 'grass_field', 'lumber_mill', 'pulp_mill', 'rumor_mill', 'chip_plant', 'corn_plant', 'engine_plant', 'fuel_plant', 'meat_plant', 'pesticide_plant', 'petrochemical_plant', 'plastic_plant', 'semiconductor_plant', 'uranium_plant', 'van_plant', 'apple_orchard', 'astronomy_mission', 'data_company', 'futures_industry', 'holiday_company', 'industry_study', 'analyst_projection', 'gang_activity', 'party_activity', 'school_activity', 'farm_production', 'company_reporting', 'administration_reservation', 'party_nomination', 'star_endorsement', 'company_announcement', 'board_approval', 'bank_guarantee', 'journalist_question', 'reader_question', 'administration_proposal', 'commission_proposal', 'company_proposal', 'analyst_meeting', 'association_meeting', 'board_meeting', 'commission_meeting', 'company_meeting', 'faculty_meeting', 'league_meeting', 'party_meeting', 'stockholder_meeting', 'minority_participation', 'bank_charge', 'tailpipe_emission', 'bank_lending', 'lawyer_contribution', 'company_contribution', 'acid_damage', 'acid_corrosion', 'acid_poisoning', 'alcohol_poisoning', 'alcohol_damage', 'agriculture_policy', 'aid_policy', 'asylum_policy', 'competition_policy', 'currency_policy', 'defense_policy', 'disclosure_policy', 'enforcement_policy', 'engagement_policy', 'export_policy', 'information_policy', 'investment_policy', 'labour_policy', 'lending_policy', 'life_policy', 'management_policy', 'minority_policy', 'pension_policy', 'privacy_policy', 'reform_policy', 'return_policy', 'tax_policy', 'trade_policy', 'cooperation_protocol', 'capital_requirement', 'reporting_requirement', 'brain_cancer', 'breast_cancer', 'brain_damage', 'nerve_damage', 'colon_cancer', 'prostate_cancer', 'brain_hemorrhage', 'ear_infection', 'arms_injury', 'back_injury', 'brain_injury', 'wrist_injury', 'engine_damage', 'currency_depreciation', 'growth_statistic', 'safety_legislation', 'campaign_legislation', 'tax_legislation', 'miles_southwest', 'miles_north', 'miles_west', 'miles_southeast', 'miles_km', 'meters_event', 'meters_relay', 'meters_final', 'km_southwest', 'km_southeast', 'km_north', 'km_section', 'km_west', 'malpractice_suit', 'damage_suit', 'class_suit', 'computer_program', 'investment_history', 'basketball_history', 'league_history', 'school_history', 'football_history', 'art_history', 'currency_crisis', 'fuel_crisis', 'funding_crisis', 'hostage_crisis', 'aid_crisis', 'missile_crisis', 'quarterback_situation', 'tax_situation', 'hostage_situation', 'school_tragedy', 'trade_conflict', 'trade_friction', 'sex_abuse', 'farm_waste', 'star_autograph', 'bank_loan', 'life_strategy', 'stock_company', 'program_strategy', 'policy_priority', 'cost_efficiency', 'fuel_efficiency', 'bunny_ear', 'dog_ear', 'dog_art', 'dog_episode', 'music_channel', 'entertainment_channel', 'history_museum', 'art_museum', 'investment_destination', 'division_match', 'deregulation_package', 'dance_party', 'breeding_stock', 'advertising_strategy', 'campaign_strategy', 'defense_strategy', 'export_strategy', 'growth_strategy', 'investment_strategy', 'management_strategy', 'production_strategy', 'trading_strategy', 'severance_package', 'computer_whiz', 'textbook_allowance', 'champagne_bottle', 'fuel_tank', 'propane_tank', 'production_line', 'doubles_champion', 'boxing_champion', 'division_champion', 'league_champion', 'basketball_star', 'tennis_star', 'football_star', 'porn_star', 'football_hero', 'administration_chief', 'bank_chief', 'campaign_chief', 'division_chief', 'navy_chief', 'party_chief', 'school_chief', 'section_chief', 'station_chief', 'battalion_chief', 'defense_chief', 'policy_chief', 'tax_chief', 'telephone_cord', 'piston_ring', 'tax_software', 'anniversary_party', 'coming-out_party', 'nose_guard', 'fuel_line', 'commuter_plane', 'aid_flight', 'independence_activist', 'rights_activist', 'file_cabinet', 'apple_bin', 'boiler_room', 'computer_room', 'weight_room', 'tax_lawyer', 'injury_lawyer', 'entertainment_lawyer', 'tax_attorney', 'telephone_card', 'defense_company', 'design_company', 'export_company', 'trade_company', 'accountancy_firm', 'analysis_firm', 'defense_firm', 'design_firm', 'search_firm', 'exchange_house', 'agriculture_industry', 'broadcast_industry', 'defense_industry', 'export_industry', 'study_commission', 'design_house', 'shrub_wetland', 'loan_package', 'multimedia_package', 'data_bank', 'tent_camp', 'semiconductor_chip', 'champagne_cork', 'missile_frigate', 'missile_submarine', 'missile_base', 'computer_station', 'missile_complex', 'hotel_complex', 'snow_country', 'computer_textbook', 'fact_sheet', 'information_sheet', 'policy_document', 'strategy_document', 'loan_document', 'computer_data', 'computer_information', 'computer_software', 'time_difference', 'back_bench', 'back_seat', 'back_side', 'board_seat', 'courtside_seat', 'exchange_activity', 'floor_broker', 'garden_party', 'lawn_bowling', 'northeast_shuttle', 'sidewalk_cafe', 'tailgate_party', 'Sen._Baker', 'General_Lee', 'Sergeant_Thomas', 'Sgt._Silverstein', 'Sen._Rockefeller', 'Miss_Manning', 'Colonel_Samson', 'dollar_program', 'dollar_coin', 'dollar_package', 'dollar_loan', 'dollar_deal', 'dollar_cost', 'dollar_position', 'dollar_deposit', 'hippie_house', 'minority_firm', 'collector_item', 'apple_species', 'fauna_species', 'ladybug_species', 'yeast_species', 'plant_species', 'math_class', 'art_class', 'music_class', 'aerobics_class', 'computer_class', 'training_class', 'dance_class', 'history_class', 'study_class', 'investment_seminar', 'toilet_training', 'management_training', 'art_school', 'flight_school', 'divinity_school', 'journalism_school', 'traffic_school', 'management_school', 'christian_heartland', 'nature_preserve', 'exchange_floor', 'tree_bark', 'offseason_program', 'peacetime_growth', 'evening_thunderstorm', 'evening_party', 'evening_class', 'evening_program', 'evening_meeting', 'evening_newscast', 'holiday_party', 'holiday_spirit', 'holiday_destination', 'kickoff_return', 'night_spot', 'night_meeting', 'night_football', 'night_match', 'night_party', 'night_flight', 'night_class', 'night_life', 'night_crawler', 'night_guard', 'overtime_win', 'wedding_vow', 'weekend_meeting', 'weekend_edition', 'weekend_rain', 'weekend_warrior', 'yesterday_evening', 'night_manager', 'evening_manager', 'approval_procedure', 'enforcement_procedure', 'testing_procedure', 'enforcement_resource', 'snow_amount', 'party_concentration', 'rainfall_total', 'redemption_amount', 'growth_projection', 'stock_speculator', 'currency_speculator', 'investment_capital', 'quarterback_controversy', 'industry_controversy', 'investment_information', 'management_information', 'exchange_information', 'traffic_information', 'safety_information', 'defense_information', 'flight_information', 'design_information', 'tax_information', 'assessment_information', 'production_data', 'flight_data', 'industry_data', 'stock-market_data', 'census_data', 'outpatient_data', 'industry_newsletter', 'investment_newsletter', 'history_textbook', 'investment_literature', 'basketball_poll', 'minute_flight', 'minute_meeting', 'minute_address', 'minute_segment', 'minute_program', 'minute_match', 'minute_stretch', 'minute_mark', 'telephone_meeting', 'telephone_message', 'telephone_poll', 'telephone_threat', 'lead_paint', 'dirt_floor', 'fuel_rod', 'fuel_supply', 'marble_floor', 'plastic_bag', 'plastic_glove', 'plastic_pencil', 'canvas_bag', 'rubber_band', 'rubber_solution', 'clay_pot', 'stone_tablet', 'brass_mouthpiece', 'gold_coin', 'gold_deposit', 'gold_ring', 'gold_watch', 'brass_ring', 'uranium_fuel', 'rye_sourdough', 'meat_sauce', 'gooseberry_fool', 'oat_bran', 'tomato_sauce', 'wool_suit', 'camouflage_uniform', 'velvet_sombrero', 'velvet_jumper', 'velvet_ribbon', 'velvet_tapestry', 'velvet_necktie', 'velvet_cape', 'velvet_turban', 'foodstuff_stock', 'freshwater_stock', 'waste_deposit', 'tar_spot', 'compost_pile', 'fiber_line', 'grease_mark', 'latex_glove', 'semiconductor_wafer', 'software_package', 'software_program', 'alcohol_content', 'tanker_spill', 'vulture_shit', 'navy_plane', 'cube_chair', 'workplace_bias', 'airport_explosion', 'battlefield_explosion', 'armory_explosion', 'school_massacre', 'school_supply', 'school_textbook', 'school_uniform', 'laboratory_analysis', 'laboratory_study', 'laboratory_testing', 'house_arrest', 'house_party', 'house_plant', 'tank_division', 'tank_battalion', 'room_temperature', 'lightning_speed', 'christian_belief', 'flight_safety', 'school_safety', 'traffic_safety', 'currency_stability', 'analyst_credibility', 'dollar_weakness', 'company_weakness', 'production_efficiency', 'bank_secrecy', 'labour_productivity', 'analyst_independence', 'telephone_redemption', 'computer_component', 'engine_component', 'missile_component', 'shirt_sleeve', 'order_backlog', 'spy_ring', 'christian_sect', 'christian_minority', 'christian_force', 'arms_shipment', 'twig_bundle', 'cookie_line', 'dairy_industry', 'hotel_industry', 'railroad_industry', 'railway_industry', 'restaurant_industry', 'arms_cache', 'computer_line', 'sabotage_campaign', 'vaccination_campaign', 'growth_spurt', 'player_association', 'minority_cadre', 'computer_inventory', 'arms_supply', 'data_traffic', 'tanker_traffic', 'telephone_traffic', 'currency_exposure', 'lead_exposure', 'loan_exposure', 'sun_exposure', 'safety_threat', 'gambling_addiction', 'poll_respondent', 'campaign_activity', 'celebration_activity', 'combat_activity', 'export_activity', 'tourism_activity', 'return_flight', 'combat_force', 'combat_formation', 'reform_package', 'study_program', 'gold_futures', 'currency_futures', 'cattle_futures', 'trading_futures', 'oat_futures', 'stock_futures', 'corn_futures', 'meat_futures', 'cocoa_futures', 'livestock_futures', 'win_bet', 'language_certificate', 'tea_forum', 'country_stylist', 'country_inn', 'field_commander', 'field_manager', 'field_representative', 'field_study', 'ocean_fishing', 'ocean_wave', 'river_bank', 'river_traffic', 'whitewater_raft', 'semiconductor_stock', 'resource_stock', 'line_stock', 'loan_stock', 'brewery_stock', 'section_stock', 'bank_stock', 'brokerage_stock', 'gold_stock', 'retailing_stock', 'producer_stock', 'computer_stock', 'timber_stock', 'capital_stock', 'union_faction', 'enforcement_mechanism', 'funding_mechanism', 'management_mechanism', 'safety_defect', 'basketball_camp', 'football_league', 'rugby_league', 'music_room', 'heat_stroke', 'love_triangle', 'trade_secret', 'growth_stock', 'bean_counter', 'pencil_pusher', 'fountain_pen', 'warp_speed', 'penny_stock', 'life_force', 'clock_tick', 'acne_marks', 'currency_board', 'parole_board', 'policy_board', 'safety_board', 'bank_board', 'company_board', 'management_board', 'school_board', 'aid_commission', 'safety_commission', 'motor_nerve', 'billboard_company', 'sweepstake_company', 'football_association', 'missile_threat', 'murder_threat', 'veto_threat', 'veto_message', 'defense_field', 'relay_station', 'party_school', 'tweed_schoolgirl', 'turboprop_plane', 'brokerage_license', 'underwear_fetishism', 'railroad_enthusiast', 'gallon_spill', 'gallon_drum', 'gallon_tank', 'litre_engine', 'tablespoons_flour', 'catastrophe_aid', 'missile_defense', 'war_backlash', 'tick_collar', 'meningitis_inoculation', 'alcohol_program', 'trade_barrier', 'drought_aid', 'arbitration_agreement', 'armistice_agreement', 'association_agreement', 'autonomy_agreement', 'cease-fire_agreement', 'consent_agreement', 'cooperation_agreement', 'defense_agreement', 'exchange_agreement', 'extradition_agreement', 'fishing_agreement', 'investment_agreement', 'lease_agreement', 'lending_agreement', 'license_agreement', 'loan_agreement', 'management_agreement', 'option_agreement', 'outline_agreement', 'production_agreement', 'semiconductor_agreement', 'severance_agreement', 'side_agreement', 'supply_agreement', 'swap_agreement', 'trade_agreement', 'cooperation_deal', 'endorsement_deal', 'export_deal', 'investment_deal', 'missile_deal', 'production_deal', 'swap_deal', 'trade_deal', 'cease-fire_resolution', 'censure_resolution', 'board_matter', 'bank_document', 'campaign_plane', 'campaign_literature', 'company_policy', 'company_information', 'company_stock', 'company_pension', 'company_document', 'party_constitution', 'party_program', 'athletics_competition', 'gymnastics_competition', 'doubles_event', 'sprint_event', 'tennis_event', 'basketball_final', 'doubles_final', 'tennis_final', 'doubles_match', 'football_match', 'tennis_match', 'doubles_semifinal', 'tax_dollar', 'funeral_expense', 'room_charge', 'dog_house', 'minority_program', 'charity_event', 'bank_company', 'laptop_computer', 'mainframe_computer', 'patrol_duty', 'christian_faith', 'diesel_fuel', 'barbecue_grill', 'roundtable_meeting', 'capri_pants', 'guard_position', 'priority_position', 'quarterback_position', 'information_resource', 'wildlife_resource', 'cypress_tree', 'eucalyptus_tree', 'plant_tree', 'redwood_tree', 'Marsha_Baker', 'Victor_Adler', 'Vladimir_Aristide', 'Reggie_Nikov', 'Byron_James', 'Jorge_Peter', 'Bonnie_Blumenthal', 'pasta_sauce', 'cookie_dough', 'apple_tree', 'coconut_tree', 'cookie_sheet', 'casino_company', 'dairy_company', 'hotel_company', 'restaurant_company', 'brokerage_firm', 'ferry_company', 'railroad_company', 'railway_company', 'top-10_finish', 'intensity_rain', 'crude_exploration', 'hurricane_watch', 'analyst_stress', 'class_harlot', 'party_mouthpiece', 'telephone_mouthpiece', 'salmon_sperm', 'roster_spot', 'computer_chip', 'growth_trend', 'interestrate_trend', 'flight_schedule', 'pitching_rotation', 'diesel_locomotive', 'diesel_motor', 'chimney_dirt', 'helmet_camera', 'crunch_time', 'broadcast_time', 'computer_time', 'duty_time', 'flight_time', 'injury_time', 'production_time', 'harvest_time', 'payback_time', 'playing_time', 'advertising_time', 'love_life', 'sex_life', 'sun_life', 'tax_return', 'siege_mentality', 'life_activity', 'campaign_commercial', 'feeding_frenzy', 'cattle_epidemic', 'telephone_line', 'return_engagement', 'growth_company', 'management_infighting', 'hit_inning', 'interest_firm', 'learning_curve', 'campaign_contribution', 'pension_contribution', 'campaign_loan', 'awareness_campaign', 'awareness_program', 'beauty_aid', 'literacy_program', 'safety_procedure', 'safety_program', 'shuttle_mission', 'shuttle_flight', 'wedding_chapel', 'fabrication_plant', 'printing_plant', 'processing_plant', 'production_plant', 'briefing_room', 'meeting_room', 'trading_room', 'training_room', 'switching_station', 'playing_surface', 'training_camp', 'testing_laboratory', 'training_academy', 'breeding_farm', 'entertainment_complex', 'chief_monk', 'chief_diplomat', 'chief_monitor', 'chief_deputy', 'chief_mediator', 'chief_commander', 'chief_judge', 'chief_procurator', 'chief_correspondent', 'chief_hostage', 'mainstream_faction', 'mainstream_culture', 'tax_matter', 'policy_matter', 'defense_matter', 'tax_question', 'improvement_question', 'safety_question', 'policy_question', 'boxing_license', 'storage_bin', 'trading_desk', 'training_manual', 'advertising_slogan', 'playing_card', 'bathing_suit', 'flight_suit', 'feeding_tube', 'management_software', 'networking_software', 'reform_legislation', 'salmon_fishing', 'catfish_fisherman', 'tuna_fisherman', 'school_playground', 'comeback_attempt', 'escape_attempt', 'recall_campaign', 'smear_campaign', 'reform_program', 'robbery_attempt', 'administration_policy', 'party_policy', 'school_policy', 'history_major']
    predictions = ['EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'OBJECTIVE', 'EMPLOYER', 'OBJECTIVE', 'OBJECTIVE', 'MEANS', 'OWNER-USER', 'OBJECTIVE', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EQUATIVE', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'TOPIC', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'OTHER', 'MEANS', 'TOPIC', 'LEXICALIZED', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'CREATOR-PROVIDER-CAUSE_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'CREATOR-PROVIDER-CAUSE_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'TOPIC', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OBJECTIVE', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'ORGANIZE&SUPERVISE&AUTHORITY', 'EMPLOYER', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EMPLOYER', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'WHOLE+PART_OR_MEMBER_OF', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PURPOSE', 'PERFORM&ENGAGE_IN', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'OBJECTIVE', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'WHOLE+PART_OR_MEMBER_OF', 'OBJECTIVE', 'OBJECTIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'PERFORM&ENGAGE_IN', 'OWNER-USER', 'LEXICALIZED', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'LOCATION', 'OBJECTIVE', 'OTHER', 'JUSTIFICATION', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'OTHER', 'OWNER-USER', 'OWNER-USER', 'EQUATIVE', 'OBJECTIVE', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'OBJECTIVE', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'TOPIC', 'PERFORM&ENGAGE_IN', 'OTHER', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OWNER-USER', 'CREATE-PROVIDE-GENERATE-SELL', 'EQUATIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PURPOSE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'WHOLE+PART_OR_MEMBER_OF', 'OTHER', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'ADJ-LIKE_NOUN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PURPOSE', 'TOPIC', 'OBJECTIVE', 'OTHER', 'CREATE-PROVIDE-GENERATE-SELL', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'PURPOSE', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBJECT', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'TOPIC', 'OBJECTIVE', 'WHOLE+PART_OR_MEMBER_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'SUBJECT', 'OBJECTIVE', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'TIME-OF1', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'SUBJECT', 'OBJECTIVE', 'TOPIC', 'TOPIC_OF_EXPERT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC_OF_EXPERT', 'TOPIC_OF_EXPERT', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'TIME-OF1', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'EMPLOYER', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'TIME-OF1', 'LOCATION', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'MEANS', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'MEANS', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PURPOSE', 'LOCATION', 'OBJECTIVE', 'LOCATION', 'LOCATION', 'OTHER', 'OBJECTIVE', 'OTHER', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'TOPIC', 'OWNER-USER', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'CREATE-PROVIDE-GENERATE-SELL', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'TOPIC', 'PERFORM&ENGAGE_IN', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'PERFORM&ENGAGE_IN', 'ADJ-LIKE_NOUN', 'EQUATIVE', 'EQUATIVE', 'LOCATION', 'MEANS', 'OBJECTIVE', 'LOCATION', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'OTHER', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OTHER', 'TOPIC', 'PERFORM&ENGAGE_IN', 'OTHER', 'OTHER', 'SUBJECT', 'EQUATIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'SUBJECT', 'LOCATION', 'LOCATION', 'LOCATION', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'USER_RECIPIENT', 'OBJECTIVE', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'SUBJECT', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EMPLOYER', 'OBJECTIVE', 'EQUATIVE', 'EQUATIVE', 'EMPLOYER', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'OWNER-USER', 'OBJECTIVE', 'ADJ-LIKE_NOUN', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'EQUATIVE', 'OBJECTIVE', 'TIME-OF1', 'EQUATIVE', 'OBJECTIVE', 'EQUATIVE', 'OBJECTIVE', 'MEASURE', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TOPIC', 'PERFORM&ENGAGE_IN', 'LOCATION', 'LOCATION', 'USER_RECIPIENT', 'LOCATION', 'WHOLE+PART_OR_MEMBER_OF', 'EQUATIVE', 'ADJ-LIKE_NOUN', 'TOPIC', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LOCATION', 'LOCATION', 'EQUATIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PERFORM&ENGAGE_IN', 'OTHER', 'TOPIC', 'EQUATIVE', 'TOPIC', 'SUBJECT', 'EQUATIVE', 'TOPIC', 'TOPIC', 'OBJECTIVE', 'TOPIC_OF_EXPERT', 'OBJECTIVE', 'TOPIC_OF_EXPERT', 'EMPLOYER', 'OBJECTIVE', 'EMPLOYER', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'EQUATIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'EQUATIVE', 'EQUATIVE', 'WHOLE+PART_OR_MEMBER_OF', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'WHOLE+PART_OR_MEMBER_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBSTANCE-MATERIAL-INGREDIENT', 'CREATE-PROVIDE-GENERATE-SELL', 'OBJECTIVE', 'TOPIC_OF_EXPERT', 'EQUATIVE', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'OTHER', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'LOCATION', 'OBTAIN&ACCESS&SEEK', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CONTAIN', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CONTAIN', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'SUBJECT', 'PERFORM&ENGAGE_IN', 'SUBJECT', 'TOPIC', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'SUBJECT', 'OTHER', 'OTHER', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'SUBJECT', 'OTHER', 'OTHER', 'SUBJECT', 'SUBJECT', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'TOPIC', 'OTHER', 'SUBJECT', 'SUBJECT', 'TOPIC', 'TOPIC', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'OTHER', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'SUBJECT', 'TOPIC', 'TOPIC', 'OTHER', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'EQUATIVE', 'EQUATIVE', 'LOCATION', 'MITIGATE&OPPOSE', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'TOPIC', 'SUBJECT', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'OTHER', 'MITIGATE&OPPOSE', 'OTHER', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'OTHER', 'OTHER', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OTHER', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'TOPIC', 'EQUATIVE', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'TOPIC', 'OBJECTIVE', 'EXPERIENCER-OF-EXPERIENCE', 'LOCATION', 'OWNER-USER', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'OTHER', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'WHOLE+PART_OR_MEMBER_OF', 'OBJECTIVE', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'LOCATION', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'TOPIC', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'TOPIC', 'OTHER', 'LEXICALIZED', 'PURPOSE', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OBJECTIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'OTHER', 'EMPLOYER', 'OBJECTIVE', 'TIME-OF1', 'TOPIC', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'WHOLE+PART_OR_MEMBER_OF', 'OBJECTIVE', 'EQUATIVE', 'EQUATIVE', 'ORGANIZE&SUPERVISE&AUTHORITY', 'OBJECTIVE', 'LOCATION', 'PURPOSE', 'OBJECTIVE', 'TIME-OF1', 'EQUATIVE', 'OWNER-USER', 'PURPOSE', 'LOCATION', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'LOCATION', 'LOCATION', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OTHER', 'EQUATIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'PURPOSE', 'PERFORM&ENGAGE_IN', 'WHOLE+PART_OR_MEMBER_OF', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'EQUATIVE', 'MEANS', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'TOPIC', 'CREATE-PROVIDE-GENERATE-SELL', 'RELATIONAL-NOUN-COMPLEMENT', 'EQUATIVE', 'OTHER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'TOPIC', 'TOPIC', 'TOPIC', 'OTHER', 'TOPIC', 'TOPIC', 'CREATE-PROVIDE-GENERATE-SELL', 'OTHER', 'LOCATION', 'PERFORM&ENGAGE_IN', 'LOCATION', 'OBJECTIVE', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'PERFORM&ENGAGE_IN', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'MEASURE', 'OWNER-USER', 'WHOLE+PART_OR_MEMBER_OF', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'EQUATIVE', 'TOPIC', 'TOPIC', 'TOPIC', 'MEASURE', 'CONTAIN', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'LOCATION', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OWNER-USER', 'CONTAIN', 'OBJECTIVE', 'LOCATION', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'USER_RECIPIENT', 'TIME-OF1', 'MEASURE', 'OTHER', 'OTHER', 'LOCATION', 'TIME-OF1', 'TIME-OF1', 'MEASURE', 'TIME-OF1', 'MEANS', 'RELATIONAL-NOUN-COMPLEMENT', 'TIME-OF1', 'OWNER-USER', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATOR-PROVIDER-CAUSE_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'SUBJECT', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'TOPIC', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'OBJECTIVE', 'TOPIC', 'SUBJECT', 'EQUATIVE', 'TOPIC', 'PERFORM&ENGAGE_IN', 'TOPIC', 'TOPIC', 'OTHER', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'OBJECTIVE', 'TOPIC', 'SUBJECT', 'TOPIC', 'OBJECTIVE', 'LOCATION', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'LOCATION', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'PERFORM&ENGAGE_IN', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LOCATION', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OWNER-USER', 'MEASURE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LEXICALIZED', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'TOPIC', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LEXICALIZED', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LEXICALIZED', 'SUBSTANCE-MATERIAL-INGREDIENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'LOCATION', 'SUBSTANCE-MATERIAL-INGREDIENT', 'PURPOSE', 'EQUATIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OWNER-USER', 'EQUATIVE', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'OTHER', 'LOCATION', 'LOCATION', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'SUBJECT', 'OBJECTIVE', 'LOCATION', 'OBJECTIVE', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'MEASURE', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'OBJECTIVE', 'OTHER', 'OBJECTIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'WHOLE+PART_OR_MEMBER_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'TOPIC', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'WHOLE+PART_OR_MEMBER_OF', 'OWNER-USER', 'OBJECTIVE', 'WHOLE+PART_OR_MEMBER_OF', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'LOCATION', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'MEASURE', 'EQUATIVE', 'EQUATIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PURPOSE', 'OBJECTIVE', 'OBJECTIVE', 'MEASURE', 'OBJECTIVE', 'LOCATION', 'TOPIC', 'OTHER', 'SUBJECT', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OBJECTIVE', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TIME-OF1', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'OBJECTIVE', 'TIME-OF1', 'OBJECTIVE', 'TIME-OF1', 'OBJECTIVE', 'TIME-OF1', 'OBJECTIVE', 'OBJECTIVE', 'TOPIC', 'SUBJECT', 'RELATIONAL-NOUN-COMPLEMENT', 'USER_RECIPIENT', 'LOCATION', 'OBJECTIVE', 'LOCATION', 'PERFORM&ENGAGE_IN', 'LOCATION', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'LOCATION', 'OBJECTIVE', 'EQUATIVE', 'PURPOSE', 'RELATIONAL-NOUN-COMPLEMENT', 'PURPOSE', 'OBJECTIVE', 'OBJECTIVE', 'PURPOSE', 'OBJECTIVE', 'PURPOSE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'LOCATION', 'EQUATIVE', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'ORGANIZE&SUPERVISE&AUTHORITY', 'PERFORM&ENGAGE_IN', 'LOCATION', 'TOPIC', 'OTHER', 'OBJECTIVE', 'LEXICALIZED', 'MEANS', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OBJECTIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'TOPIC', 'ORGANIZE&SUPERVISE&AUTHORITY', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'WHOLE+PART_OR_MEMBER_OF', 'EMPLOYER', 'PERFORM&ENGAGE_IN', 'EMPLOYER', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'LOCATION', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'ORGANIZE&SUPERVISE&AUTHORITY', 'TOPIC', 'TOPIC', 'TOPIC', 'SUBJECT', 'CREATE-PROVIDE-GENERATE-SELL', 'EQUATIVE', 'OWNER-USER', 'LOCATION', 'PURPOSE', 'PERFORM&ENGAGE_IN', 'LEXICALIZED', 'OBJECTIVE', 'MEASURE', 'MEASURE', 'MEASURE', 'PURPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'MITIGATE&OPPOSE', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBJECT', 'PARTIAL_ATTRIBUTE_TRANSFER', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'MITIGATE&OPPOSE', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'OTHER', 'OBJECTIVE', 'LOCATION', 'TIME-OF1', 'SUBJECT', 'SUBJECT', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'OWNER-USER', 'OWNER-USER', 'SUBJECT', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'OTHER', 'OTHER', 'EQUATIVE', 'OWNER-USER', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'WHOLE+PART_OR_MEMBER_OF', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'OTHER', 'OTHER', 'LOCATION', 'OWNER-USER', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATE-PROVIDE-GENERATE-SELL', 'SUBJECT', 'OWNER-USER', 'OWNER-USER', 'EQUATIVE', 'EQUATIVE', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'WHOLE+PART_OR_MEMBER_OF', 'LOCATION', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'CREATE-PROVIDE-GENERATE-SELL', 'WHOLE+PART_OR_MEMBER_OF', 'SUBSTANCE-MATERIAL-INGREDIENT', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'LOCATION', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'EQUATIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'OBJECTIVE', 'OBJECTIVE', 'LOCATION', 'OTHER', 'WHOLE+PART_OR_MEMBER_OF', 'LOCATION', 'EQUATIVE', 'TIME-OF1', 'CREATE-PROVIDE-GENERATE-SELL', 'OBJECTIVE', 'SUBJECT', 'TOPIC', 'OBJECTIVE', 'PURPOSE', 'PURPOSE', 'SUBSTANCE-MATERIAL-INGREDIENT', 'OTHER', 'RELATIONAL-NOUN-COMPLEMENT', 'TIME-OF1', 'RELATIONAL-NOUN-COMPLEMENT', 'TIME-OF1', 'RELATIONAL-NOUN-COMPLEMENT', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OBJECTIVE', 'MEANS', 'OBJECTIVE', 'TIME-OF1', 'OBJECTIVE', 'SUBJECT', 'CREATE-PROVIDE-GENERATE-SELL', 'TIME-OF1', 'OBJECTIVE', 'OBJECTIVE', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'OTHER', 'OTHER', 'OTHER', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'LOCATION', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'OTHER', 'OWNER-USER', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'CREATE-PROVIDE-GENERATE-SELL', 'LOCATION', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EMPLOYER', 'EQUATIVE', 'WHOLE+PART_OR_MEMBER_OF', 'ADJ-LIKE_NOUN', 'CREATOR-PROVIDER-CAUSE_OF', 'TOPIC', 'TOPIC', 'SUBJECT', 'EQUATIVE', 'OBJECTIVE', 'TOPIC', 'ORGANIZE&SUPERVISE&AUTHORITY', 'EQUATIVE', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'PERFORM&ENGAGE_IN', 'TIME-OF1', 'EQUATIVE', 'TIME-OF1', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PERFORM&ENGAGE_IN', 'OBTAIN&ACCESS&SEEK', 'SUBJECT', 'SUBJECT', 'LOCATION', 'TIME-OF1']
    gold = ['EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'EMPLOYER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'EXPERIENCER-OF-EXPERIENCE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'OBJECTIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'OTHER', 'OTHER', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'PARTIAL_ATTRIBUTE_TRANSFER', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'OTHER', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'SUBJECT', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'SUBJECT', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'OTHER', 'OTHER', 'OTHER', 'USER_RECIPIENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'JUSTIFICATION', 'TOPIC_OF_EXPERT', 'OBTAIN&ACCESS&SEEK', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'PERFORM&ENGAGE_IN', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'PURPOSE', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OBTAIN&ACCESS&SEEK', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'CONTAIN', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'LOCATION', 'LOCATION', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'PERSONAL_TITLE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'USER_RECIPIENT', 'USER_RECIPIENT', 'USER_RECIPIENT', 'VARIETY&GENUS_OF', 'VARIETY&GENUS_OF', 'VARIETY&GENUS_OF', 'VARIETY&GENUS_OF', 'VARIETY&GENUS_OF', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'CONTAIN', 'CONTAIN', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'TIME-OF1', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'AMOUNT-OF', 'AMOUNT-OF', 'AMOUNT-OF', 'AMOUNT-OF', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEANS', 'MEANS', 'MEANS', 'MEANS', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBSTANCE-MATERIAL-INGREDIENT', 'SUBJECT', 'SUBJECT', 'OWNER-USER', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'MEANS', 'MEANS', 'WHOLE+ATTRIBUTE&FEATURE&QUALITY_VALUE_IS_CHARACTERISTIC_OF', 'WHOLE+ATTRIBUTE&FEATURE&QUALITY_VALUE_IS_CHARACTERISTIC_OF', 'WHOLE+ATTRIBUTE&FEATURE&QUALITY_VALUE_IS_CHARACTERISTIC_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'MEANS', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'PART&MEMBER_OF_COLLECTION&CONFIG&SERIES', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'LOCATION', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'WHOLE+PART_OR_MEMBER_OF', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'LEXICALIZED', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'ORGANIZE&SUPERVISE&AUTHORITY', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'OTHER', 'PERFORM&ENGAGE_IN', 'TOPIC_OF_COGNITION&EMOTION', 'TOPIC_OF_COGNITION&EMOTION', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MEASURE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'MITIGATE&OPPOSE', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'CREATOR-PROVIDER-CAUSE_OF', 'USER_RECIPIENT', 'USER_RECIPIENT', 'USER_RECIPIENT', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'EQUATIVE', 'PERSONAL_NAME', 'PERSONAL_NAME', 'PERSONAL_NAME', 'PERSONAL_NAME', 'PERSONAL_NAME', 'PERSONAL_NAME', 'PERSONAL_NAME', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'OWNER-USER', 'MEASURE', 'MEASURE', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'EXPERIENCER-OF-EXPERIENCE', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'WHOLE+PART_OR_MEMBER_OF', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'RELATIONAL-NOUN-COMPLEMENT', 'MEANS', 'MEANS', 'LOCATION', 'LOCATION', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'TIME-OF2', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'OTHER', 'RELATIONAL-NOUN-COMPLEMENT', 'USER_RECIPIENT', 'USER_RECIPIENT', 'USER_RECIPIENT', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'CREATE-PROVIDE-GENERATE-SELL', 'MEANS', 'MEANS', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'ADJ-LIKE_NOUN', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'TOPIC', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'OBTAIN&ACCESS&SEEK', 'LOCATION', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'PERFORM&ENGAGE_IN', 'OTHER', 'OTHER', 'OTHER', 'OTHER']



def bootstrap_test_cgl():
    m1 = ['owner_emp_use', 'objective', 'owner_emp_use', 'owner_emp_use', 'objective', 'owner_emp_use', 'owner_emp_use', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'objective', 'other', 'purpose', 'objective', 'purpose', 'purpose', 'complement', 'complement', 'complement', 'complement', 'purpose', 'purpose', 'purpose', 'owner_emp_use', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'objective', 'owner_emp_use', 'purpose', 'purpose', 'purpose', 'objective', 'attribute', 'containment', 'attribute', 'attribute', 'loc_part_whole', 'containment', 'complement', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'purpose', 'containment', 'topical', 'attribute', 'topical', 'attribute', 'attribute', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'owner_emp_use', 'objective', 'purpose', 'purpose', 'purpose', 'complement', 'causal', 'objective', 'objective', 'purpose', 'containment', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'objective', 'objective', 'topical', 'loc_part_whole', 'loc_part_whole', 'objective', 'purpose', 'objective', 'objective', 'purpose', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'complement', 'objective', 'objective', 'causal', 'causal', 'causal', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'purpose', 'loc_part_whole', 'objective', 'objective', 'objective', 'objective', 'objective', 'complement', 'attribute', 'objective', 'causal', 'objective', 'causal', 'objective', 'objective', 'objective', 'objective', 'purpose', 'objective', 'attribute', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'causal', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'topical', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'loc_part_whole', 'objective', 'objective', 'loc_part_whole', 'causal', 'other', 'purpose', 'topical', 'topical', 'objective', 'objective', 'causal', 'objective', 'objective', 'objective', 'causal', 'complement', 'objective', 'objective', 'objective', 'objective', 'purpose', 'objective', 'loc_part_whole', 'loc_part_whole', 'causal', 'topical', 'objective', 'objective', 'objective', 'causal', 'causal', 'causal', 'loc_part_whole', 'complement', 'purpose', 'purpose', 'topical', 'purpose', 'purpose', 'purpose', 'topical', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'owner_emp_use', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'objective', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'purpose', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'time', 'purpose', 'purpose', 'purpose', 'purpose', 'containment', 'containment', 'objective', 'purpose', 'other', 'purpose', 'topical', 'owner_emp_use', 'containment', 'owner_emp_use', 'purpose', 'purpose', 'purpose', 'containment', 'causal', 'other', 'objective', 'causal', 'causal', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'containment', 'containment', 'purpose', 'purpose', 'owner_emp_use', 'containment', 'purpose', 'containment', 'purpose', 'containment', 'complement', 'causal', 'owner_emp_use', 'other', 'causal', 'loc_part_whole', 'causal', 'topical', 'causal', 'objective', 'objective', 'causal', 'other', 'owner_emp_use', 'causal', 'loc_part_whole', 'topical', 'topical', 'topical', 'topical', 'topical', 'loc_part_whole', 'other', 'causal', 'causal', 'objective', 'causal', 'objective', 'causal', 'causal', 'objective', 'causal', 'causal', 'purpose', 'loc_part_whole', 'topical', 'objective', 'attribute', 'topical', 'objective', 'topical', 'other', 'other', 'other', 'other', 'other', 'attribute', 'attribute', 'other', 'other', 'other', 'other', 'other', 'attribute', 'purpose', 'purpose', 'purpose', 'topical', 'purpose', 'loc_part_whole', 'topical', 'topical', 'attribute', 'objective', 'containment', 'purpose', 'causal', 'containment', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'other', 'objective', 'other', 'other', 'causal', 'topical', 'other', 'attribute', 'objective', 'purpose', 'purpose', 'topical', 'objective', 'loc_part_whole', 'objective', 'objective', 'attribute', 'complement', 'complement', 'topical', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'attribute', 'loc_part_whole', 'loc_part_whole', 'objective', 'loc_part_whole', 'causal', 'containment', 'topical', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'objective', 'purpose', 'purpose', 'purpose', 'purpose', 'topical', 'loc_part_whole', 'owner_emp_use', 'purpose', 'loc_part_whole', 'owner_emp_use', 'containment', 'topical', 'causal', 'other', 'causal', 'objective', 'loc_part_whole', 'loc_part_whole', 'purpose', 'attribute', 'purpose', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'containment', 'loc_part_whole', 'purpose', 'attribute', 'purpose', 'purpose', 'owner_emp_use', 'objective', 'causal', 'objective', 'causal', 'objective', 'causal', 'time', 'time', 'time', 'time', 'topical', 'topical', 'objective', 'purpose', 'time', 'time', 'causal', 'topical', 'time', 'topical', 'time', 'time', 'attribute', 'time', 'objective', 'containment', 'containment', 'objective', 'objective', 'objective', 'causal', 'attribute', 'attribute', 'other', 'complement', 'complement', 'complement', 'attribute', 'complement', 'complement', 'attribute', 'other', 'complement', 'complement', 'complement', 'complement', 'complement', 'complement', 'attribute', 'purpose', 'objective', 'topical', 'topical', 'topical', 'other', 'owner_emp_use', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'objective', 'topical', 'topical', 'topical', 'topical', 'objective', 'topical', 'topical', 'causal', 'topical', 'containment', 'objective', 'containment', 'containment', 'purpose', 'topical', 'containment', 'containment', 'containment', 'containment', 'containment', 'other', 'containment', 'containment', 'containment', 'loc_part_whole', 'containment', 'purpose', 'purpose', 'other', 'objective', 'containment', 'containment', 'objective', 'containment', 'objective', 'containment', 'attribute', 'loc_part_whole', 'topical', 'owner_emp_use', 'purpose', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'owner_emp_use', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'complement', 'loc_part_whole', 'cause', 'cause', 'cause', 'objective', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'containment', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'objective', 'containment', 'containment', 'purpose', 'other', 'attribute', 'purpose', 'purpose', 'other', 'attribute', 'attribute', 'containment', 'loc_part_whole', 'owner_emp_use', 'complement', 'loc_part_whole', 'complement', 'containment', 'purpose', 'purpose', 'containment', 'owner_emp_use', 'purpose', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'objective', 'purpose', 'purpose', 'topical', 'purpose', 'objective', 'causal', 'complement', 'attribute', 'purpose', 'owner_emp_use', 'containment', 'topical', 'loc_part_whole', 'other', 'other', 'attribute', 'other', 'attribute', 'other', 'topical', 'complement', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'objective', 'causal', 'purpose', 'owner_emp_use', 'other', 'purpose', 'other', 'causal', 'objective', 'other', 'purpose', 'purpose', 'purpose', 'topical', 'purpose', 'owner_emp_use', 'owner_emp_use', 'containment', 'other', 'containment', 'causal', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'purpose', 'objective', 'other', 'containment', 'other', 'loc_part_whole', 'attribute', 'objective', 'other', 'complement', 'other', 'purpose', 'cause', 'cause', 'cause', 'owner_emp_use', 'purpose', 'owner_emp_use', 'loc_part_whole', 'other', 'complement', 'complement', 'other', 'time', 'complement', 'objective', 'objective', 'objective', 'purpose', 'loc_part_whole', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'attribute', 'attribute', 'attribute', 'objective', 'complement', 'other', 'other', 'attribute', 'attribute', 'other', 'other', 'attribute', 'other', 'attribute', 'attribute', 'topical', 'other', 'causal', 'purpose', 'purpose', 'other', 'attribute', 'other', 'other', 'attribute', 'other', 'purpose', 'attribute', 'loc_part_whole', 'attribute', 'attribute', 'causal', 'attribute', 'other', 'complement', 'other', 'other', 'attribute', 'attribute', 'attribute', 'other', 'attribute', 'other', 'other', 'attribute', 'other', 'other', 'other', 'purpose', 'attribute', 'containment', 'topical', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'objective', 'purpose', 'purpose', 'purpose', 'other']
    m2 = ['objective', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'objective', 'purpose', 'loc_part_whole', 'purpose', 'loc_part_whole', 'loc_part_whole', 'purpose', 'attribute', 'loc_part_whole', 'topical', 'purpose', 'purpose', 'objective', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'complement', 'complement', 'complement', 'complement', 'purpose', 'purpose', 'purpose', 'objective', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'containment', 'purpose', 'loc_part_whole', 'purpose', 'objective', 'purpose', 'purpose', 'attribute', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'owner_emp_use', 'purpose', 'purpose', 'attribute', 'attribute', 'containment', 'loc_part_whole', 'containment', 'owner_emp_use', 'containment', 'other', 'attribute', 'attribute', 'attribute', 'time', 'time', 'objective', 'other', 'attribute', 'attribute', 'attribute', 'other', 'attribute', 'purpose', 'purpose', 'containment', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'attribute', 'owner_emp_use', 'purpose', 'containment', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'owner_emp_use', 'owner_emp_use', 'purpose', 'objective', 'objective', 'loc_part_whole', 'causal', 'objective', 'objective', 'objective', 'containment', 'objective', 'objective', 'objective', 'objective', 'purpose', 'objective', 'objective', 'objective', 'objective', 'causal', 'loc_part_whole', 'objective', 'objective', 'objective', 'objective', 'owner_emp_use', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'loc_part_whole', 'objective', 'loc_part_whole', 'loc_part_whole', 'objective', 'complement', 'complement', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'objective', 'complement', 'objective', 'objective', 'loc_part_whole', 'loc_part_whole', 'objective', 'objective', 'objective', 'objective', 'objective', 'complement', 'attribute', 'topical', 'other', 'objective', 'complement', 'objective', 'purpose', 'purpose', 'purpose', 'purpose', 'causal', 'complement', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'attribute', 'loc_part_whole', 'objective', 'complement', 'other', 'objective', 'purpose', 'objective', 'objective', 'other', 'objective', 'purpose', 'objective', 'topical', 'objective', 'objective', 'purpose', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'other', 'causal', 'causal', 'topical', 'purpose', 'causal', 'purpose', 'objective', 'objective', 'causal', 'loc_part_whole', 'loc_part_whole', 'purpose', 'attribute', 'purpose', 'purpose', 'purpose', 'purpose', 'attribute', 'purpose', 'objective', 'purpose', 'purpose', 'purpose', 'owner_emp_use', 'owner_emp_use', 'attribute', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'objective', 'loc_part_whole', 'objective', 'attribute', 'objective', 'attribute', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'containment', 'containment', 'objective', 'attribute', 'other', 'topical', 'topical', 'other', 'containment', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'purpose', 'causal', 'objective', 'objective', 'causal', 'objective', 'purpose', 'purpose', 'purpose', 'containment', 'containment', 'containment', 'purpose', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'other', 'objective', 'other', 'objective', 'objective', 'causal', 'causal', 'other', 'causal', 'objective', 'objective', 'topical', 'other', 'causal', 'causal', 'loc_part_whole', 'other', 'owner_emp_use', 'attribute', 'topical', 'time', 'loc_part_whole', 'topical', 'causal', 'causal', 'objective', 'topical', 'purpose', 'objective', 'causal', 'objective', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'causal', 'topical', 'topical', 'purpose', 'topical', 'objective', 'topical', 'other', 'other', 'other', 'other', 'other', 'other', 'attribute', 'other', 'other', 'other', 'purpose', 'other', 'containment', 'containment', 'other', 'objective', 'objective', 'purpose', 'purpose', 'topical', 'causal', 'topical', 'objective', 'other', 'loc_part_whole', 'causal', 'containment', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'attribute', 'causal', 'other', 'other', 'purpose', 'topical', 'topical', 'topical', 'purpose', 'purpose', 'topical', 'topical', 'owner_emp_use', 'purpose', 'topical', 'objective', 'topical', 'owner_emp_use', 'complement', 'topical', 'loc_part_whole', 'containment', 'containment', 'loc_part_whole', 'attribute', 'complement', 'purpose', 'owner_emp_use', 'objective', 'attribute', 'containment', 'purpose', 'purpose', 'owner_emp_use', 'loc_part_whole', 'causal', 'purpose', 'owner_emp_use', 'objective', 'purpose', 'purpose', 'purpose', 'purpose', 'loc_part_whole', 'loc_part_whole', 'containment', 'loc_part_whole', 'containment', 'containment', 'loc_part_whole', 'topical', 'attribute', 'other', 'purpose', 'objective', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'attribute', 'purpose', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'objective', 'topical', 'owner_emp_use', 'owner_emp_use', 'containment', 'objective', 'loc_part_whole', 'objective', 'owner_emp_use', 'complement', 'complement', 'time', 'time', 'time', 'time', 'topical', 'time', 'time', 'time', 'time', 'time', 'complement', 'other', 'time', 'time', 'loc_part_whole', 'time', 'attribute', 'time', 'containment', 'containment', 'objective', 'complement', 'objective', 'objective', 'attribute', 'attribute', 'attribute', 'causal', 'other', 'complement', 'purpose', 'purpose', 'complement', 'other', 'loc_part_whole', 'other', 'other', 'containment', 'complement', 'complement', 'other', 'other', 'other', 'purpose', 'purpose', 'loc_part_whole', 'loc_part_whole', 'owner_emp_use', 'topical', 'containment', 'containment', 'other', 'containment', 'topical', 'topical', 'topical', 'causal', 'topical', 'objective', 'topical', 'topical', 'owner_emp_use', 'topical', 'containment', 'causal', 'containment', 'containment', 'causal', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'purpose', 'containment', 'containment', 'containment', 'loc_part_whole', 'containment', 'containment', 'loc_part_whole', 'loc_part_whole', 'purpose', 'containment', 'purpose', 'objective', 'containment', 'other', 'attribute', 'purpose', 'loc_part_whole', 'time', 'owner_emp_use', 'complement', 'loc_part_whole', 'loc_part_whole', 'attribute', 'loc_part_whole', 'loc_part_whole', 'attribute', 'loc_part_whole', 'loc_part_whole', 'objective', 'objective', 'loc_part_whole', 'owner_emp_use', 'objective', 'cause', 'complement', 'loc_part_whole', 'purpose', 'loc_part_whole', 'complement', 'loc_part_whole', 'purpose', 'purpose', 'owner_emp_use', 'owner_emp_use', 'objective', 'other', 'purpose', 'purpose', 'objective', 'attribute', 'purpose', 'purpose', 'objective', 'attribute', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'owner_emp_use', 'topical', 'loc_part_whole', 'purpose', 'complement', 'topical', 'purpose', 'other', 'objective', 'attribute', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'objective', 'purpose', 'topical', 'purpose', 'purpose', 'objective', 'purpose', 'purpose', 'complement', 'complement', 'containment', 'purpose', 'purpose', 'containment', 'causal', 'purpose', 'owner_emp_use', 'other', 'attribute', 'attribute', 'attribute', 'other', 'other', 'purpose', 'topical', 'objective', 'topical', 'other', 'topical', 'complement', 'purpose', 'complement', 'objective', 'objective', 'other', 'objective', 'other', 'causal', 'objective', 'containment', 'attribute', 'owner_emp_use', 'other', 'other', 'loc_part_whole', 'owner_emp_use', 'loc_part_whole', 'containment', 'other', 'containment', 'attribute', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'purpose', 'objective', 'other', 'containment', 'other', 'attribute', 'attribute', 'containment', 'containment', 'complement', 'purpose', 'purpose', 'other', 'cause', 'cause', 'purpose', 'owner_emp_use', 'complement', 'purpose', 'other', 'complement', 'complement', 'complement', 'time', 'complement', 'objective', 'other', 'attribute', 'purpose', 'causal', 'causal', 'purpose', 'purpose', 'purpose', 'complement', 'attribute', 'attribute', 'attribute', 'attribute', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'purpose', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'containment', 'attribute', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'attribute', 'other', 'other', 'other', 'other', 'other', 'topical', 'objective', 'purpose', 'loc_part_whole', 'topical', 'purpose', 'purpose', 'other', 'objective', 'objective', 'objective', 'topical', 'attribute', 'topical']
    gold = ['owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'complement', 'complement', 'complement', 'complement', 'complement', 'complement', 'other', 'other', 'other', 'complement', 'complement', 'complement', 'complement', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'cause', 'cause', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'objective', 'causal', 'causal', 'causal', 'loc_part_whole', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'topical', 'topical', 'topical', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'causal', 'topical', 'topical', 'topical', 'topical', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'owner_emp_use', 'owner_emp_use', 'topical', 'complement', 'complement', 'causal', 'causal', 'causal', 'causal', 'other', 'loc_part_whole', 'loc_part_whole', 'topical', 'causal', 'causal', 'causal', 'causal', 'causal', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'containment', 'containment', 'containment', 'complement', 'complement', 'complement', 'complement', 'complement', 'other', 'other', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'topical', 'loc_part_whole', 'complement', 'complement', 'complement', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'time', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'purpose', 'purpose', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'topical', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'other', 'other', 'complement', 'complement', 'complement', 'complement', 'complement', 'complement', 'causal', 'loc_part_whole', 'loc_part_whole', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'containment', 'purpose', 'purpose', 'purpose', 'other', 'other', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'purpose', 'purpose', 'purpose', 'purpose', 'other', 'other', 'other', 'causal', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'topical', 'purpose', 'purpose', 'topical', 'purpose', 'purpose', 'purpose', 'complement', 'complement', 'topical', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'owner_emp_use', 'attribute', 'attribute', 'attribute', 'attribute', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'causal', 'owner_emp_use', 'owner_emp_use', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'purpose', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'cause', 'cause', 'cause', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'loc_part_whole', 'time', 'time', 'time', 'time', 'time', 'time', 'other', 'other', 'other', 'complement', 'causal', 'causal', 'purpose', 'purpose', 'purpose', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'attribute', 'topical', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'purpose', 'other']

    m1a = np.array(m1)
    m2a = np.array(m2)
    gold = np.array(gold)

    better_m1 = 0
    better_m2 = 0

    for i in range(100000):
        x = 0
        idx = np.random.choice(range(len(m1)), len(m1))
        m1a_sample = m1a[idx]
        m2a_sample = m2a[idx]
        gold_sample = gold[idx]
        good1 = np.count_nonzero(gold_sample == m1a_sample)
        good2 = np.count_nonzero(gold_sample == m2a_sample)
        if good1 > good2:
            better_m1 += 1
        else:
            better_m2 += 1

    return (better_m1, better_m2)    

print(sys.argv[1])

init_seed()
# l1 = ['/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_context_hypohypernormal', '/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise2_context_hypohypernormal', '/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise3_context_hypohypernormal']
# l2 = ['/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_nocontext', '/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise2_nocontext', '/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise3_nocontext']
# l1 = ['/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_context_hypohypernormal', '/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise2_context_hypohypernormal', '/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_context_hypohypernormal']
# l2 = ['/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_nocontext', '/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise2_nocontext', '/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_nocontext']
# find_best_threshold(l1, l2)
# find_best_threshold_daumestrick(l1, l2)

# print_predictions('/work/rvacarenu/git/multi_word_embedding/z_supervised_normal3_nocontext', 'cgl')
# print_predictions('/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_nocontext', 'cgl')
# exit()
# print_predictions('/work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_nocontext', 'fgl')

# x1=analysis_with_context('/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_context_hypohypernormal')
# print('/work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_context_hypohypernormal')
x1=analysis_no_context(sys.argv[1])
# x1=analysis_with_context_with_threshold(sys.argv[1], sys.argv[2])
print(x1)
# y1=analysis_no_context('/work/rvacarenu/git/multi_word_embedding/z_supervised_normal2_nocontext')
# print(y1)
# z1=analysis_no_context('/work/rvacarenu/git/multi_word_embedding/z_supervised_normal3_nocontext')
# print(z1)

# x2=analysis_no_context('/mnt/8A70445970444E5F/Temp/z_unsupervised_sentencewise1_nocontext')
# print(x2)
# y2=analysis_no_context('/mnt/8A70445970444E5F/Temp/z_unsupervised_sentencewise2_nocontext')
# print(y2)
# z2=analysis_no_context('/mnt/8A70445970444E5F/Temp/z_unsupervised_sentencewise3_nocontext')
# print(z2)
# analysis_with_context('/mnt/8A70445970444E5F/Temp/z_unsupervised_sentencewise1_context_hypohypernormal')

# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_normal1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_normal2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_normal3_nocontext 3
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise3_nocontext 3
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_normal1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_normal2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_normal3_nocontext 3

# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_context_normal /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise2_context_normal /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise3_context_normal /work/rvacarenu/git/multi_word_embedding/z_unsupervised_sentencewise3_nocontext 3

# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_nocontext 3

# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_context_normal /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise1_nocontext 1
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise2_context_normal /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise2_nocontext 2
# /work/rvacarenu/miniconda3/envs/pytorch1.1/bin/python /work/rvacarenu/git/multi_word_embedding/analysis_prediction.py /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_context_normal /work/rvacarenu/git/multi_word_embedding/z_supervised_sentencewise3_nocontext 3





































## UNSUPERVISED
# {'cgl': [[(0.3782813874973521, 0, 5), (0.3780468143768835, 0, 10), (0.3898021864769625, 0, 25), (0.3855812341312119, 0, 50), (0.38878175305833473, 0, 90), (0.3669270821992437, 1, 5), (0.36774529206818646, 1, 10), (0.38144528341867323, 1, 25), (0.37653113799339577, 1, 50), (0.3722225002640868, 1, 90), (0.3528325666553546, 2, 5), (0.3624304578687187, 2, 10), (0.3672164963599891, 2, 25), (0.3655931127328699, 2, 50), (0.35489153294292186, 2, 90), (0.34476333055331165, 3, 5), (0.34721911427784613, 3, 10), (0.3522724969198418, 3, 25), (0.3428389058063359, 3, 50), (0.3313361553330887, 3, 90), (0.3298490034487891, 4, 5), (0.3346453901522413, 4, 10), (0.3366044083315605, 4, 25), (0.3357708980814143, 4, 50), (0.3167126455927852, 4, 90), (0.3592485010874357, 5, 5), (0.34936019409537494, 5, 10), (0.3645627473641764, 5, 25), (0.37631354737823103, 5, 50), (0.3684227564930254, 5, 90), (0.34255920372590243, 6, 5), (0.34205191439664123, 6, 10), (0.34689390696377687, 6, 25), (0.3466770133012599, 6, 50), (0.34851653889817485, 6, 90), (0.32178733232693457, 7, 5), (0.32780869873802115, 7, 10), (0.3434689895349313, 7, 25), (0.34042314135606816, 7, 50), (0.3273329831138282, 7, 90), (0.32427337945533097, 8, 5), (0.32381360191297237, 8, 10), (0.332353907319302, 8, 25), (0.3433532162489752, 8, 50), (0.34022458880551143, 8, 90), (0.32593272791661104, 9, 5), (0.3260088922147983, 9, 10), (0.3345713433683215, 9, 25), (0.342606796591596, 9, 50), (0.33121739042248577, 9, 90)], [(0.37137633305342943, 0, 5), (0.37464613736265284, 0, 10), (0.39217149933719486, 0, 25), (0.38871419791361317, 0, 50), (0.3912133790548793, 0, 90), (0.37144178985685233, 1, 5), (0.36074858169022817, 1, 10), (0.3807918323825396, 1, 25), (0.3731796045442015, 1, 50), (0.3712909050995396, 1, 90), (0.36017387532566036, 2, 5), (0.35116504126918396, 2, 10), (0.3675872153411259, 2, 25), (0.36334374791542334, 2, 50), (0.36517385657058143, 2, 90), (0.34800807547154083, 3, 5), (0.34539113016262835, 3, 10), (0.3485175072933307, 3, 25), (0.3457486543270156, 3, 50), (0.3401532621247159, 3, 90), (0.34450394496658243, 4, 5), (0.3323680134472784, 4, 10), (0.33650627798163635, 4, 25), (0.34122640241750324, 4, 50), (0.3334024110726006, 4, 90), (0.36503093988681284, 5, 5), (0.3576569531784085, 5, 10), (0.37939138558355084, 5, 25), (0.3757071311560938, 5, 50), (0.3717974355947033, 5, 90), (0.354850089528005, 6, 5), (0.35264694013033854, 6, 10), (0.35837911749141843, 6, 25), (0.35000031810049864, 6, 50), (0.3427666686602213, 6, 90), (0.318335240495369, 7, 5), (0.3493500308066362, 7, 10), (0.34628541415482833, 7, 25), (0.34384398523844806, 7, 50), (0.34341203371395845, 7, 90), (0.32859583675966775, 8, 5), (0.311710973595099, 8, 10), (0.3283769185640163, 8, 25), (0.32651875608960995, 8, 50), (0.3474415883913153, 8, 90), (0.31198725173134584, 9, 5), (0.2966258020578455, 9, 10), (0.34114315024920755, 9, 25), (0.3313055673864683, 9, 50), (0.34263501714189454, 9, 90)], [(0.39201643787936635, 0, 5), (0.3870724592383659, 0, 10), (0.38624178542990945, 0, 25), (0.3902345957484623, 0, 50), (0.39028072810399367, 0, 90), (0.3849350171112882, 1, 5), (0.3729741084977359, 1, 10), (0.37341313846711616, 1, 25), (0.37319279392745075, 1, 50), (0.3802189629713088, 1, 90), (0.3779890282169239, 2, 5), (0.3661697069783714, 2, 10), (0.3651550678816176, 2, 25), (0.3701803990307472, 2, 50), (0.37242524615730155, 2, 90), (0.35364626772968516, 3, 5), (0.3545579698186012, 3, 10), (0.3466591213360149, 3, 25), (0.339273442391637, 3, 50), (0.3587064122870058, 3, 90), (0.3490769627038725, 4, 5), (0.35101597236025095, 4, 10), (0.33320767707005233, 4, 25), (0.33289847028711156, 4, 50), (0.342173209194011, 4, 90), (0.3574924119425629, 5, 5), (0.35840686388633874, 5, 10), (0.36891621373032485, 5, 25), (0.37529564270127147, 5, 50), (0.36651217950887716, 5, 90), (0.3463947668560262, 6, 5), (0.3349752481017397, 6, 10), (0.3441200376190676, 6, 25), (0.3464441496443967, 6, 50), (0.3526588333537202, 6, 90), (0.32449550390461157, 7, 5), (0.31043652473898, 7, 10), (0.3427204242841226, 7, 25), (0.3372969214458639, 7, 50), (0.3523337751579334, 7, 90), (0.3185119450256161, 8, 5), (0.3039627782091761, 8, 10), (0.31779726333847486, 8, 25), (0.32957302562371804, 8, 50), (0.34896653660214144, 8, 90), (0.32169023476107617, 9, 5), (0.3122606422045862, 9, 10), (0.322591357759478, 9, 25), (0.32887548694697155, 9, 50), (0.3485730842070277, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
# {'cgl': [], 'fgl': [[(0.415803272970497, 0, 5), (0.40802527010745177, 0, 10), (0.3937731632369722, 0, 25), (0.39665038497879596, 0, 50), (0.3932270650396818, 0, 90), (0.4053612878941299, 1, 5), (0.40114081163145165, 1, 10), (0.3926375288995982, 1, 25), (0.38562078632915947, 1, 50), (0.3888129032707594, 1, 90), (0.3924275798585352, 2, 5), (0.3922567781527804, 2, 10), (0.3879635796081622, 2, 25), (0.37762013302663244, 2, 50), (0.3803100248682387, 2, 90), (0.38301057596140214, 3, 5), (0.3852344921915184, 3, 10), (0.3676987740322083, 3, 25), (0.3601102252442845, 3, 50), (0.3741137505305689, 3, 90), (0.3730750255148819, 4, 5), (0.37531174660353817, 4, 10), (0.3531993396774852, 4, 25), (0.3549691542261483, 4, 50), (0.3618568748606364, 4, 90), (0.39822438204613914, 5, 5), (0.40888434921454075, 5, 10), (0.3832557235673628, 5, 25), (0.39028804577979537, 5, 50), (0.38653427584941447, 5, 90), (0.4026916262486822, 6, 5), (0.38756830348554144, 6, 10), (0.37915492935855577, 6, 25), (0.3885764828216486, 6, 50), (0.3739924329583462, 6, 90), (0.3896940231607346, 7, 5), (0.38563422101475436, 7, 10), (0.37329082633690147, 7, 25), (0.3788692310135714, 7, 50), (0.3675222754292613, 7, 90), (0.38808386750514007, 8, 5), (0.3795226950539602, 8, 10), (0.3668276312335112, 8, 25), (0.3800696759224338, 8, 50), (0.36062361116308267, 8, 90), (0.38207619704695817, 9, 5), (0.3781378581583559, 9, 10), (0.3684585584667498, 9, 25), (0.382239202952604, 9, 50), (0.3603754543712701, 9, 90)], [(0.4204734480862849, 0, 5), (0.42202834734300687, 0, 10), (0.4104577890349908, 0, 25), (0.4015957542585421, 0, 50), (0.39136212461687, 0, 90), (0.41487214889044244, 1, 5), (0.4130317517936334, 1, 10), (0.39772229300752016, 1, 25), (0.3979107539613404, 1, 50), (0.39347639712052024, 1, 90), (0.40387798549909726, 2, 5), (0.40551666720039353, 2, 10), (0.3888299806122486, 2, 25), (0.3833138543584828, 2, 50), (0.38854692009898334, 2, 90), (0.39676890520605684, 3, 5), (0.40032315845093536, 3, 10), (0.3716427375360405, 3, 25), (0.36821062254119175, 3, 50), (0.37463174506729174, 3, 90), (0.39556599252397107, 4, 5), (0.39115191898694474, 4, 10), (0.36717356213231855, 4, 25), (0.36033146387166126, 4, 50), (0.36392749960834725, 4, 90), (0.4181817671746023, 5, 5), (0.42450371020603844, 5, 10), (0.4031630712439084, 5, 25), (0.3941120089835419, 5, 50), (0.37937108280843856, 5, 90), (0.4069312416805575, 6, 5), (0.41234120327630347, 6, 10), (0.39053296113100533, 6, 25), (0.3953289382416856, 6, 50), (0.3708960397443583, 6, 90), (0.398026138484828, 7, 5), (0.4120633675179572, 7, 10), (0.3933378988362744, 7, 25), (0.3844603760792586, 7, 50), (0.3721657464101367, 7, 90), (0.3926238503602263, 8, 5), (0.39628700063450195, 8, 10), (0.3871910357663872, 8, 25), (0.3833779984994899, 8, 50), (0.3663700343722775, 8, 90), (0.3916932812221703, 9, 5), (0.3959232945449926, 9, 10), (0.3880058468351905, 9, 25), (0.38169485464119085, 9, 50), (0.36701546137829794, 9, 90)], [(0.42453935078556626, 0, 5), (0.42090895550949015, 0, 10), (0.41648362492184005, 0, 25), (0.40147159455249937, 0, 50), (0.4002287009127716, 0, 90), (0.4207820591098823, 1, 5), (0.41466811334226705, 1, 10), (0.4008129430709465, 1, 25), (0.40214667959609246, 1, 50), (0.39801717623788696, 1, 90), (0.4101240588877736, 2, 5), (0.39992824784443687, 2, 10), (0.39882285451634436, 2, 25), (0.38974506593680985, 2, 50), (0.3928849393031416, 2, 90), (0.3928839796052144, 3, 5), (0.38813496381817114, 3, 10), (0.39263662595406285, 3, 25), (0.3735698741129318, 3, 50), (0.3768530520243214, 3, 90), (0.38153689262491436, 4, 5), (0.3790774698759725, 4, 10), (0.3860816985499904, 4, 25), (0.3622450792276566, 4, 50), (0.36033850424556324, 4, 90), (0.4071262114402906, 5, 5), (0.4001028001718561, 5, 10), (0.3970396150508317, 5, 25), (0.3867502932475946, 5, 50), (0.39113864121341585, 5, 90), (0.39187044368623863, 6, 5), (0.3997759663623916, 6, 10), (0.3861014260563736, 6, 25), (0.3735573604798093, 6, 50), (0.38554249553069986, 6, 90), (0.3981294097751596, 7, 5), (0.3780519395887838, 7, 10), (0.3733285657974545, 7, 25), (0.3733504104415273, 7, 50), (0.36470828295944224, 7, 90), (0.3779995836195638, 8, 5), (0.37720336162585577, 8, 10), (0.3751738182778737, 8, 25), (0.36878150712162633, 8, 50), (0.36690046495933737, 8, 90), (0.37955388464421724, 9, 5), (0.38003041124075443, 9, 10), (0.37452417712028635, 9, 25), (0.3682548492613898, 9, 50), (0.36643038512132275, 9, 90)]], 'cgr': [], 'fgr': []}
# {'cgl': [], 'fgl': [], 'cgr': [[(0.5982087609628108, 0, 5), (0.5978653120662508, 0, 10), (0.6035011630537971, 0, 25), (0.6010115648092957, 0, 50), (0.6104777485275861, 0, 90), (0.5951350579768203, 1, 5), (0.5938677256144633, 1, 10), (0.5973541699787354, 1, 25), (0.5960759160724335, 1, 50), (0.6071248337541574, 1, 90), (0.5903336476105263, 2, 5), (0.5934904727623621, 2, 10), (0.5955252763491589, 2, 25), (0.5968539291958053, 2, 50), (0.6091892180581598, 2, 90), (0.5896510545625782, 3, 5), (0.5914154965287277, 3, 10), (0.5919345775625232, 3, 25), (0.5935722393239994, 3, 50), (0.6114361039133386, 3, 90), (0.5833085463885981, 4, 5), (0.5898602822645523, 4, 10), (0.5858888277902256, 4, 25), (0.5884588392810369, 4, 50), (0.6114048132650838, 4, 90), (0.5343226274063584, 5, 5), (0.5559156507969513, 5, 10), (0.5649014571017663, 5, 25), (0.5940532822060649, 5, 50), (0.5798545890877165, 5, 90), (0.497762921037043, 6, 5), (0.47830541794541276, 6, 10), (0.5119443636961171, 6, 25), (0.5004782352081942, 6, 50), (0.525676167205516, 6, 90), (0.4398452693987577, 7, 5), (0.46695788257241577, 7, 10), (0.4507212259405072, 7, 25), (0.48670354628720913, 7, 50), (0.4934674666209327, 7, 90), (0.4172596109432336, 8, 5), (0.45198069685525033, 8, 10), (0.4584487678736591, 8, 25), (0.4744082723321031, 8, 50), (0.4640387642420637, 8, 90), (0.41930433365125885, 9, 5), (0.452614359028517, 9, 10), (0.4478100979907353, 9, 25), (0.46019355293832903, 9, 50), (0.46638167307262746, 9, 90)], [(0.6138677396750671, 0, 5), (0.6042503952708843, 0, 10), (0.6050933450327515, 0, 25), (0.6020542445400484, 0, 50), (0.6141351362781852, 0, 90), (0.617531035894853, 1, 5), (0.6083754871336962, 1, 10), (0.6063069069671267, 1, 25), (0.5978120954644214, 1, 50), (0.6092107831254969, 1, 90), (0.6107913163420883, 2, 5), (0.6095945901188639, 2, 10), (0.6077761700013508, 2, 25), (0.5927304176634672, 2, 50), (0.6039129984405085, 2, 90), (0.5999491297532752, 3, 5), (0.6098824420964958, 3, 10), (0.5998485244707467, 3, 25), (0.5984036634769353, 3, 50), (0.6070453298103486, 3, 90), (0.5960939874067724, 4, 5), (0.604389297691807, 4, 10), (0.5995647058609567, 4, 25), (0.5971804489662299, 4, 50), (0.6080995800299516, 4, 90), (0.5470717450506277, 5, 5), (0.5476486704314669, 5, 10), (0.5591907812724707, 5, 25), (0.5881304241891556, 5, 50), (0.5811053421562002, 5, 90), (0.4815708526061015, 6, 5), (0.5133412945137531, 6, 10), (0.49993516847936215, 6, 25), (0.5463617035657711, 6, 50), (0.545151388417251, 6, 90), (0.4440221605935675, 7, 5), (0.451992669696246, 7, 10), (0.45844252591896323, 7, 25), (0.4576842237565175, 7, 50), (0.4882574535669322, 7, 90), (0.4518020655226081, 8, 5), (0.46298269541201614, 8, 10), (0.4583164309537097, 8, 25), (0.4862799034916102, 8, 50), (0.456568977749472, 8, 90), (0.43512440938459007, 9, 5), (0.4558113099414182, 9, 10), (0.4730238114918816, 9, 25), (0.4871297957069862, 9, 50), (0.45538427726032615, 9, 90)], [(0.6065971847519118, 0, 5), (0.5979189537784383, 0, 10), (0.5908682857024706, 0, 25), (0.5857481762788541, 0, 50), (0.6034950692314734, 0, 90), (0.6085042258976159, 1, 5), (0.595710557315949, 1, 10), (0.592010907356809, 1, 25), (0.588657606342776, 1, 50), (0.5921332087270642, 1, 90), (0.6106627297078011, 2, 5), (0.6039872767235409, 2, 10), (0.5865498351113304, 2, 25), (0.5856434096336764, 2, 50), (0.5925306348498977, 2, 90), (0.602627957076022, 3, 5), (0.6038368967736818, 3, 10), (0.5829485181073373, 3, 25), (0.5801111141683117, 3, 50), (0.5915639275017376, 3, 90), (0.604042581273862, 4, 5), (0.6028644707566512, 4, 10), (0.5810737265081867, 4, 25), (0.5816748661085351, 4, 50), (0.588575656875638, 4, 90), (0.5356507390762959, 5, 5), (0.5620577831215845, 5, 10), (0.5498342330754065, 5, 25), (0.5673902181819686, 5, 50), (0.5834953833825931, 5, 90), (0.48721104652907926, 6, 5), (0.4905616481390015, 6, 10), (0.5395943457766874, 6, 25), (0.5326684203773876, 6, 50), (0.510663645158058, 6, 90), (0.43827362153815536, 7, 5), (0.4812592940955219, 7, 10), (0.47955910845102595, 7, 25), (0.49723693661316615, 7, 50), (0.44738561005310606, 7, 90), (0.429538516988762, 8, 5), (0.42743208156378304, 8, 10), (0.45266336079127695, 8, 25), (0.4788937635366271, 8, 50), (0.45647961942518256, 8, 90), (0.4349491780638692, 9, 5), (0.42585468309901736, 9, 10), (0.4459623385197902, 9, 25), (0.4700471549315736, 9, 50), (0.45692093647484155, 9, 90)]], 'fgr': []}
# {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5488241686852108, 0, 5), (0.5524803396889513, 0, 10), (0.5526672648885746, 0, 25), (0.5486679739022968, 0, 50), (0.5741888298183513, 0, 90), (0.5507957167642988, 1, 5), (0.5518739158986815, 1, 10), (0.557218833723347, 1, 25), (0.5538838551754386, 1, 50), (0.5713894017085774, 1, 90), (0.5526233900816275, 2, 5), (0.5590337042360871, 2, 10), (0.55898908340512, 2, 25), (0.558950408878422, 2, 50), (0.5730609607783822, 2, 90), (0.5468270239026773, 3, 5), (0.5540200517038967, 3, 10), (0.5472289281844883, 3, 25), (0.5556327629969816, 3, 50), (0.5792283932295347, 3, 90), (0.5513365439047788, 4, 5), (0.5559334324706474, 4, 10), (0.5399528854351364, 4, 25), (0.5481885272816027, 4, 50), (0.571965700670769, 4, 90), (0.5634209805290122, 5, 5), (0.580354143784334, 5, 10), (0.5845561754555832, 5, 25), (0.5824880686543333, 5, 50), (0.593656957424263, 5, 90), (0.5514265111282504, 6, 5), (0.5548754321120832, 6, 10), (0.5711042846343574, 6, 25), (0.5788245600964348, 6, 50), (0.5733555932307303, 6, 90), (0.517466654488254, 7, 5), (0.5469307558281511, 7, 10), (0.547591222263191, 7, 25), (0.5640731714457059, 7, 50), (0.5449667855275393, 7, 90), (0.4992379884008261, 8, 5), (0.517661192790849, 8, 10), (0.5072267214898312, 8, 25), (0.539692653301569, 8, 50), (0.5247743472614333, 8, 90), (0.4987571846634131, 9, 5), (0.5179620719469966, 9, 10), (0.5236527851113115, 9, 25), (0.536168454269414, 9, 50), (0.5349806572323567, 9, 90)], [(0.5690731712939507, 0, 5), (0.5612189542577929, 0, 10), (0.5740439186706405, 0, 25), (0.576234683269052, 0, 50), (0.5817925588680203, 0, 90), (0.5775838363909404, 1, 5), (0.5719248471490392, 1, 10), (0.573732566904233, 1, 25), (0.5827063591658987, 1, 50), (0.5868459072551351, 1, 90), (0.5790601800032034, 2, 5), (0.5770919751946948, 2, 10), (0.5728929522241356, 2, 25), (0.5792705026730136, 2, 50), (0.5893088113764589, 2, 90), (0.5736190319877646, 3, 5), (0.5756987619704409, 3, 10), (0.5831398435332026, 3, 25), (0.5800391057881402, 3, 50), (0.5888215244003349, 3, 90), (0.5694745558513293, 4, 5), (0.5727471077466343, 4, 10), (0.5795074724420625, 4, 25), (0.5788317455796086, 4, 50), (0.5778670181661687, 4, 90), (0.5822439130718755, 5, 5), (0.6069271076378908, 5, 10), (0.6004860984181436, 5, 25), (0.5934852320415592, 5, 50), (0.5920069742572892, 5, 90), (0.5760991243671885, 6, 5), (0.5726372425893023, 6, 10), (0.5704977271730408, 6, 25), (0.6037334164105607, 6, 50), (0.5996871181959947, 6, 90), (0.5492024034587573, 7, 5), (0.543216146829633, 7, 10), (0.5538500012854053, 7, 25), (0.5750382791222607, 7, 50), (0.5723653547347778, 7, 90), (0.5216548870671832, 8, 5), (0.5444857409971939, 8, 10), (0.5278452745168168, 8, 25), (0.5452826196148453, 8, 50), (0.5574355881753135, 8, 90), (0.5148699350506994, 9, 5), (0.5466059657704806, 9, 10), (0.512872955295235, 9, 25), (0.5491108887045227, 9, 50), (0.5664044038479331, 9, 90)], [(0.554770173943866, 0, 5), (0.5680894622533437, 0, 10), (0.5710249839269915, 0, 25), (0.570669268590137, 0, 50), (0.5708144719664034, 0, 90), (0.5602843606128322, 1, 5), (0.5687000130781631, 1, 10), (0.5635465553473752, 1, 25), (0.565721458340422, 1, 50), (0.5814396912950707, 1, 90), (0.5612653072371557, 2, 5), (0.5601166276661611, 2, 10), (0.5668778191611719, 2, 25), (0.5683867759959343, 2, 50), (0.5850065764956783, 2, 90), (0.5653703981251791, 3, 5), (0.5622458207619893, 3, 10), (0.5648551435266416, 3, 25), (0.5699032021069081, 3, 50), (0.5843339443499673, 3, 90), (0.5620584811926106, 4, 5), (0.5635930768508417, 4, 10), (0.5526492166497516, 4, 25), (0.5686843203997365, 4, 50), (0.5852101262040553, 4, 90), (0.5804209089465837, 5, 5), (0.575643805157343, 5, 10), (0.5997006241035899, 5, 25), (0.5828146716922874, 5, 50), (0.6027993798486125, 5, 90), (0.5620509265420591, 6, 5), (0.5626811539937522, 6, 10), (0.5561381321183536, 6, 25), (0.5632414805523251, 6, 50), (0.5755826304944637, 6, 90), (0.5340435911325218, 7, 5), (0.5506495097099877, 7, 10), (0.5465635505908237, 7, 25), (0.5627190105992537, 7, 50), (0.5666966933860206, 7, 90), (0.4997780687182747, 8, 5), (0.5324347220500408, 8, 10), (0.5504806317312283, 8, 25), (0.5545968521657774, 8, 50), (0.564360981626576, 8, 90), (0.5031632569570922, 9, 5), (0.5290449759880886, 9, 10), (0.5448426619508594, 9, 25), (0.5588312460395962, 9, 50), (0.5568167017712876, 9, 90)]]}


# SUPERVISED
# {'cgl': [[(0.4102804329347522, 0, 5), (0.41208536186729433, 0, 10), (0.4231259952775517, 0, 25), (0.41921452305971646, 0, 50), (0.4138169262246121, 0, 90), (0.39836511003030206, 1, 5), (0.4052881905569985, 1, 10), (0.4092884262251215, 1, 25), (0.40966779520458957, 1, 50), (0.39843408756213533, 1, 90), (0.3881889255918104, 2, 5), (0.39301959572688444, 2, 10), (0.4000588910566318, 2, 25), (0.3985351879754606, 2, 50), (0.38954477644955987, 2, 90), (0.37166440742623874, 3, 5), (0.38451811005236664, 3, 10), (0.36934701280223153, 3, 25), (0.37389530567115703, 3, 50), (0.3647776330120258, 3, 90), (0.36863442502614446, 4, 5), (0.37100528129179694, 4, 10), (0.35755238921472304, 4, 25), (0.3560937904539152, 4, 50), (0.3444706522569105, 4, 90), (0.3853275384979439, 5, 5), (0.3747905552233459, 5, 10), (0.3914222120188986, 5, 25), (0.38021841568110815, 5, 50), (0.3931250406711551, 5, 90), (0.36387428593924276, 6, 5), (0.35646969233628856, 6, 10), (0.37483776252063494, 6, 25), (0.37140400216913305, 6, 50), (0.3614250952804833, 6, 90), (0.34358957635883985, 7, 5), (0.3614699344300774, 7, 10), (0.36457202418424556, 7, 25), (0.3604352918409713, 7, 50), (0.3638132422467477, 7, 90), (0.34469240276552005, 8, 5), (0.3217570948870951, 8, 10), (0.33708552129927993, 8, 25), (0.35204118516095734, 8, 50), (0.35698565716482744, 8, 90), (0.33151931062270584, 9, 5), (0.32144047253534525, 9, 10), (0.3362675855409881, 9, 25), (0.3470608773997233, 9, 50), (0.3614758210187094, 9, 90)], [(0.40308637147270365, 0, 5), (0.4175825933966849, 0, 10), (0.41694553122448164, 0, 25), (0.42188594274500124, 0, 50), (0.41471563986308974, 0, 90), (0.39419726715169173, 1, 5), (0.4086996234077219, 1, 10), (0.4113048812163874, 1, 25), (0.4074519708507448, 1, 50), (0.4056981277780971, 1, 90), (0.3829242026308986, 2, 5), (0.3990312207868829, 2, 10), (0.395203915845685, 2, 25), (0.3981140244083306, 2, 50), (0.38828181830797426, 2, 90), (0.3719065432592382, 3, 5), (0.3706185161774576, 3, 10), (0.3854508361495431, 3, 25), (0.3861978792201278, 3, 50), (0.38227992478066797, 3, 90), (0.36418299009219696, 4, 5), (0.3649977482140913, 4, 10), (0.3748469510090493, 4, 25), (0.3783119727717996, 4, 50), (0.3688728406084082, 4, 90), (0.38187701701044086, 5, 5), (0.38933223502474285, 5, 10), (0.3878524000365328, 5, 25), (0.4027965581001839, 5, 50), (0.39095155452064545, 5, 90), (0.3746640399534234, 6, 5), (0.3835881582404714, 6, 10), (0.3853440033775971, 6, 25), (0.38497187627271046, 6, 50), (0.3717925932628463, 6, 90), (0.34736938091701314, 7, 5), (0.3657965276940995, 7, 10), (0.3652261289273505, 7, 25), (0.37986504772076285, 7, 50), (0.36361318361544553, 7, 90), (0.34071103205346165, 8, 5), (0.3415514014068976, 8, 10), (0.3487732277513302, 8, 25), (0.367781896839728, 8, 50), (0.3592568230707075, 8, 90), (0.3342337450480731, 9, 5), (0.3421200862513303, 9, 10), (0.35166251479864213, 9, 25), (0.3674656008332376, 9, 50), (0.362803637692165, 9, 90)], [(0.41022159933139585, 0, 5), (0.417755511965642, 0, 10), (0.4154310854330731, 0, 25), (0.4147507455109812, 0, 50), (0.4088234233262463, 0, 90), (0.39620303382913946, 1, 5), (0.40520010795394223, 1, 10), (0.40580191812601735, 1, 25), (0.399196443916301, 1, 50), (0.399388037413909, 1, 90), (0.3869353501216854, 2, 5), (0.3856925172970741, 2, 10), (0.38989081142394905, 2, 25), (0.38661081459057145, 2, 50), (0.38539596202813003, 2, 90), (0.3743842179423089, 3, 5), (0.3773817389864607, 3, 10), (0.38108355886851997, 3, 25), (0.3631830783488949, 3, 50), (0.37207887069969764, 3, 90), (0.3628776162121137, 4, 5), (0.3672485875506718, 4, 10), (0.36188553154834524, 4, 25), (0.3558932513351208, 4, 50), (0.3507435719643765, 4, 90), (0.38971893591986806, 5, 5), (0.38243207977063, 5, 10), (0.3971816385680995, 5, 25), (0.39579362233978366, 5, 50), (0.39106753078420226, 5, 90), (0.37237758633127965, 6, 5), (0.3778107688166909, 6, 10), (0.3742933419163627, 6, 25), (0.3667304578447956, 6, 50), (0.3720487279014911, 6, 90), (0.3540097065088358, 7, 5), (0.3720084980359627, 7, 10), (0.3519223119903412, 7, 25), (0.36069886021350117, 7, 50), (0.35521464317799406, 7, 90), (0.3314276275128467, 8, 5), (0.34549802260329104, 8, 10), (0.3372856563730308, 8, 25), (0.33256739248217576, 8, 50), (0.3536739584284242, 8, 90), (0.328134591376323, 9, 5), (0.3366874944818235, 9, 10), (0.3463030354431289, 9, 25), (0.33432514785791645, 9, 50), (0.35620968758539645, 9, 90)]], 'fgl': [], 'cgr': [], 'fgr': []}
# {'cgl': [], 'fgl': [[(0.44018287683414437, 0, 5), (0.4374704863828879, 0, 10), (0.4329581080072101, 0, 25), (0.4300000662527114, 0, 50), (0.4339915145072298, 0, 90), (0.4337458435309339, 1, 5), (0.42888878239427825, 1, 10), (0.4264211863868156, 1, 25), (0.424618259580433, 1, 50), (0.4337302931132867, 1, 90), (0.42321662368432755, 2, 5), (0.42334321745355225, 2, 10), (0.41598785460620225, 2, 25), (0.41195960442025853, 2, 50), (0.41752435409352645, 2, 90), (0.408471598702253, 3, 5), (0.41611847794978946, 3, 10), (0.40750872985138703, 3, 25), (0.39794534811210397, 3, 50), (0.40226274909969467, 3, 90), (0.39847952783303603, 4, 5), (0.4050468345156869, 4, 10), (0.3948845383774175, 4, 25), (0.3859575425389037, 4, 50), (0.3905588546877185, 4, 90), (0.42307068921425167, 5, 5), (0.4195107046046909, 5, 10), (0.41714786320366964, 5, 25), (0.41624116693418206, 5, 50), (0.4169776813650202, 5, 90), (0.425723122742877, 6, 5), (0.4221722346669565, 6, 10), (0.42184380303793984, 6, 25), (0.40719848549915344, 6, 50), (0.4107287878541265, 6, 90), (0.42347317360426495, 7, 5), (0.41166173141612133, 7, 10), (0.40544823305371963, 7, 25), (0.4071200635848804, 7, 50), (0.4076235872923531, 7, 90), (0.4057859311268913, 8, 5), (0.40891741237695955, 8, 10), (0.4010853291668894, 8, 25), (0.40712013291202964, 8, 50), (0.4049433798024638, 8, 90), (0.4136660569296781, 9, 5), (0.403678611736522, 9, 10), (0.3947961835628832, 9, 25), (0.4053323457182333, 9, 50), (0.40434484256287095, 9, 90)], [(0.4399850843536158, 0, 5), (0.4352550838926977, 0, 10), (0.4320715279451688, 0, 25), (0.4237364563145757, 0, 50), (0.4229868938170582, 0, 90), (0.4349863814421545, 1, 5), (0.4301498852436695, 1, 10), (0.424837246440088, 1, 25), (0.41547616594063236, 1, 50), (0.41938745760296925, 1, 90), (0.4204640289837625, 2, 5), (0.4225216042613754, 2, 10), (0.41343178913964423, 2, 25), (0.39539186634720985, 2, 50), (0.4025083214919781, 2, 90), (0.4091798984199242, 3, 5), (0.4113104845112113, 3, 10), (0.4026008311834082, 3, 25), (0.38174918537139974, 3, 50), (0.39029563053908156, 3, 90), (0.39791090786256766, 4, 5), (0.3928487390654487, 4, 10), (0.39146999977749314, 4, 25), (0.37387289187504574, 4, 50), (0.38501357686099574, 4, 90), (0.42339687815537663, 5, 5), (0.42426378929620695, 5, 10), (0.43315691710863136, 5, 25), (0.4123643946929854, 5, 50), (0.40875397333024616, 5, 90), (0.4201121935807676, 6, 5), (0.4289600021124884, 6, 10), (0.41633808100138614, 6, 25), (0.4047288342806114, 6, 50), (0.4090304052088028, 6, 90), (0.41934345076302987, 7, 5), (0.4126467234165702, 7, 10), (0.41247415164334517, 7, 25), (0.39279534172840697, 7, 50), (0.39276753117118474, 7, 90), (0.410635748949425, 8, 5), (0.39151054129098006, 8, 10), (0.40710427145825695, 8, 25), (0.3940321333000986, 8, 50), (0.39823362633949283, 8, 90), (0.4108599763235845, 9, 5), (0.3899388535537887, 9, 10), (0.40605878110762494, 9, 25), (0.39438618017662747, 9, 50), (0.39807305686367966, 9, 90)], [(0.4402475621774054, 0, 5), (0.4330453091952697, 0, 10), (0.4391608874563181, 0, 25), (0.4248422182781126, 0, 50), (0.4289093988672736, 0, 90), (0.4444450351694549, 1, 5), (0.42991107302401377, 1, 10), (0.43290936818375486, 1, 25), (0.4199051348221317, 1, 50), (0.42963307068286116, 1, 90), (0.4365133956158961, 2, 5), (0.43334219934103535, 2, 10), (0.43542521786194005, 2, 25), (0.4139776172963612, 2, 50), (0.416871027737984, 2, 90), (0.416380296320427, 3, 5), (0.41741259303656897, 3, 10), (0.4249904685935248, 3, 25), (0.3960805313867102, 3, 50), (0.4038090304192427, 3, 90), (0.4011009225295238, 4, 5), (0.41059701241022034, 4, 10), (0.40920555291087857, 4, 25), (0.38602278769468334, 4, 50), (0.39190813718164985, 4, 90), (0.4237175296230875, 5, 5), (0.4426037029367199, 5, 10), (0.4221092926910767, 5, 25), (0.4061322366870223, 5, 50), (0.4190775537988329, 5, 90), (0.42033464236441104, 6, 5), (0.431796319212524, 6, 10), (0.41974254088681684, 6, 25), (0.4026924302664537, 6, 50), (0.4174429066002549, 6, 90), (0.4146101657054444, 7, 5), (0.4262720243680534, 7, 10), (0.4133108436045176, 7, 25), (0.3967877343319732, 7, 50), (0.40721401103910215, 7, 90), (0.4038839517135078, 8, 5), (0.41693270113711167, 8, 10), (0.4079112626562324, 8, 25), (0.3922226471543043, 8, 50), (0.4032810507698635, 8, 90), (0.4055171736573638, 9, 5), (0.4159159966321856, 9, 10), (0.4039033248494488, 9, 25), (0.3918124435294805, 9, 50), (0.4037375097369582, 9, 90)]], 'cgr': [], 'fgr': []}
# 
# {'cgl': [], 'fgl': [], 'cgr': [], 'fgr': [[(0.5903718870737162, 0, 5), (0.6011489810413875, 0, 10), (0.5925130222230471, 0, 25), (0.6024335811083996, 0, 50), (0.6094000928652691, 0, 90), (0.6005279479680646, 1, 5), (0.6049420952279738, 1, 10), (0.6036868305176555, 1, 25), (0.5980181669259957, 1, 50), (0.6153509318865661, 1, 90), (0.5929839948862893, 2, 5), (0.5986218891715384, 2, 10), (0.6075005070656517, 2, 25), (0.6074698974885206, 2, 50), (0.6182322130943207, 2, 90), (0.5908107387218855, 3, 5), (0.5828417264333067, 3, 10), (0.5865391144117658, 3, 25), (0.5985335232357253, 3, 50), (0.6039959891852699, 3, 90), (0.5868435812058838, 4, 5), (0.5812156088430335, 4, 10), (0.5818658678012405, 4, 25), (0.5955281463239098, 4, 50), (0.5924709539242682, 4, 90), (0.6039878015060552, 5, 5), (0.6115419982595495, 5, 10), (0.6233282843210733, 5, 25), (0.6321479790870382, 5, 50), (0.6066992744454001, 5, 90), (0.582683404849217, 6, 5), (0.6009567890543889, 6, 10), (0.6056516823758414, 6, 25), (0.620087143879415, 6, 50), (0.6120584720062278, 6, 90), (0.5540285251413007, 7, 5), (0.5625609045595903, 7, 10), (0.5805535241303752, 7, 25), (0.5782993886467233, 7, 50), (0.5763806496584883, 7, 90), (0.5319658415885316, 8, 5), (0.5528620420788595, 8, 10), (0.5659187297955962, 8, 25), (0.5719769676935522, 8, 50), (0.5577424080138667, 8, 90), (0.5294431165873039, 9, 5), (0.5461183208302762, 9, 10), (0.5676094564801941, 9, 25), (0.5799784513504256, 9, 50), (0.5549281834057279, 9, 90)], [(0.5793677445821952, 0, 5), (0.5930525137116809, 0, 10), (0.5877458856795724, 0, 25), (0.6035673503203225, 0, 50), (0.5943533648070481, 0, 90), (0.5939079994751041, 1, 5), (0.5964865590897356, 1, 10), (0.5841812190604989, 1, 25), (0.6008174500662772, 1, 50), (0.5947880187014272, 1, 90), (0.5953738988175196, 2, 5), (0.6029776049053617, 2, 10), (0.5955883261268273, 2, 25), (0.5973344519983158, 2, 50), (0.5958986979161736, 2, 90), (0.5921187869745803, 3, 5), (0.5896747072748365, 3, 10), (0.5911411240008166, 3, 25), (0.591567997828993, 3, 50), (0.5900970825162217, 3, 90), (0.5841422549255977, 4, 5), (0.5845316888158516, 4, 10), (0.5892650269639353, 4, 25), (0.5854126525070832, 4, 50), (0.5799711179057827, 4, 90), (0.5788459073327208, 5, 5), (0.6105737353336383, 5, 10), (0.6107802099464169, 5, 25), (0.6022168275625115, 5, 50), (0.6226154661473274, 5, 90), (0.5645106877427807, 6, 5), (0.5950974952335355, 6, 10), (0.5766836197483562, 6, 25), (0.5934053499660329, 6, 50), (0.6135158347092889, 6, 90), (0.5518624605116741, 7, 5), (0.5751149215488339, 7, 10), (0.5830244631997044, 7, 25), (0.5880066342907111, 7, 50), (0.5837550948387072, 7, 90), (0.5394955381889776, 8, 5), (0.5476254206591833, 8, 10), (0.5758332855940197, 8, 25), (0.5764027489822078, 8, 50), (0.577007885762227, 8, 90), (0.5298968122180164, 9, 5), (0.5538071940012614, 9, 10), (0.5749826969549459, 9, 25), (0.5799848487617251, 9, 50), (0.5863628995000022, 9, 90)], [(0.5863242473764344, 0, 5), (0.5939230509343515, 0, 10), (0.5858147237402392, 0, 25), (0.5889287167764624, 0, 50), (0.5900730413176192, 0, 90), (0.5892870982620022, 1, 5), (0.5951794346678319, 1, 10), (0.5937520597364832, 1, 25), (0.5908498219470437, 1, 50), (0.5948428658410876, 1, 90), (0.6044216055059937, 2, 5), (0.5877577540680644, 2, 10), (0.5977259575427265, 2, 25), (0.5906421644463046, 2, 50), (0.589377710307729, 2, 90), (0.5980646493510393, 3, 5), (0.5823481156549339, 3, 10), (0.5974107287533773, 3, 25), (0.5888850938452845, 3, 50), (0.5869771389267504, 3, 90), (0.5899449979408353, 4, 5), (0.57661040573333, 4, 10), (0.589716259238575, 4, 25), (0.5821866071276894, 4, 50), (0.5761580857082187, 4, 90), (0.6076499923621551, 5, 5), (0.6027091873910214, 5, 10), (0.6145069609950401, 5, 25), (0.6105484604414246, 5, 50), (0.6162097570418094, 5, 90), (0.5871808992835582, 6, 5), (0.5725819525164284, 6, 10), (0.5945413269265135, 6, 25), (0.6004952910851253, 6, 50), (0.6076466067239048, 6, 90), (0.5484815240735404, 7, 5), (0.5631062018562601, 7, 10), (0.5716407233469012, 7, 25), (0.5759765889045486, 7, 50), (0.5826622138590767, 7, 90), (0.5576794941897906, 8, 5), (0.5766778409945758, 8, 10), (0.5825400171034448, 8, 25), (0.5690413564789807, 8, 50), (0.5617587030949365, 8, 90), (0.5541335632925123, 9, 5), (0.5799495854703666, 9, 10), (0.5761009788773995, 9, 25), (0.5728667833141179, 9, 50), (0.569190245020359, 9, 90)]]}